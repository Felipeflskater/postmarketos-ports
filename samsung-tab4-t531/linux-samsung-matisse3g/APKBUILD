# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=4.4.302
pkgrel=0
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531) - LineageOS 18.1"
arch="armv7"
_carch="arm"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gettext-dev gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz
"
_commit="pmos-matisse3g-fixes"
source="
	$pkgname-$_commit.tar.gz::https://github.com/felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/pmos-matisse3g-fixes.tar.gz
	config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_msm8226-pmos-matisse3g-fixes"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel..."

    # FIX CRÍTICO: Remover completamente as definições problemáticas de bool/false
    _log "Aplicando fix definitivo para C23..."

    # 1. Fix include/linux/stddef.h - remover enum problemático
    if [ -f include/linux/stddef.h ]; then
        _log "Corrigindo include/linux/stddef.h"
        # Remove enum { false = 0, true = 1 }; completamente
        sed -i '/^enum[[:space:]]*{[[:space:]]*$/,/^}[[:space:]]*;[[:space:]]*$/d' include/linux/stddef.h
        # Remove linhas individuais que podem estar causando problema
        sed -i '/false[[:space:]]*=[[:space:]]*0/d' include/linux/stddef.h
        sed -i '/true[[:space:]]*=[[:space:]]*1/d' include/linux/stddef.h
    fi

    # 2. Fix include/linux/types.h - remover typedef problemático
    if [ -f include/linux/types.h ]; then
        _log "Corrigindo include/linux/types.h"
        # Remove todas as variações de typedef bool
        sed -i '/typedef.*Bool.*bool;/d' include/linux/types.h
        sed -i '/typedef.*_Bool.*bool;/d' include/linux/types.h
        sed -i '/typedef[[:space:]]*\*Bool[[:space:]]*bool;/d' include/linux/types.h

        # Adiciona definição segura se não existir
        if ! grep -q "typedef.*bool" include/linux/types.h 2>/dev/null; then
            # Encontra linha com u64 e adiciona bool depois
            sed -i '/typedef.*u64;/a\\n#ifdef __KERNEL__\n#ifndef __cplusplus\n#ifndef _LINUX_BOOL_TYPE_DEFINED\n#define _LINUX_BOOL_TYPE_DEFINED\ntypedef unsigned char bool;\n#define false 0\n#define true 1\n#endif\n#endif\n#endif' include/linux/types.h
        fi
    fi

    # 3. MAKEFILE FIXES ULTRA AGRESSIVOS - GCC 15.2.0 usa C23 por padrão!
    _log "Aplicando fix ultra agressivo para GCC 15.2.0 (C23 padrão)"

    # Remove definições existentes
    sed -i '/^HOSTCFLAGS.*:=/d' Makefile
    sed -i '/^HOSTCXXFLAGS.*:=/d' Makefile
    sed -i '/^KBUILD_HOSTCFLAGS.*:=/d' Makefile
    sed -i '/^KBUILD_HOSTCXXFLAGS.*:=/d' Makefile

    # CRÍTICO: GCC 15.2.0 usa C23 por padrão, precisamos forçar C11 EVERYWHERE
    sed -i '/^EXTRAVERSION = /a\\n# ULTRA CRITICAL C23->C11 FIX for GCC 15.2.0\n# GCC 15.2.0 defaults to C23, we MUST force C11\nHOSTCC := gcc -std=gnu11\nHOSTCXX := g++ -std=gnu++11\nHOSTCFLAGS := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11 -Wno-unused-but-set-variable -Wno-main\nHOSTCXXFLAGS := -O2 -std=gnu++11\nKBUILD_HOSTCFLAGS := $(HOSTCFLAGS)\nKBUILD_HOSTCXXFLAGS := $(HOSTCXXFLAGS)\n\n# FORCE override any environment or default C23\noverride CFLAGS := -std=gnu11 $(filter-out -std=%,$(CFLAGS))\noverride HOSTCFLAGS := -std=gnu11 $(filter-out -std=%,$(HOSTCFLAGS))\noverride KBUILD_HOSTCFLAGS := -std=gnu11 $(filter-out -std=%,$(KBUILD_HOSTCFLAGS))\n\n# Export para sub-makes\nexport HOSTCC HOSTCXX HOSTCFLAGS HOSTCXXFLAGS KBUILD_HOSTCFLAGS KBUILD_HOSTCXXFLAGS' Makefile

    # ULTRA FIX: Criar wrapper script para GCC que sempre força C11
    _log "Criando wrapper GCC que força C11..."
    mkdir -p scripts/postmarketos

    cat > scripts/postmarketos/gcc-c11-wrapper << 'EOF'
#!/bin/bash
# Wrapper para GCC que força C11 e remove C23
args=()
found_std=false

for arg in "$@"; do
    case "$arg" in
        -std=*)
            # Substitui qualquer std por gnu11
            args+=("-std=gnu11")
            found_std=true
            ;;
        *)
            args+=("$arg")
            ;;
    esac
done

# Se não encontrou -std e está compilando C, adiciona C11
if [ "$found_std" = "false" ]; then
    for arg in "$@"; do
        if [[ "$arg" == *.c ]] || [[ "$*" == *" -c "* ]]; then
            args=("-std=gnu11" "${args[@]}")
            break
        fi
    done
fi

# Executa GCC real com argumentos modificados
exec /usr/bin/gcc "${args[@]}"
EOF
    chmod +x scripts/postmarketos/gcc-c11-wrapper

    # Modifica HOSTCC para usar nosso wrapper em todo lugar
    sed -i '/^export HOSTCC/c\export HOSTCC := $(shell pwd)/scripts/postmarketos/gcc-c11-wrapper' Makefile

    # Fix ULTRA ESPECÍFICO para scripts/mod/Makefile (epicentro do erro)
    if [ -f scripts/mod/Makefile ]; then
        _log "Aplicando fix ultra específico em scripts/mod/Makefile"

        # Backup do arquivo original
        cp scripts/mod/Makefile scripts/mod/Makefile.orig

        # Reescreve o arquivo com fix completo
        cat > scripts/mod/Makefile << 'EOF'
# PostmarketOS ULTRA C23->C11 FIX
# Original scripts/mod/Makefile with forced C11

PHONY := __modinst
__modinst:

include scripts/Kbuild.include

# CRITICAL: Force C11 to override GCC 15.2.0 C23 default
HOSTCFLAGS += -std=gnu11 -Wall -O2
KBUILD_HOSTCFLAGS += -std=gnu11

__modinst: $(modules)
	@:

# Prevents rules from scripts/Makefile.host from being used on
# built-in.o or lib.a targets
$(filter %.o,$(obj-y)) $(filter %.o,$(obj-m)): $(objtree)/Module.symvers ;

# Don't rebuild autoksyms.h if the only thing we are missing is
# a MODULE_LICENSE tag: the missing module is compiled anyway,
# and will be caught at final link time.
else ifneq ($(KBUILD_EXTMOD),)

PHONY += crmodverdir
crmodverdir:
	$(cmd_crmodverdir)

__modinst: crmodverdir
	@if [ -z $(wildcard $(KERNELRELEASE)) ]; then \
		echo "ERROR: $(KERNELRELEASE) does not exist."; \
		echo "       You need to build it first."; \
		false; \
	fi
	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst

endif

# When linking a module, we need to account for the fact that the
# linker script may refer to these symbols regardless of whether
# they were previously relocated.
cmd_ld_ko_o = \
	$(if $(strip $(filter-out FORCE,$^)), \
		$(LD) $(LDFLAGS) $(LDFLAGS_MODULE) -o $@ 		\
			--whole-archive				\
			$(filter-out FORCE,$^)			\
			--no-whole-archive,			\
		rm -f $@ ; $(AR) rcs$(KBUILD_ARFLAGS) $@)

ifdef CONFIG_DEBUG_SECTION_MISMATCH
quiet_cmd_kernel_ld = KSYM    $@
      cmd_kernel_ld = $(LD) $(LDFLAGS) $(ldflags-y) -r -o $@ $(filter-out FORCE,$^) ; true

ifdef CONFIG_LTO_CLANG
# Don't rebuild if only __UNIQUE_ID_ changes
cmd_ld_ko_o = $(if $(strip $(filter-out __UNIQUE_ID_% %/FORCE,$^)), \
	       $(cmd_ld_ko_o_partial))
else
# Don't rebuild if only the UNIQUE_ID changed
cmd_ld_ko_o = $(if $(strip $(filter-out __UNIQUE_ID_% %/FORCE,$^)), \
	       $(cmd_ld_ko_o_partial))
endif
endif

# Built-in and composite module parts
hostprogs-y	:= modpost mk_elfconfig
always		:= $(hostprogs-y) empty.o

modpost-objs	:= modpost.o file2alias.o sumversion.o

devicetable-offsets-file := devicetable-offsets.h

define sed-y
	"/^->/{s:^->\([^ ]*\) [\$#]*\([-0-9]*\) \(.*\):#define \1 \2 /* \3 */:; s:-::; p;}"
endef

quiet_cmd_offsets = GEN     $@
define cmd_offsets
	(set -e; \
	 echo "#ifndef __DEVICETABLE_OFFSETS_H__"; \
	 echo "#define __DEVICETABLE_OFFSETS_H__"; \
	 echo "/*"; \
	 echo " * DO NOT MODIFY."; \
	 echo " *"; \
	 echo " * This file was generated by Kbuild"; \
	 echo " *"; \
	 echo " */"; \
	 echo ""; \
	 sed -ne $(sed-y) $<; \
	 echo ""; \
	 echo "#endif" ) > $@
endef

$(obj)/devicetable-offsets.h: $(obj)/devicetable-offsets.s FORCE
	$(call if_changed,offsets)

targets += devicetable-offsets.s

# dependencies on generated files need to be listed explicitly
$(obj)/modpost.o $(obj)/file2alias.o $(obj)/sumversion.o: $(obj)/devicetable-offsets.h

$(obj)/devicetable-offsets.s: $(src)/devicetable-offsets.c FORCE
	$(call if_changed_dep,cc_s_c)

# Let clean descend into subdirs
subdir- += elfconfig

EOF

        # Força C11 também no resto dos scripts
        for script in scripts/Makefile.host scripts/Makefile.build scripts/Makefile.headersinst; do
            if [ -f "$script" ]; then
                sed -i '1i# Force C11 override\nHOSTCFLAGS += -std=gnu11\nKBUILD_HOSTCFLAGS += -std=gnu11' "$script"
            fi
        done
    fi

    # 4. Define arquitetura ARM com TODAS as configurações necessárias
    _log "Definindo configurações ARM completas no Makefile..."

    cat >> Makefile << 'EOF'

# PostmarketOS ARM Configuration - COMPLETE
KBUILD_CFLAGS += -D__LINUX_ARM_ARCH__=7
KBUILD_CFLAGS += -DCONFIG_CPU_V7=1
KBUILD_CFLAGS += -DCONFIG_CPU_32v7=1
KBUILD_CFLAGS += -DCONFIG_CPU_ABRT_EV7=1
KBUILD_CFLAGS += -DCONFIG_CPU_PABRT_V7=1
KBUILD_CFLAGS += -DCONFIG_CPU_CACHE_V7=1
KBUILD_CFLAGS += -DCONFIG_CPU_CACHE_VIPT=1
KBUILD_CFLAGS += -DCONFIG_CPU_COPY_V6=1
KBUILD_CFLAGS += -DCONFIG_CPU_TLB_V7=1
KBUILD_CFLAGS += -DCONFIG_ARM_THUMB=1
KBUILD_CFLAGS += -DCONFIG_CPU_USE_DOMAINS=1
KBUILD_CFLAGS += -DCONFIG_MMU=1
KBUILD_CFLAGS += -DMULTI_CACHE=1
KBUILD_CFLAGS += -DMULTI_USER=1
KBUILD_CFLAGS += -DMULTI_DABORT=1
KBUILD_CFLAGS += -DMULTI_PABORT=1
KBUILD_CFLAGS += -DCPU_COPY_USER_V6=1
KBUILD_CFLAGS += -DCPU_CLEAR_USER_V6=1

# Apply to assembly flags too
KBUILD_AFLAGS += -D__LINUX_ARM_ARCH__=7
KBUILD_AFLAGS += -DCONFIG_CPU_V7=1
KBUILD_AFLAGS += -DCONFIG_ARM_THUMB=1

EOF

    # 5. Cria headers de compatibilidade
    mkdir -p arch/arm/include/mach include/mach

    # sec_debug.h
    cat > arch/arm/include/mach/sec_debug.h << 'EOF'
#ifndef __ASM_MACH_SEC_DEBUG_H
#define __ASM_MACH_SEC_DEBUG_H
#define sec_debug_init() do {} while (0)
#define sec_debug_reboot_handler(x) do {} while (0)
#define sec_debug_hw_init() do {} while (0)
#define sec_debug_set_upload_magic(x) do {} while (0)
#define sec_debug_set_upload_cause(x) do {} while (0)
#endif
EOF

    # bitsperlong.h
    cat > arch/arm/include/asm/bitsperlong.h << 'EOF'
#ifndef __ASM_ARM_BITSPERLONG_H
#define __ASM_ARM_BITSPERLONG_H
#define __BITS_PER_LONG 32
#endif
EOF

    # postmarketos_compat.h - VERSÃO COMPLETA com todas as definições ARM
    cat > arch/arm/include/asm/postmarketos_compat.h << 'EOF'
/*
 * PostmarketOS ARM Compatibility Header - COMPLETE VERSION
 * Defines ALL necessary ARM architecture constants
 */
#ifndef __ASM_POSTMARKETOS_COMPAT_H
#define __ASM_POSTMARKETOS_COMPAT_H

/* Force ARM architecture version */
#ifndef __LINUX_ARM_ARCH__
#define __LINUX_ARM_ARCH__ 7
#endif

/* CPU Configuration - COMPLETE SET */
#define CONFIG_CPU_V7 1
#define CONFIG_CPU_32v7 1
#define CONFIG_CPU_ABRT_EV7 1
#define CONFIG_CPU_PABRT_V7 1
#define CONFIG_CPU_CACHE_V7 1
#define CONFIG_CPU_CACHE_VIPT 1
#define CONFIG_CPU_COPY_V6 1
#define CONFIG_CPU_TLB_V7 1
#define CONFIG_ARM_THUMB 1
#define CONFIG_CPU_USE_DOMAINS 1
#define CONFIG_MMU 1

/* Multi-platform support */
#define MULTI_CACHE 1
#define MULTI_USER 1
#define MULTI_DABORT 1
#define MULTI_PABORT 1

/* CPU Features */
#define CPU_COPY_USER_V6 1
#define CPU_CLEAR_USER_V6 1

/* Cache definitions for glue-cache.h */
#define CONFIG_CPU_CACHE_V7 1
#define CPU_CACHE_v7_invalidate_all v7_invalidate_kern_cache_all
#define CPU_CACHE_v7_flush_all v7_flush_kern_cache_all
#define CPU_CACHE_v7_flush_user_all v7_flush_user_cache_all
#define CPU_CACHE_v7_flush_user_range v7_flush_user_cache_range
#define CPU_CACHE_v7_coherent_kern_range v7_coherent_kern_range
#define CPU_CACHE_v7_coherent_user_range v7_coherent_user_range
#define CPU_CACHE_v7_flush_kern_dcache_area v7_flush_kern_dcache_area
#define CPU_CACHE_v7_dma_map_area v7_dma_map_area
#define CPU_CACHE_v7_dma_unmap_area v7_dma_unmap_area
#define CPU_CACHE_v7_dma_flush_range v7_dma_flush_range

/* Data abort handler for glue-df.h */
#define CONFIG_CPU_ABRT_EV7 1
#define CPU_DABORT_HANDLER v7_early_abort

/* Prefetch abort handler for glue-pf.h */
#define CONFIG_CPU_PABRT_V7 1
#define CPU_PABORT_HANDLER v7_pabort

/* User operations for page.h */
#ifndef CONFIG_ARM_LPAE
#define CONFIG_CPU_COPY_V6 1
#define CONFIG_CPU_CLEAR_V6 1
#define CPU_COPY_USER_V6 1
#define CPU_CLEAR_USER_V6 1
#endif

#endif /* __ASM_POSTMARKETOS_COMPAT_H */
EOF

    # Inclui compatibilidade nos headers ARM E remove erros #error
    _log "Aplicando fixes específicos nos headers ARM..."

    for header in page.h glue-cache.h glue-df.h glue-pf.h; do
        if [ -f "arch/arm/include/asm/$header" ]; then
            _log "Corrigindo arch/arm/include/asm/$header"
            # Include compatibility header no topo
            sed -i '1i\#include <asm/postmarketos_compat.h>' "arch/arm/include/asm/$header"

            # Remove todas as linhas #error que estão causando falha
            sed -i '/^#error.*Unknown.*model/d' "arch/arm/include/asm/$header"
            sed -i '/^#error.*Unknown.*handler/d' "arch/arm/include/asm/$header"
            sed -i '/^#error.*Unknown.*operations/d' "arch/arm/include/asm/$header"
            sed -i '/^#error.*Unknown.*maintenance/d' "arch/arm/include/asm/$header"
            sed -i '/^#error.*Unknown.*type/d' "arch/arm/include/asm/$header"
        fi
    done

    # Fix específico para page.h - adicionar definições que podem estar faltando
    if [ -f arch/arm/include/asm/page.h ]; then
        # Se houver #ifdef CONFIG_ARM_LPAE, adicionar definição adequada
        if grep -q "CONFIG_ARM_LPAE" arch/arm/include/asm/page.h; then
            sed -i '/CONFIG_ARM_LPAE/i\#ifndef CONFIG_ARM_LPAE\n#define CONFIG_ARM_LPAE 0\n#endif' arch/arm/include/asm/page.h
        fi

        # Adicionar definições de user operations se não existirem
        if ! grep -q "CPU_COPY_USER" arch/arm/include/asm/page.h; then
            sed -i '/Unknown user operations model/i\#define CPU_COPY_USER CPU_COPY_USER_V6\n#define CPU_CLEAR_USER CPU_CLEAR_USER_V6' arch/arm/include/asm/page.h
        fi
    fi

    # 6. Desativa módulos problemáticos
    if [ -f drivers/gpu/gpu_sysfs/Kbuild ]; then
        _log "Desativando gpu_sysfs/Kbuild..."
        echo "# disabled" > drivers/gpu/gpu_sysfs/Kbuild
    fi

    # 7. Copia config e prepara build
    cp "$srcdir/config-samsung-matisse3g.armv7" .config || _die "Falha ao copiar config"

    # 8. Executa preparação do kernel com variables ULTRA AGRESSIVAS
    _log "Executando preparação do kernel com C11 forçado..."
    export ARCH=arm
    export CROSS_COMPILE=armv7-alpine-linux-musleabihf-

    # ULTRA CRÍTICO: Força C11 para TODAS as operações
    # GCC 15.2.0 usa C23 por padrão, temos que ser agressivos
    export CC="gcc -std=gnu11"
    export HOSTCC="gcc -std=gnu11"
    export HOSTCXX="g++ -std=gnu++11"
    export HOSTCFLAGS="-std=gnu11 -Wall -O2 -Wno-unused-but-set-variable"
    export HOSTCXXFLAGS="-std=gnu++11 -Wall -O2"
    export KBUILD_HOSTCFLAGS="-std=gnu11"
    export KBUILD_HOSTCXXFLAGS="-std=gnu++11"
    export KBUILD_CFLAGS="-std=gnu11"

    # Remove qualquer flag C23 que possa estar no ambiente
    unset CPPFLAGS
    export CFLAGS="-std=gnu11"

    yes "" | make ARCH=arm HOSTCC="gcc -std=gnu11" oldconfig || _die "oldconfig falhou"
    make ARCH=arm HOSTCC="gcc -std=gnu11" prepare || _die "prepare falhou"
    make ARCH=arm HOSTCC="gcc -std=gnu11" scripts || _die "scripts falhou"

    _log "Preparação concluída!"
}

build() {
    cd "$builddir"

    _log "Compilando kernel com C11 forçado (GCC 15.2.0)..."

    # Configuração do ambiente ULTRA AGRESSIVA
    export ARCH=arm
    export CROSS_COMPILE=armv7-alpine-linux-musleabihf-
    export KBUILD_BUILD_VERSION="$((pkgrel + 1))-postmarketOS"

    # CRÍTICO: GCC 15.2.0 usa C23 por padrão - força C11 em TUDO
    export CC="gcc -std=gnu11"
    export HOSTCC="gcc -std=gnu11"
    export HOSTCXX="g++ -std=gnu++11"
    export HOSTCFLAGS="-std=gnu11 -Wall -O2 -Wno-unused-but-set-variable -Wno-main"
    export HOSTCXXFLAGS="-std=gnu++11 -Wall -O2"
    export KBUILD_HOSTCFLAGS="-std=gnu11"
    export KBUILD_HOSTCXXFLAGS="-std=gnu++11"
    export KBUILD_CFLAGS="-std=gnu11"
    export CFLAGS="-std=gnu11"

    # Remove flags C23 do ambiente
    unset CPPFLAGS

    # Compila kernel com HOSTCC forçado em cada comando
    make -j$(nproc) \
        HOSTCC="gcc -std=gnu11" \
        CC="gcc -std=gnu11" \
        zImage modules dtbs || _die "Falha na compilação"

    # Gera dt.img se possível
    if command -v dtbTool >/dev/null 2>&1; then
        _log "Gerando dt.img..."
        dtbTool -s 2048 -p scripts/dtc/ -o arch/arm/boot/dt.img arch/arm/boot/dts/ || _log "dtbTool falhou, continuando..."
    fi
}

package() {
    cd "$builddir"

    _log "Empacotando kernel..."

    # Instala kernel e módulos
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" INSTALL_PATH="$pkgdir/boot" \
        ARCH=arm CROSS_COMPILE=armv7-alpine-linux-musleabihf- \
        install modules_install || _die "Falha ao instalar"

    # Instala arquivos do kernel
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-samsung-matisse3g"

    # Instala DTB se existir
    if [ -f arch/arm/boot/dt.img ]; then
        install -Dm644 arch/arm/boot/dt.img "$pkgdir/boot/dt.img"
    fi

    _log "Empacotamento concluído!"
}

sha512sums="
22318063633d48e1d6c90b895e5bf5d0d1318c686afa74b8186817d1bef686dca8aa4908e63f6a3dc6895ac8b24070adcbc6a8f6a3473ca5710232dc5963ce6c  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
3e8c37f9ec48f57454e7931064061b8f3b3af536f241b17c78f18415e4b72e5e9c2b2d653c50e72398440a592dbc9b50c107339433b076c069917ec2beeac925  config-samsung-matisse3g.armv7
"
