# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=8
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Otimizado para PostmarketOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz gcc-arm-none-eabi
"

_commit="pmos-matisse3g-fixes"
_cross_prefix="arm-none-eabi-"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	fix-user-macro.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel Matisse3G com correções otimizadas - BUILD LOCAL"
    _log "Diretório: $builddir"

    # ============ VERIFICAÇÃO DO COMPILADOR CRUZADO ============
    _log "Verificando disponibilidade do compilador cruzado..."

    if command -v "arm-none-eabi-gcc" >/dev/null 2>&1; then
        export _cross_prefix="arm-none-eabi-"
        _log "✓ Usando arm-none-eabi-gcc"
    elif command -v "arm-linux-gnueabihf-gcc" >/dev/null 2>&1; then
        export _cross_prefix="arm-linux-gnueabihf-"
        _log "✓ Usando arm-linux-gnueabihf-gcc"
    else
        _die "Compilador cruzado ARM não encontrado!"
    fi

    # ============ CORREÇÃO CRÍTICA: __user MACRO ============
    _log "CORREÇÃO CRÍTICA: Corrigindo macro __user em capability.h..."

    # Criar patch temporário para capability.h
    if [ -f include/linux/capability.h ]; then
        # Backup
        cp include/linux/capability.h include/linux/capability.h.backup

        # Adicionar definição de __user no início do arquivo
        sed -i '1i#ifndef __user\n#define __user\n#endif' include/linux/capability.h

        _log "✓ Macro __user definida em capability.h"
    fi

    # ============ CORREÇÃO ADICIONAL: COMPILER.H ============
    _log "Corrigindo include/linux/compiler.h..."

    if [ -f include/linux/compiler.h ]; then
        # Verificar se já não tem a correção
        if ! grep -q "#ifndef __user" include/linux/compiler.h; then
            # Adicionar no final do arquivo
            cat >> include/linux/compiler.h << 'EOF'

/* Correções para PostmarketOS */
#ifndef __user
#define __user
#endif

#ifndef __kernel
#define __kernel
#endif

#ifndef __force
#define __force
#endif

#ifndef __iomem
#define __iomem
#endif

#ifndef __acquires
#define __acquires(x)
#endif

#ifndef __releases
#define __releases(x)
#endif
EOF
        fi
    else
        # Criar compiler.h se não existir
        mkdir -p include/linux
        cat > include/linux/compiler.h << 'EOF'
#ifndef __LINUX_COMPILER_H
#define __LINUX_COMPILER_H

/* Definições básicas de macros para compilação */
#ifndef __user
#define __user
#endif

#ifndef __kernel
#define __kernel
#endif

#ifndef __force
#define __force
#endif

#ifndef __iomem
#define __iomem
#endif

#ifndef __acquires
#define __acquires(x)
#endif

#ifndef __releases
#define __releases(x)
#endif

#endif /* __LINUX_COMPILER_H */
EOF
    fi

    # ============ LIMPEZA E AMBIENTE ============
    _log "Configurando ambiente de compilação..."

    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS
    export LDFLAGS=""
    export CPPFLAGS=""
    export CFLAGS=""
    export CXXFLAGS=""

    export ARCH=arm
    export SUBARCH=arm
    export CROSS_COMPILE="${_cross_prefix}"

    local base_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing -fno-common -fno-PIE -no-pie"
    local warning_flags="-Wno-error -Wno-array-bounds -Wno-stringop-overflow -Wno-format-overflow -Wno-incompatible-pointer-types -Wno-discarded-qualifiers -Wno-int-conversion -Wno-implicit-function-declaration -Wno-format-security"
    local gcc_compat="-fgnu89-inline -fno-strict-overflow -fconserve-stack -fno-delete-null-pointer-checks -fno-tree-loop-im -fno-tree-loop-ivcanon"

    export HOSTCFLAGS="$base_flags $warning_flags $gcc_compat"
    export HOSTLDFLAGS="-no-pie -fno-stack-protector"
    export KBUILD_HOSTCFLAGS="$base_flags $warning_flags $gcc_compat"
    export KBUILD_HOSTLDFLAGS="-no-pie"
    export KBUILD_CFLAGS_KERNEL="$base_flags"
    export KCFLAGS="$base_flags $warning_flags $gcc_compat"

    # ============ CORREÇÃO CRÍTICA: KBUILD.H ============
    _log "CORREÇÃO CRÍTICA: Corrigindo include/linux/kbuild.h..."

    mkdir -p include/linux
    cat > include/linux/kbuild.h << 'EOF'
#ifndef __LINUX_KBUILD_H
#define __LINUX_KBUILD_H

#define DEFINE(sym, val) \
        __asm__ __volatile__("\n->" #sym " %0 " #val : : "i" (val))

#define BLANK() \
        __asm__ __volatile__("\n->" : : )

#define OFFSET(sym, str, mem) \
        DEFINE(sym, offsetof(struct str, mem))

#define COMMENT(x) \
        __asm__ __volatile__("\n->#" x)

#endif
EOF

    # ============ CORREÇÃO: STDDEF.H ============
    _log "Corrigindo stddef.h..."

    mkdir -p include/uapi/linux include/uapi/asm include/linux include/generated

    cat > include/linux/stddef.h << 'EOF'
#ifndef _LINUX_STDDEF_H
#define _LINUX_STDDEF_H

#include <uapi/linux/stddef.h>

#ifndef __ASSEMBLY__
#undef false
#undef true
enum { false = 0, true = 1 };

#undef offsetof
#ifdef __compiler_offsetof
#define offsetof(TYPE, MEMBER) __compiler_offsetof(TYPE, MEMBER)
#else
#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
#endif
#endif /* __ASSEMBLY__ */

#endif /* _LINUX_STDDEF_H */
EOF

    cat > include/uapi/linux/stddef.h << 'EOF'
#ifndef _UAPI_LINUX_STDDEF_H
#define _UAPI_LINUX_STDDEF_H

#ifndef __ASSEMBLY__
#ifndef NULL
#ifdef __cplusplus
#define NULL 0
#else
#define NULL ((void *)0)
#endif
#endif
#endif /* __ASSEMBLY__ */

#endif /* _UAPI_LINUX_STDDEF_H */
EOF

    # ============ APLICAR CONFIGURAÇÃO ============
    _log "Aplicando configuração..."

    if [ ! -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        _die "Arquivo de configuração não encontrado: config-samsung-matisse3g.armv7"
    fi

    cp "$srcdir/config-samsung-matisse3g.armv7" .config

    # ============ CORREÇÕES ESPECÍFICAS CONFIG ============
    cat >> .config << 'EOF'

# ============ CORREÇÃO MSM_SPM_REGULATOR ============
CONFIG_MSM_SPM_REGULATOR=n

# ============ EVITAR CONFLITOS ============
CONFIG_ARCH_MSM8610=n
CONFIG_MSM8610_DEVICE=n

# ============ RESOLVER INTERATIVAS ============
CONFIG_ARCH_RANDOM=n
CONFIG_GENERIC_TIME_VSYSCALL=y

# ============ MATISSE3G ESPECÍFICO ============
CONFIG_MATISSE_3G=y
CONFIG_ARCH_MSM8226=y
CONFIG_MSM_SMD=y

# ============ ESSENCIAIS ============
CONFIG_GPIOLIB=y
CONFIG_PINCTRL=y
CONFIG_PINCTRL_MSM=y
CONFIG_COMMON_CLK=y
CONFIG_CLKDEV_LOOKUP=y

# ============ VFP ============
CONFIG_VFP=y
CONFIG_VFPv3=y
CONFIG_NEON=y

# ============ DESABILITAR PROBLEMÁTICOS ============
CONFIG_WERROR=n
CONFIG_MODVERSIONS=n
CONFIG_DEBUG_INFO=n

# ============ PREEMPTION ============
CONFIG_PREEMPT_NONE=y
CONFIG_PREEMPT_VOLUNTARY=n
CONFIG_PREEMPT=n
EOF

    # ============ CORREÇÃO ASM-OFFSETS.C ============
    _log "Corrigindo asm-offsets.c..."

    if [ -f arch/arm/kernel/asm-offsets.c ]; then
        cp arch/arm/kernel/asm-offsets.c arch/arm/kernel/asm-offsets.c.backup

        # Adicionar definição __user no início
        sed -i '1i/* Definir __user se não estiver definido */\n#ifndef __user\n#define __user\n#endif\n' arch/arm/kernel/asm-offsets.c

        _log "✓ asm-offsets.c corrigido"
    fi

    # ============ CONFIGURAÇÃO AUTOMATIZADA ============
    _log "Executando configuração automatizada..."

    printf "n\ny\n" | make ARCH=arm CROSS_COMPILE="${_cross_prefix}" \
                            HOSTCFLAGS="$HOSTCFLAGS" \
                            HOSTLDFLAGS="$HOSTLDFLAGS" \
                            KCFLAGS="$KCFLAGS" \
                            oldconfig || {
        _log "oldconfig falhou, tentando olddefconfig..."
        make ARCH=arm CROSS_COMPILE="${_cross_prefix}" \
             HOSTCFLAGS="$HOSTCFLAGS" \
             HOSTLDFLAGS="$HOSTLDFLAGS" \
             KCFLAGS="$KCFLAGS" \
             olddefconfig || _die "configuração falhou"
    }

    # ============ VERIFICAÇÃO FINAL ============
    if grep -q "CONFIG_MSM_SPM_REGULATOR=y" .config; then
        sed -i 's/CONFIG_MSM_SPM_REGULATOR=y/CONFIG_MSM_SPM_REGULATOR=n/' .config
    fi

    _log "Executando preparação..."
    make ARCH=arm CROSS_COMPILE="${_cross_prefix}" \
         HOSTCFLAGS="$HOSTCFLAGS" \
         HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" \
         prepare || _die "preparação falhou"

    _log "Preparação concluída com sucesso!"
}

build() {
    cd "$builddir"
    _log "Iniciando compilação do kernel Matisse3G..."

    # ============ CONFIGURAÇÃO DE AMBIENTE LIMPA ============
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS

    export ARCH=arm
    export SUBARCH=arm
    export CROSS_COMPILE="${_cross_prefix}"

    # ============ FLAGS CORRIGIDAS - SEM ESPAÇOS ============
    local base_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing -fno-common -fno-PIE -no-pie"
    local warning_flags="-Wno-error -Wno-array-bounds -Wno-stringop-overflow -Wno-format-overflow -Wno-incompatible-pointer-types -Wno-discarded-qualifiers -Wno-int-conversion -Wno-implicit-function-declaration -Wno-format-security"
    local gcc_compat="-fgnu89-inline -fno-strict-overflow -fconserve-stack -fno-delete-null-pointer-checks -fno-tree-loop-im -fno-tree-loop-ivcanon"

    export HOSTCFLAGS="$base_flags $warning_flags $gcc_compat"
    export HOSTLDFLAGS="-no-pie"
    export KCFLAGS="$base_flags $warning_flags $gcc_compat"

    # ============ LIMPEZA ANTES DA COMPILAÇÃO ============
    _log "Limpando arquivos de compilação anterior..."
    make ARCH=arm CROSS_COMPILE="${_cross_prefix}" clean || true

    # ============ COMPILAÇÃO COM FLAGS SEPARADAS ============
    _log "Compilando zImage..."
    make ARCH=arm \
         CROSS_COMPILE="${_cross_prefix}" \
         HOSTCFLAGS="$HOSTCFLAGS" \
         HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" \
         LDFLAGS="" \
         -j1 \
         zImage || _die "Falha na compilação do zImage"

    _log "Compilando módulos..."
    make ARCH=arm \
         CROSS_COMPILE="${_cross_prefix}" \
         HOSTCFLAGS="$HOSTCFLAGS" \
         HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" \
         LDFLAGS="" \
         -j1 \
         modules || _log "AVISO: Alguns módulos falharam"

    # ============ DTBs SE EXISTIREM ============
    if [ -d arch/arm/boot/dts ] && find arch/arm/boot/dts -name "*.dts" | grep -q "msm8226\|matisse"; then
        _log "Compilando Device Tree Blobs..."
        make ARCH=arm \
             CROSS_COMPILE="${_cross_prefix}" \
             HOSTCFLAGS="$HOSTCFLAGS" \
             HOSTLDFLAGS="$HOSTLDFLAGS" \
             KCFLAGS="$KCFLAGS" \
             LDFLAGS="" \
             -j1 \
             dtbs || _log "AVISO: Compilação de DTBs falhou"
    fi

    _log "Compilação concluída com sucesso!"
}

package() {
    cd "$builddir"
    _log "Empacotando kernel Matisse3G..."

    # ============ INSTALAÇÃO DE MÓDULOS ============
    make DESTDIR="$pkgdir" \
         INSTALL_MOD_PATH="$pkgdir" \
         ARCH=arm \
         CROSS_COMPILE="${_cross_prefix}" \
         modules_install || _log "AVISO: Instalação de módulos falhou"

    # ============ INSTALAÇÃO DO KERNEL ============
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"

    # ============ INSTALAÇÃO DE DTBs ============
    if [ -d arch/arm/boot/dts ]; then
        dtb_count=$(find arch/arm/boot/dts -name "*.dtb" 2>/dev/null | wc -l)
        if [ "$dtb_count" -gt 0 ]; then
            _log "Instalando $dtb_count DTBs..."
            mkdir -p "$pkgdir/boot/dtbs-$_flavor"
            find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null || true
        fi
    fi

    # ============ LINK SIMBÓLICO ============
    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz-samsung-matisse3g" || true

    # ============ INFORMAÇÕES DA COMPILAÇÃO ============
    echo "Informações da compilação do kernel:" > "$pkgdir/boot/kernel-info-$_flavor"
    echo "Versão: $pkgver-$pkgrel" >> "$pkgdir/boot/kernel-info-$_flavor"
    echo "Data da compilação: $(date)" >> "$pkgdir/boot/kernel-info-$_flavor"
    echo "Fonte: $_commit" >> "$pkgdir/boot/kernel-info-$_flavor"
    echo "Compilador cruzado: $_cross_prefix" >> "$pkgdir/boot/kernel-info-$_flavor"
    echo "Correções aplicadas: __user macro, MSM_SPM_REGULATOR=n, flags corrigidas" >> "$pkgdir/boot/kernel-info-$_flavor"

    _log "Empacotamento concluído com sucesso!"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
9bcc57e7a3de597dec583da93f5cab0200f48dc053eaeaeb499dab993f50c5a5af5639b14c3eaa04f72eb430df694a920613116e2b9008fab4da86ca92311606  config-samsung-matisse3g.armv7
SKIP  fix-user-macro.patch
"
