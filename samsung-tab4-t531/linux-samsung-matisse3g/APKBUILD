## Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=4.4.302
pkgrel=0
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531) - LineageOS 18.1"
arch="armv7"
_carch="arm"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gettext-dev gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz
"
_commit="pmos-matisse3g-fixes"
source="
	$pkgname-$_commit.tar.gz::https://github.com/felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/pmos-matisse3g-fixes.tar.gz
	config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_msm8226-pmos-matisse3g-fixes"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel..."

    # Define arquitetura
    echo 'KBUILD_CFLAGS += -D__LINUX_ARM_ARCH__=7' >> Makefile

    # Cria headers de compatibilidade
    mkdir -p arch/arm/include/mach include/mach

    # sec_debug.h (simplificado)
    cat > arch/arm/include/mach/sec_debug.h << 'EOF'
#ifndef __ASM_MACH_SEC_DEBUG_H
#define __ASM_MACH_SEC_DEBUG_H
#define sec_debug_init() do {} while (0)
#define sec_debug_reboot_handler(x) do {} while (0)
#define sec_debug_hw_init() do {} while (0)
#define sec_debug_set_upload_magic(x) do {} while (0)
#define sec_debug_set_upload_cause(x) do {} while (0)
#endif
EOF

    # bitsperlong.h
    cat > arch/arm/include/asm/bitsperlong.h << 'EOF'
#ifndef __ASM_ARM_BITSPERLONG_H
#define __ASM_ARM_BITSPERLONG_H
#define __BITS_PER_LONG 32
#endif
EOF

    # postmarketos_compat.h
    cat > arch/arm/include/asm/postmarketos_compat.h << 'EOF'
#ifndef __ASM_POSTMARKETOS_COMPAT_H
#define __ASM_POSTMARKETOS_COMPAT_H
#include <asm/bitsperlong.h>
#include <asm/page.h>
#endif
EOF

    # Inclui compatibilidade
    for header in page.h glue-cache.h glue-df.h glue-pf.h; do
        sed -i '1i\#include <asm/postmarketos_compat.h>' arch/arm/include/asm/$header 2>/dev/null || true
    done

    # Desativa gpu_sysfs
    if [ -f drivers/gpu/gpu_sysfs/Kbuild ]; then
        echo "# disabled" > drivers/gpu/gpu_sysfs/Kbuild
    fi

    # Copia config
    cp "$srcdir/config-samsung-matisse3g.armv7" .config || _die "Falha ao copiar config"

    # Executa oldconfig
    _log "Executando oldconfig..."
    yes "" | make ARCH=arm oldconfig || _die "oldconfig falhou"
}

build() {
    cd "$builddir"
    export ARCH=arm
    export CROSS_COMPILE=armv7-alpine-linux-musleabihf-
    export KBUILD_BUILD_VERSION="$((pkgrel + 1))-postmarketOS"

    _log "Compilando..."
    make -j$(nproc) zImage modules dtbs || _die "Falha na compilação"

    # Gera dt.img
    if command -v dtbTool >/dev/null 2>&1; then
        dtbTool -s 2048 -p scripts/dtc/ -o arch/arm/boot/dt.img arch/arm/boot/dts/
    fi
}

package() {
    cd "$builddir"
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" INSTALL_PATH="$pkgdir/boot" \
        ARCH=arm CROSS_COMPILE=armv7-alpine-linux-musleabihf- \
        install modules_install

    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-samsung-matisse3g"
    [ -f arch/arm/boot/dt.img ] && install -Dm644 arch/arm/boot/dt.img "$pkgdir/boot/dt.img"
}

sha512sums="
SKIP
3e8c37f9ec48f57454e7931064061b8f3b3af536f241b17c78f18415e4b72e5e9c2b2d653c50e72398440a592dbc9b50c107339433b076c069917ec2beeac925  config-samsung-matisse3g.armv7
"
