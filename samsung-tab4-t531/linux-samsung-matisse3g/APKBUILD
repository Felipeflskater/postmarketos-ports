# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=83
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Build minimalista"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex gmp-dev installkernel linux-headers mpc1-dev mpfr-dev perl python3 sed xz gcc-arm-none-eabi"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	35-minimal-targeted-fixes.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

prepare() {
    cd "$builddir"

    # Compilador
    for comp in armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc arm-none-eabi-gcc; do
        if command -v "$comp" >/dev/null 2>&1; then
            export CROSS_COMPILE="${comp%-gcc}-"
            break
        fi
    done
    [ -z "$CROSS_COMPILE" ] && { echo "ERRO: Compilador não encontrado"; exit 1; }

    # Ambiente básico - SEM modificações drásticas de headers
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS KCFLAGS AFLAGS KBUILD_AFLAGS KBUILD_CFLAGS EXTRA_CFLAGS KBUILD_CPPFLAGS KBUILD_LDFLAGS
    export ARCH=arm SUBARCH=arm HOSTCC=gcc
    export HOSTCFLAGS="-O1 -w -std=gnu89"
    export KBUILD_CFLAGS="-w -Wno-error -std=gnu89"
    export EXTRA_CFLAGS="-w -Wno-error"

    # Criar apenas diretórios básicos necessários
    mkdir -p include/generated include/config scripts/basic scripts/mod
    mkdir -p arch/arm/include/generated/asm

    # Headers mínimos apenas se não existirem
    if [ ! -f include/generated/utsrelease.h ]; then
        echo '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    fi

    if [ ! -f include/generated/autoconf.h ]; then
        cat > include/generated/autoconf.h << 'EOF'
/* Minimal autoconf */
#define CONFIG_ARM 1
#define CONFIG_CPU_V7 1
#define CONFIG_ARCH_MSM 1
#define CONFIG_ARCH_MSM8226 1
#define HZ 250
#define CLOCK_TICK_RATE 19200000
EOF
    fi

    # Aplicar apenas o patch essencial
    local patches_applied=0
    echo "=== APLICANDO PATCH MINIMALISTA ==="
    for p in $(echo "$source" | tr ' ' '\n' | grep '\.patch$'); do
        if [ -f "$srcdir/$p" ]; then
            if patch -p1 -i "$srcdir/$p" >/dev/null 2>&1; then
                echo "✓ $p"
                patches_applied=$((patches_applied + 1))
            else
                echo "✗ $p (falhou ou já aplicado)"
            fi
        fi
    done
    echo "Patches aplicados: $patches_applied"

    # Config
    if [ -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        cp "$srcdir/config-samsung-matisse3g.armv7" .config
        echo "✓ Config copiada"
    fi

    # Build preparatório mínimo
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" scripts_basic >/dev/null 2>&1 || true
    yes "" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" oldconfig >/dev/null 2>&1 || true

    echo "✓ Preparação minimalista concluída"
}

build() {
    cd "$builddir"

    echo "=== INICIANDO BUILD MINIMALISTA ==="

    # Build direto sem muitas verificações
    if ! timeout 3600 make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC=gcc HOSTCFLAGS="$HOSTCFLAGS" KBUILD_CFLAGS="$KBUILD_CFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         V=1 -j$(nproc) zImage 2>&1 | tee build.log; then

        echo ""
        echo "=== BUILD FALHOU ==="

        # Análise rápida dos erros
        if grep -q "unknown type name.*__u32\|__u16\|__u8" build.log; then
            echo "ERRO: Ainda há problemas com tipos básicos"
        fi

        if grep -q "storage class specified for parameter" build.log; then
            echo "ERRO: Conflitos de declaração de função/parâmetro"
        fi

        if grep -q "expected.*before" build.log; then
            echo "ERRO: Problemas de sintaxe/parsing"
        fi

        echo ""
        echo "=== ÚLTIMOS 20 ERROS ==="
        grep -E "(error|Error)" build.log | tail -20

        exit 1
    fi

    if [ -f arch/arm/boot/zImage ]; then
        local size=$(stat -c%s arch/arm/boot/zImage)
        echo "SUCCESS! zImage criado: $size bytes"
    else
        echo "ERRO: zImage não foi criado"
        exit 1
    fi

    # Build de módulos
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" modules >/dev/null 2>&1 || true
}

package() {
    cd "$builddir"

    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" modules_install 2>/dev/null || true

    if [ -d arch/arm/boot/dts ]; then
        mkdir -p "$pkgdir/boot/dtbs-$_flavor"
        find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null || true
    fi

    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz" || true
}

# Checksums atualizados
sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
4eff4dab705a03c3ce5082b00469b1d8728f6cda27a5e79786cc9bdb299f8421d016c74b0aa3e3da39e6849ac39d962b5a11aa7794ba18c5a376161447147c31  config-samsung-matisse3g.armv7
SKIP  35-minimal-targeted-fixes.patch
"
