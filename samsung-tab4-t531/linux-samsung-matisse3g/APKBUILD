# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=42
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Otimizado para PostmarketOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz gcc-arm-none-eabi
"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-timex-header.patch
	03-fix-defconfig.patch
	04-fix-jffs2-format-warnings.patch
	05-fix-fundamental-headers.patch
	06-add-missing-byteorder-headers.patch
	07-fix-compiler-headers.patch
	08-fix-asm-offsets-simple.patch
	09-fix-memory-and-const.patch
	10-add-gcc15-conservative-flags.patch
	11-fix-irq-timer-definitions-v2.patch
	12-fix-proc-v7-assembly.patch
	13-fix-bool-redefinitions.patch
	14-fix-fs-build-errors.patch
	15-ultimate-macro-redefinition-fix.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

_detect_cross_compiler() {
    local compilers="arm-none-eabi-gcc armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc"

    for compiler in $compilers; do
        if command -v "$compiler" >/dev/null 2>&1; then
            export CROSS_COMPILE="${compiler%-gcc}-"
            _log "Usando $compiler"
            return 0
        fi
    done

    _die "Nenhum compilador cruzado ARM encontrado!"
}

_setup_anti_macro_environment() {
    _log "Configurando ambiente anti-redefinição SEM wrapper..."

    # Limpar TODAS as variáveis que podem injetar macros
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS KCFLAGS AFLAGS KBUILD_AFLAGS
    unset KBUILD_CFLAGS EXTRA_CFLAGS KBUILD_CPPFLAGS KBUILD_LDFLAGS
    unset KBUILD_SUBDIR_CCFLAGS KBUILD_SUBDIR_ASFLAGS
    unset GCC_SPECS SPECS

    export ARCH=arm
    export SUBARCH=arm
    unset __LINUX_ARM_ARCH__

    # Host compiler simples
    export HOSTCC="gcc"
    export HOSTCXX="g++"
    export HOSTCFLAGS="-std=gnu89 -O1 -w -fno-builtin"
    export HOSTCXXFLAGS="-std=gnu89 -O1 -w -fno-builtin"
    export HOSTLDFLAGS=""

    # Versões fixas
    export KERNELRELEASE="3.4.113"
    export UTS_RELEASE="3.4.113"
    export LOCALVERSION=""

    # Modo verboso para debug
    export KBUILD_VERBOSE=1

    # NOVA ABORDAGEM: Flags diretas anti-redefinição
    export KBUILD_CFLAGS="-Utrue -Ufalse -Ubool -w"
    export KBUILD_AFLAGS="-Utrue -Ufalse -Ubool"
    export EXTRA_CFLAGS="-Utrue -Ufalse -Ubool -w"
    export KBUILD_CPPFLAGS="-Utrue -Ufalse -Ubool"

    _log "Ambiente anti-redefinição configurado (abordagem direta)"
}

_direct_makefile_patches() {
    _log "Aplicando patches diretos nos Makefiles..."

    # Patch 1: Makefile principal - adicionar undefinições em LINUXINCLUDE
    if [ -f "Makefile" ]; then
        _log "Patcheando Makefile principal..."

        # Backup do Makefile original
        cp Makefile Makefile.backup

        # Adicionar -Utrue -Ufalse -Ubool em LINUXINCLUDE
        sed -i 's|^LINUXINCLUDE.*include.*kconfig.h|& -Utrue -Ufalse -Ubool|' Makefile

        # Adicionar nas flags de kernel
        sed -i '/^KBUILD_CFLAGS.*fconserve-stack/s|$| -Utrue -Ufalse -Ubool|' Makefile

        _log "Makefile principal patcheado"
    fi

    # Patch 2: scripts/Makefile.build - flags de compilação
    if [ -f "scripts/Makefile.build" ]; then
        _log "Patcheando scripts/Makefile.build..."

        # Backup
        cp scripts/Makefile.build scripts/Makefile.build.backup

        # Adicionar undefinições em c_flags
        sed -i '/^c_flags.*kconfig.h/s|$| -Utrue -Ufalse -Ubool \\|' scripts/Makefile.build

        _log "scripts/Makefile.build patcheado"
    fi

    # Patch 3: scripts/Makefile.lib - flags adicionais
    if [ -f "scripts/Makefile.lib" ]; then
        _log "Patcheando scripts/Makefile.lib..."

        # Backup
        cp scripts/Makefile.lib scripts/Makefile.lib.backup

        # Adicionar nas flags originais
        sed -i '/^orig_c_flags.*CFLAGS_.*\.o/s|$| -Utrue -Ufalse -Ubool|' scripts/Makefile.lib

        _log "scripts/Makefile.lib patcheado"
    fi

    _log "Patches diretos nos Makefiles aplicados com sucesso"
}

_critical_manual_fixes() {
    _log "Aplicando correções críticas manuais..."

    # Fix 1: irqs.h (mantido da versão anterior)
    if [ -f "arch/arm/mach-msm/include/mach/irqs.h" ]; then
        _log "Analisando e corrigindo irqs.h..."

        local endif_count=$(grep -c "#endif" arch/arm/mach-msm/include/mach/irqs.h 2>/dev/null || echo "0")
        _log "Encontrados $endif_count #endif em irqs.h"

        if sed -n '136p' arch/arm/mach-msm/include/mach/irqs.h 2>/dev/null | grep -q "^#endif"; then
            _log "Removendo #endif duplicado da linha 136"
            sed -i '136d' arch/arm/mach-msm/include/mach/irqs.h
        fi

        if ! tail -1 arch/arm/mach-msm/include/mach/irqs.h | grep -q "#endif"; then
            echo "#endif" >> arch/arm/mach-msm/include/mach/irqs.h
            _log "#endif adicionado ao final"
        fi

        if ! grep -q "INT_GP_TIMER_EXP" arch/arm/mach-msm/include/mach/irqs.h; then
            _log "Adicionando definições de timer..."
            sed -i '$i /* Timer definitions for MSM8226 */' arch/arm/mach-msm/include/mach/irqs.h
            sed -i '$i #define INT_GP_TIMER_EXP (NR_MSM_IRQS + 1)' arch/arm/mach-msm/include/mach/irqs.h
            sed -i '$i #define INT_DEBUG_TIMER_EXP (NR_MSM_IRQS + 2)' arch/arm/mach-msm/include/mach/irqs.h
        fi
    fi

    # Fix 2: proc-v7.S (mantido)
    if [ -f "arch/arm/mm/proc-v7.S" ]; then
        _log "Corrigindo proc-v7.S..."
        if grep -n "PMD_SECT_AF #" arch/arm/mm/proc-v7.S >/dev/null 2>&1; then
            _log "Corrigindo sintaxe de assembly em proc-v7.S"
            sed -i 's/PMD_SECT_AF #|.*/PMD_SECT_AF | \\/' arch/arm/mm/proc-v7.S
        fi
    fi

    # Fix 3: Criar header de emergência ainda mais agressivo
    _log "Criando header de emergência super-agressivo..."

    cat > include/linux/emergency_macro_fix.h << 'EOF'
#ifndef _EMERGENCY_MACRO_FIX_H
#define _EMERGENCY_MACRO_FIX_H

/* SUPER EMERGÊNCIA: Neutralizar qualquer definição de bool/true/false */

/* Primeiro, forçar undefinição completa */
#ifdef true
#undef true
#endif
#ifdef false
#undef false
#endif
#ifdef bool
#undef bool
#endif

/* Segundo, redefinir com segurança apenas se necessário */
#ifndef __ASSEMBLY__
#ifndef __kernel_false
#define __kernel_false 0
#endif
#ifndef __kernel_true
#define __kernel_true 1
#endif

/* Usar typedef apenas se _Bool estiver disponível */
#ifdef _Bool
typedef _Bool __kernel_bool_t;
#endif

#endif /* !__ASSEMBLY__ */

#endif /* _EMERGENCY_MACRO_FIX_H */
EOF

    _log "Correções críticas aplicadas com sucesso"
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel Matisse3G com abordagem direta anti-redefinição..."

    _detect_cross_compiler
    _setup_anti_macro_environment

    # Aplicar patches com tolerância máxima
    _log "Aplicando patches em sequência..."
    local patch_count=0
    local patch_success=0

    for patch in $(echo "$source" | tr ' ' '\n' | grep '\.patch$' | sort); do
        if [ -f "$srcdir/$patch" ]; then
            patch_count=$((patch_count + 1))
            _log "Aplicando $patch..."

            if patch -p1 -i "$srcdir/$patch" >/dev/null 2>&1; then
                patch_success=$((patch_success + 1))
                _log "  -> $patch aplicado com sucesso"
            else
                _log "  -> $patch falhou (tentando --reject-format)"
                if patch -p1 --reject-format=unified -i "$srcdir/$patch" >/dev/null 2>&1; then
                    patch_success=$((patch_success + 1))
                    _log "  -> $patch aplicado com --reject-format"
                else
                    _log "  -> $patch falhou completamente (continuando)"
                fi
            fi
        fi
    done

    _log "Patches aplicados: $patch_success/$patch_count"

    # CRÍTICO: Aplicar correções diretas APÓS patches
    _critical_manual_fixes
    _direct_makefile_patches

    # Configuração
    if [ -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        _log "Aplicando configuração do dispositivo..."
        cp "$srcdir/config-samsung-matisse3g.armv7" .config

        # Adicionar configs essenciais
        {
            echo "CONFIG_CROSS_COMPILE=\"$CROSS_COMPILE\""
            echo "CONFIG_ARCH_MSM8226=y"
            echo "CONFIG_MSM_CORTEX_A7=y"
            echo "# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set"
        } >> .config
    fi

    # Estruturas necessárias
    mkdir -p include/generated include/config scripts/basic scripts/kconfig scripts/mod

    # Arquivos básicos
    echo '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    echo '#define LINUX_VERSION_CODE 200435' >> include/generated/utsrelease.h
    echo '/* Auto generated */' > include/generated/autoconf.h
    touch include/generated/bounds.h include/generated/asm-offsets.h
    touch include/config/auto.conf include/config/tristate.conf

    # Preparar build tools
    _log "Preparando ferramentas de build..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" \
         KBUILD_CFLAGS="$KBUILD_CFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         scripts_basic >/dev/null 2>&1 || _log "AVISO: scripts_basic falhou parcialmente"

    # Configuração não-interativa
    _log "Configurando kernel..."
    yes "" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" \
         KBUILD_CFLAGS="$KBUILD_CFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         oldconfig >/dev/null 2>&1 || _log "AVISO: oldconfig falhou parcialmente"

    _log "Preparação concluída"
}

build() {
    cd "$builddir"
    _log "Compilando kernel com abordagem direta anti-redefinição..."

    # Proteger arquivos críticos
    if [ -f include/generated/utsrelease.h ]; then
        chmod 444 include/generated/utsrelease.h
    fi

    _log "Iniciando compilação SEM wrapper (abordagem direta)..."

    # Compilação com flags diretas anti-redefinição
    if ! env -i \
         PATH="$PATH" \
         HOME="$HOME" \
         ARCH=arm \
         CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" \
         HOSTCFLAGS="$HOSTCFLAGS" \
         HOSTLDFLAGS="$HOSTLDFLAGS" \
         KERNELRELEASE="$KERNELRELEASE" \
         UTS_RELEASE="$UTS_RELEASE" \
         LOCALVERSION="$LOCALVERSION" \
         KBUILD_VERBOSE="$KBUILD_VERBOSE" \
         KBUILD_CFLAGS="$KBUILD_CFLAGS" \
         KBUILD_AFLAGS="$KBUILD_AFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         KBUILD_CPPFLAGS="$KBUILD_CPPFLAGS" \
         make -j$(nproc) zImage 2>&1 | tee build.log; then

        _log "Compilação falhou. Analisando erros..."

        echo "=== REDEFINIÇÕES DE MACROS ==="
        grep -i "redefined" build.log | head -10 || echo "Nenhuma redefinição encontrada"

        echo "=== PROBLEMAS COM 'true/false' ==="
        grep -i "true.*redefined\|false.*redefined" build.log | head -5 || echo "Nenhum problema com true/false"

        echo "=== ERROS DE ARQUIVO NÃO ENCONTRADO ==="
        grep -i "No such file" build.log | head -10 || echo "Nenhum erro de arquivo não encontrado"

        echo "=== ERROS CRÍTICOS ==="
        grep -i "error:" build.log | grep -v "warning" | head -10 || echo "Nenhum erro 'error:' encontrado"

        echo "=== ÚLTIMAS 20 LINHAS DO LOG ==="
        tail -20 build.log

        _die "Compilação falhou - análise completa acima"
    fi

    # Verificar se zImage foi criado
    if [ ! -f arch/arm/boot/zImage ]; then
        _die "zImage não foi criado apesar da compilação aparentemente bem-sucedida"
    fi

    local zimage_size=$(stat -c%s arch/arm/boot/zImage 2>/dev/null || echo "0")
    _log "zImage criado com sucesso! Tamanho: $zimage_size bytes"

    # Compilar módulos (não-crítico)
    _log "Compilando módulos..."
    env -i \
         PATH="$PATH" \
         HOME="$HOME" \
         ARCH=arm \
         CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" \
         HOSTCFLAGS="$HOSTCFLAGS" \
         KBUILD_CFLAGS="$KBUILD_CFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         make V=0 -j$(nproc) modules >/dev/null 2>&1 || _log "Módulos falharam (não-crítico)"

    _log "Compilação concluída com sucesso!"
}

package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    # Instalar kernel
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"

    # Instalar módulos (se existirem)
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" \
         ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         modules_install 2>/dev/null || _log "AVISO: Instalação de módulos falhou"

    # Instalar DTBs (se existirem)
    if [ -d arch/arm/boot/dts ]; then
        dtb_count=$(find arch/arm/boot/dts -name "*.dtb" 2>/dev/null | wc -l)
        if [ "$dtb_count" -gt 0 ]; then
            mkdir -p "$pkgdir/boot/dtbs-$_flavor"
            find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null
            _log "Instalados $dtb_count DTBs"
        fi
    fi

    # Criar symlink
    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz" || true

    _log "Empacotamento concluído com sucesso"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
4eff4dab705a03c3ce5082b00469b1d8728f6cda27a5e79786cc9bdb299f8421d016c74b0aa3e3da39e6849ac39d962b5a11aa7794ba18c5a376161447147c31  config-samsung-matisse3g.armv7
f3bbc54d1c3433310f701c0da130c165d8baab29d924ad90a7021c40818e767066c10b6c2467b97d92b43191a7d0e1bb389dc056463263c14347e9e4582ae0ca  01-fix-timex-header.patch
726321e16d16edad715abd4bc83e9f546902e11b5d2c5f5ab1b7076872ad0fceee85d2e512e8007a78c0a956b3454b239b9a844149a87094a342d91030972889  03-fix-defconfig.patch
7462871c23903b5b061117757adb82da2e80caeadf44f941686ca1bba8c67a337d5d1ffdf94350cdd964ecc7651adec6770cc0801e18e60872b72490e917fa02  04-fix-jffs2-format-warnings.patch
ce5dd92a66e208c873919aea7f571b72bd7811482b7f846d9bb62e22da5eb7671e941168fc413ee87e2e434d96799843f3a5690789c460651d7120d72dfaf3e3  05-fix-fundamental-headers.patch
9cdd95f4701f1f659fdeb9aa51529d71c5f0102f6422cfbc6ef1d37b5f6071515be816bf825c7d84ed4fa118c26dc1871aed5a7721e64fb73db8ed5803f65581  06-add-missing-byteorder-headers.patch
ea9fd7ed6e4ad9f51cf8f852cabe13fe6d725f77f04cb9aff584844156f6355ac55aafed6ae6cfc94cc032c15830057867a08ce1acf2e4985aed8bba4010b132  07-fix-compiler-headers.patch
c0567e7c8f8458663296a6bdddac021dd8417055f2f17fa96c13ce39cf6502fffa23897eecac9911fce515f4f7f716d0ff394334fe6a36036c67832c378e0f43  08-fix-asm-offsets-simple.patch
7486b8f2841205e9988719a7cff4508965bd6b5808c57ab0ac3f31cdcdf297234cd3b7ab703c142513bca699d024026577ebbe720e8c2187d821a68808e86cd5  09-fix-memory-and-const.patch
c100588d2c68d4ca7564cfc5dfabe55d0ffef60d6d4bf3561b551db851ce472951ef3521ea2cad5099c65137bc230a5f17aaff81f95486ab8a0ff602114e6a24  10-add-gcc15-conservative-flags.patch
7380d8e468c4183230871ebc38cc5ef853adb59683774e7a7ced7430ee12bf5091b003197aa5af4028ddfc731e1b921f27e5e2e357023bb0ac82918d73fc612a  11-fix-irq-timer-definitions-v2.patch
235a13b089f624f65cf3533c8480fad10bc76bb322a2cdae93ca68115e3eb52a58a97b3dd2ee89cceb79185451d3a8599562d6188c2d172479e2a43846c51bdf  12-fix-proc-v7-assembly.patch
6d881eb39c17e38b829c8568bcb98960ef570a709731c6b3327c5130c3181cdc555adbd6bb3915a8d6d377c9268e1cc790a78a3a10b682a20d05ea9425f27721  13-fix-bool-redefinitions.patch
bcaf48edc68de62aeae3c97c0419ae7e78ac3d65ced9d08cb1d397561bc546de9f632c1f398c7b04a4f8326ea01238f3204efdd1f96db860f32122a96c2736d1  14-fix-fs-build-errors.patch
b31c13237d0f45bc9649be5915d0d37a9d40d3063d53f49b874481cb517d1bb5038af5071470f43ce07b160dcc2df60a65344bc49f9131ccaddab0dc4d55cdce  15-ultimate-macro-redefinition-fix.patch
"
