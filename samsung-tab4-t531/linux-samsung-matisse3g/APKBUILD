# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=117
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531)"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex gmp-dev installkernel linux-headers mpc1-dev mpfr-dev perl python3 sed xz"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-timex-header.patch
	03-fix-defconfig.patch
	08-fix-asm-offsets-simple.patch
	10-add-gcc15-conservative-flags.patch
	11-fix-irq-timer-definitions-v2.patch
	12-fix-section-mismatch.patch
	13-disable-stack-protector.patch
	15-fix-assembler-double-include.patch
	40-create-compiler-gcc14-header.patch
	55-fix-proc-pid-init-ino.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

prepare() {
    cd "$builddir"

    # Setup básico
    for comp in armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc; do
        command -v "$comp" >/dev/null 2>&1 && export CROSS_COMPILE="${comp%-gcc}-" && break
    done

    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS KCFLAGS AFLAGS
    export ARCH=arm HOSTCC=gcc
    export HOSTCFLAGS="-O1 -w -std=gnu89"
    export KBUILD_CFLAGS="-w -std=gnu89 -marm -mno-thumb-interwork -Wno-error -fno-stack-protector"
    export KBUILD_AFLAGS="-D__ASSEMBLY__ -marm -mno-thumb-interwork -fno-stack-protector"
    export EXTRA_CFLAGS="-w -marm -mno-thumb-interwork -fno-stack-protector"

    mkdir -p include/generated include/config arch/arm/include/generated/asm
    echo '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    cat > include/generated/autoconf.h << 'EOF'
#define CONFIG_ARM 1
#define CONFIG_CPU_V7 1
#define CONFIG_MSM_PM 1
EOF
    touch include/generated/asm-offsets.h include/generated/bounds.h

    # Aplicar patches na ordem correta
    echo "Aplicando patches..."
    for p in 01-fix-timex-header.patch \
             03-fix-defconfig.patch \
             08-fix-asm-offsets-simple.patch \
             10-add-gcc15-conservative-flags.patch \
             11-fix-irq-timer-definitions-v2.patch \
             12-fix-section-mismatch.patch \
             13-disable-stack-protector.patch \
             15-fix-assembler-double-include.patch \
             40-create-compiler-gcc14-header.patch \
             55-fix-proc-pid-init-ino.patch; do
        if [ -f "$srcdir/$p" ]; then
            echo "  Aplicando $p..."
            patch -p1 -i "$srcdir/$p" || {
                echo "  ERRO ao aplicar $p"
                exit 1
            }
        fi
    done

    echo "Aplicando correções manuais..."

    # 0. Adicionar #endif no final do assembler.h
    echo "" >> arch/arm/include/asm/assembler.h
    echo "#endif /* __ASM_ASSEMBLER_H__ */" >> arch/arm/include/asm/assembler.h

    # 0b. Definir __LINUX_ARM_ARCH__ em todos os headers ARM necessários
    echo "Definindo __LINUX_ARM_ARCH__ em headers ARM..."
    for f in arch/arm/include/asm/spinlock.h \
             arch/arm/include/asm/div64.h \
             arch/arm/include/asm/atomic.h \
             arch/arm/include/asm/cmpxchg.h; do
        if [ -f "$f" ] && ! grep -q "^#define __LINUX_ARM_ARCH__" "$f"; then
            sed -i '1i#ifndef __LINUX_ARM_ARCH__\n#define __LINUX_ARM_ARCH__ 7\n#endif' "$f"
            echo "  ✓ $f"
        fi
    done

    # 1. BUILD_BUG_ON
    sed -i 's/BUILD_BUG_ON(!__builtin_constant_p(offset));/\/\*BUILD_BUG_ON\*\//' include/linux/rcupdate.h 2>/dev/null

    # 2. irqs.h
    sed -i '136{/^#endif$/d;}' arch/arm/mach-msm/include/mach/irqs.h 2>/dev/null

    # 3. Remover macros assembly - NÃO REMOVE string
    echo "Removendo macros assembly específicas..."
    find arch/arm/kernel arch/arm/lib -name "*.S" -type f 2>/dev/null | while read f; do
        sed -i \
            -e 's/\<ARM(\([^)]*\))/\1/g' \
            -e 's/\<THUMB(\([^)]*\))/\/\* \1 \*\//g' \
            -e 's/\<BSYM(\([^)]*\))/\1/g' \
            -e '/vector_/i\.arm' "$f"
    done

    # 4. proc-v7.S - Substituir macro string
    if [ -f arch/arm/mm/proc-v7.S ]; then
        echo "Corrigindo proc-v7.S..."
        # Substituir string cpu_v7_name
        sed -i '/string cpu_v7_name/c\	.ascii	"ARMv7 Processor"\n	.size	cpu_v7_name, . - cpu_v7_name' arch/arm/mm/proc-v7.S
        # Substituir string cpu_arch_name
        sed -i '/string cpu_arch_name/c\	.type	cpu_arch_name, #object\ncpu_arch_name:\n	.ascii	"armv7"\n	.size	cpu_arch_name, . - cpu_arch_name' arch/arm/mm/proc-v7.S
        # Substituir string cpu_elf_name
        sed -i '/string cpu_elf_name/c\	.type	cpu_elf_name, #object\ncpu_elf_name:\n	.ascii	"v7"\n	.size	cpu_elf_name, . - cpu_elf_name' arch/arm/mm/proc-v7.S
        echo "  ✓ proc-v7.S corrigido"
    fi

    # 5. entry-armv.S
    if [ -f arch/arm/kernel/entry-armv.S ]; then
        echo "Corrigindo entry-armv.S..."
        sed -i '1168s/.*/\t.long\t__sys_trace/' arch/arm/kernel/entry-armv.S
        sed -i '1192s/.*/\t.long\t__sys_trace_return/' arch/arm/kernel/entry-armv.S
        sed -i '1216s/.*/\t.long\t__pabt_usr/' arch/arm/kernel/entry-armv.S
        sed -i '1240s/.*/\t.long\t__dabt_usr/' arch/arm/kernel/entry-armv.S
    fi

    # 6. board-8226.c
    if [ -f arch/arm/mach-msm/board-8226.c ]; then
        echo "Corrigindo board-8226.c (stub)..."
        sed -i '/^static struct of_dev_auxdata msm_hsic_host_adata/,/^};/c\
static void *msm_hsic_host_adata = NULL;' arch/arm/mach-msm/board-8226.c

        sed -i '/^static struct of_dev_auxdata msm8226_auxdata_lookup/,/^};/c\
static void *msm8226_auxdata_lookup = NULL;' arch/arm/mach-msm/board-8226.c
    fi

    # 7. smd_init_plat.c
    cat > arch/arm/mach-msm/smd_init_plat.c << 'EOF'
#include <linux/module.h>
#include <linux/init.h>
int __init smd_core_init(void) { return 0; }
static int __init msm_smd_driver_init(void) { return smd_core_init(); }
module_init(msm_smd_driver_init);
MODULE_LICENSE("GPL v2");
EOF

    # 8. head.S
    for f in arch/arm/kernel/head.S arch/arm/kernel/head-common.S; do
        [ -f "$f" ] && sed -i '1i\.arm\n.syntax unified' "$f"
    done

    # 9. Makefiles
    cat >> arch/arm/vfp/Makefile << 'EOF'

CFLAGS_vfpmodule.o += -marm
CFLAGS_vfpsingle.o += -marm
CFLAGS_vfpdouble.o += -marm
EOF

    cat >> arch/arm/kernel/Makefile << 'EOF'

CFLAGS_ptrace.o += -marm
CFLAGS_process.o += -marm
EOF

    cat >> arch/arm/mm/Makefile << 'EOF'

CFLAGS_fault.o += -marm
CFLAGS_init.o += -marm
EOF

    # 10. module_param bool
    find . -name "*.c" -type f -exec sed -i \
        -e 's/module_param[[:space:]]*([[:space:]]*\([^,]*\)[[:space:]]*,[[:space:]]*bool[[:space:]]*,/module_param(\1, int,/g' \
        -e 's/module_param[[:space:]]*([[:space:]]*\([^,]*\)[[:space:]]*,[[:space:]]*_Bool[[:space:]]*,/module_param(\1, int,/g' \
        {} \; 2>/dev/null

    # 11. lpm_levels
    if [ -f arch/arm/mach-msm/include/mach/cpuidle.h ]; then
        cat > arch/arm/mach-msm/include/mach/cpuidle.h.new << 'CPUIDLE_EOF'
#ifndef __MACH_CPUIDLE_H
#define __MACH_CPUIDLE_H
#ifdef CONFIG_CPU_IDLE
struct msm_cpuidle_state {
	unsigned int cpu;
	int state_nr;
	char *name;
	char *desc;
};
int msm_cpuidle_init(void);
#endif
#ifdef CONFIG_MSM_PM
int msm_cpuidle_init(void);
s32 msm_cpuidle_get_deep_idle_latency(void);
#else
static inline int msm_cpuidle_init(void) { return -ENOSYS; }
static inline s32 msm_cpuidle_get_deep_idle_latency(void) { return 0; }
#endif
#endif
CPUIDLE_EOF
        mv arch/arm/mach-msm/include/mach/cpuidle.h.new \
           arch/arm/mach-msm/include/mach/cpuidle.h
    fi

    if [ -f arch/arm/mach-msm/lpm_levels.c ]; then
        sed -i '/^s32 msm_cpuidle_get_deep_idle_latency(void)$/i\
#ifdef CONFIG_MSM_PM' arch/arm/mach-msm/lpm_levels.c
        awk '
            /^s32 msm_cpuidle_get_deep_idle_latency\(void\)/ { in_func=1 }
            in_func && /^}$/ && !done {
                print
                print "#endif"
                done=1
                in_func=0
                next
            }
            { print }
        ' arch/arm/mach-msm/lpm_levels.c > lpm_levels.c.tmp
        mv lpm_levels.c.tmp arch/arm/mach-msm/lpm_levels.c
    fi

    # 12. msm_cpu_pm_check_mode
    if [ -f arch/arm/mach-msm/pm.h ]; then
        sed -i 's/^inline bool msm_cpu_pm_check_mode/static inline bool msm_cpu_pm_check_mode/g' arch/arm/mach-msm/pm.h
        sed -i 's/^bool msm_cpu_pm_check_mode/static inline bool msm_cpu_pm_check_mode/g' arch/arm/mach-msm/pm.h
    fi

    if [ -f arch/arm/mach-msm/include/mach/pm.h ]; then
        sed -i 's/^inline bool msm_cpu_pm_check_mode/static inline bool msm_cpu_pm_check_mode/g' arch/arm/mach-msm/include/mach/pm.h
        sed -i 's/^bool msm_cpu_pm_check_mode/static inline bool msm_cpu_pm_check_mode/g' arch/arm/mach-msm/include/mach/pm.h
    fi

    for f in arch/arm/mach-msm/*.c; do
        [ -f "$f" ] && sed -i '/^bool msm_cpu_pm_check_mode/,/^}/d; /^inline bool msm_cpu_pm_check_mode/,/^}/d; /^static inline bool msm_cpu_pm_check_mode/,/^}/d' "$f" 2>/dev/null
    done

    # 13. platsmp.c
    if [ -f arch/arm/mach-msm/platsmp.c ]; then
        sed -i '/\.cpu_kill[[:space:]]*=/d; /\.cpu_die[[:space:]]*=/d; /\.cpu_disable[[:space:]]*=/d' arch/arm/mach-msm/platsmp.c
    fi

    # 14. lib1funcs_stub.c
    cat > arch/arm/lib/lib1funcs_stub.c << 'STUBEOF'
#include <linux/module.h>
#include <linux/kernel.h>
long long __aeabi_ldivmod(long long n, long long d) { return n / d; }
EXPORT_SYMBOL(__aeabi_ldivmod);
unsigned long long __aeabi_uldivmod(unsigned long long n, unsigned long long d) { return n / d; }
EXPORT_SYMBOL(__aeabi_uldivmod);
void __bad_cmpxchg(volatile void *ptr, int size) { printk(KERN_ERR "Bad cmpxchg\n"); BUG(); }
EXPORT_SYMBOL(__bad_cmpxchg);
STUBEOF

    if ! grep -q "lib1funcs_stub.o" arch/arm/lib/Makefile; then
        sed -i '/ucmpdi2.o lib1funcs.o div64.o sha1.o/s/$/ \\\n\t\t   lib1funcs_stub.o/' arch/arm/lib/Makefile
    fi

    # 15. stubs.c
    cat > arch/arm/mach-msm/stubs.c << 'MSMSTUBEOF'
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/of.h>
#include <linux/of_fdt.h>
int __init of_scan_flat_dt(int (*it)(unsigned long node, const char *uname, int depth, void *data), void *data) { return 0; }
EXPORT_SYMBOL(of_scan_flat_dt);
int __init msm_scan_dt_map_imem(unsigned long node, const char *uname, int depth, void *data) { return 0; }
EXPORT_SYMBOL(msm_scan_dt_map_imem);
void __init board_dt_populate(struct of_dev_auxdata *adata) {}
EXPORT_SYMBOL(board_dt_populate);
void __init setup_sched_clock(u32 (*read)(void), int bits, unsigned long rate) {}
EXPORT_SYMBOL(setup_sched_clock);
void __init msm_dt_init_irq(void) {}
EXPORT_SYMBOL(msm_dt_init_irq);
int __init msm_smd_driver_register(void) { return 0; }
EXPORT_SYMBOL(msm_smd_driver_register);
int of_property_match_string(struct device_node *np, const char *propname, const char *string) { return -ENODEV; }
EXPORT_SYMBOL(of_property_match_string);
void regulator_showall_enabled(void) {}
EXPORT_SYMBOL(regulator_showall_enabled);
int poweroff_charging = 0;
EXPORT_SYMBOL(poweroff_charging);
int spmi_dfs_create_file(void *data, const char *name, void *parent) { return 0; }
EXPORT_SYMBOL(spmi_dfs_create_file);
void *rt6_lookup(void *net, void *daddr, void *saddr, int oif, int flags) { return NULL; }
EXPORT_SYMBOL(rt6_lookup);
struct in6_addr { union { __u8 u6_addr8[16]; } in6_u; };
struct in6_addr in6addr_any = { { { 0 } } };
EXPORT_SYMBOL(in6addr_any);
void sec_gaf_supply_rqinfo(void) {}
EXPORT_SYMBOL(sec_gaf_supply_rqinfo);
int MSM_GPIO_TO_INT(int gpio) { return gpio + 32; }
EXPORT_SYMBOL(MSM_GPIO_TO_INT);
MSMSTUBEOF

    if ! grep -q "stubs.o" arch/arm/mach-msm/Makefile; then
        sed -i '2i obj-y += stubs.o' arch/arm/mach-msm/Makefile
    fi

    # 16. GPU sysfs
    if [ -f drivers/gpu/gpu_sysfs/Kbuild ]; then
        sed -i 's/^\$(error \*\*\*\* Make sure target file is defined/#\$(error/' drivers/gpu/gpu_sysfs/Kbuild
    fi

    # Config
    cp "$srcdir/config-samsung-matisse3g.armv7" .config
    sed -i 's/# CONFIG_SMP is not set/CONFIG_SMP=y/' .config
    sed -i 's/CONFIG_NR_CPUS=1/CONFIG_NR_CPUS=4/' .config

    cat >> .config << 'EOF'
CONFIG_SMP=y
CONFIG_NR_CPUS=4
CONFIG_ARM_UNWIND=y
CONFIG_MSM_PM=y
CONFIG_DEBUG_SECTION_MISMATCH=n
CONFIG_NO_ERROR_ON_MISMATCH=y
CONFIG_HAVE_SMP=y
CONFIG_SMP_ON_UP=y
CONFIG_ARM_CPU_TOPOLOGY=y
CONFIG_SCHED_MC=y
EOF

    make scripts_basic >/dev/null 2>&1 || true
    yes "" | make oldconfig >/dev/null 2>&1 || true
}

build() {
    cd "$builddir"
    timeout 2400 make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
        HOSTCFLAGS="$HOSTCFLAGS" KBUILD_CFLAGS="$KBUILD_CFLAGS" \
        KBUILD_AFLAGS="$KBUILD_AFLAGS" EXTRA_CFLAGS="$EXTRA_CFLAGS" \
        CONFIG_NO_ERROR_ON_MISMATCH=y KCFLAGS="-fno-stack-protector" \
        -j$(nproc) zImage || exit 1
    [ -f arch/arm/boot/zImage ] || exit 1
    make modules 2>/dev/null || true
}

package() {
    cd "$builddir"
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"
    make DESTDIR="$pkgdir" modules_install 2>/dev/null || true
    [ -d arch/arm/boot/dts ] && {
        mkdir -p "$pkgdir/boot/dtbs-$_flavor"
        find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \;
    }
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
d8a95e9527bab186d5e0d40fcbef90c761bb2e8ca17a7441101c560ba2d3dab91b978a45220c6aa651fb502c7618f401bc2a783afe2bf1210a8e5ddd9e64f5a0  config-samsung-matisse3g.armv7
f3bbc54d1c3433310f701c0da130c165d8baab29d924ad90a7021c40818e767066c10b6c2467b97d92b43191a7d0e1bb389dc056463263c14347e9e4582ae0ca  01-fix-timex-header.patch
726321e16d16edad715abd4bc83e9f546902e11b5d2c5f5ab1b7076872ad0fceee85d2e512e8007a78c0a956b3454b239b9a844149a87094a342d91030972889  03-fix-defconfig.patch
c0567e7c8f8458663296a6bdddac021dd8417055f2f17fa96c13ce39cf6502fffa23897eecac9911fce515f4f7f716d0ff394334fe6a36036c67832c378e0f43  08-fix-asm-offsets-simple.patch
c100588d2c68d4ca7564cfc5dfabe55d0ffef60d6d4bf3561b551db851ce472951ef3521ea2cad5099c65137bc230a5f17aaff81f95486ab8a0ff602114e6a24  10-add-gcc15-conservative-flags.patch
7380d8e468c4183230871ebc38cc5ef853adb59683774e7a7ced7430ee12bf5091b003197aa5af4028ddfc731e1b921f27e5e2e357023bb0ac82918d73fc612a  11-fix-irq-timer-definitions-v2.patch
3df086eb955c08fa770b43a16008a4eee7753ff9f1a47780a5528f3fda96f1cfb8f705c6931c83cb2ac2b9b6d20737998f99d13ae4c8e88f958d762237c2dc47  12-fix-section-mismatch.patch
b738038c3aa96ddd210277626ccba22a1047d74b5a958f222f0983ba9771dab2210b2c39dc348398dce213d079e63c554379ddeacf071ad84d88a283c383c834  13-disable-stack-protector.patch
ea6fe4df1252cba0117cdaf75f37917b21de1fd878c4e6c14f7962852d4e68db42102ee34c55b16f5d9c22ecb44e0abd8203f2beb2d6fd41b7e8b00559407b8f  15-fix-assembler-double-include.patch
9609c8c3fb4829b595d00738a4f8ee1daa58cbf5ae3cc59eb7ecc89f04705e13bfbb2116ae4c8ca3e4ecff733c9a8bd982bca06a8e1dbad336be8e71108df65c  40-create-compiler-gcc14-header.patch
1e4a630a8d83663304568c1fe676a952212131e2d9b0b7f09c5008c25beea8b24b0d2d9e451707cfa66f1055d96b669f4f6d854fafada08d9e14ca08d4199f40  55-fix-proc-pid-init-ino.patch
"
