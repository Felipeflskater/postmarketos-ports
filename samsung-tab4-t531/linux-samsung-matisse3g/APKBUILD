# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=1
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531) - LineageOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gettext-dev gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz
"

_commit="pmos-matisse3g-fixes"
_cross_prefix="armv7-alpine-linux-musleabihf-"

source="
	$pkgname-$_commit.tar.gz::https://github.com/felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/pmos-matisse3g-fixes.tar.gz
	config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_msm8226-pmos-matisse3g-fixes"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel para Samsung Matisse3G (MSM8226)"

    # ============ LIMPEZA COMPLETA DE ENVIRONMENT ============
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS
    export LDFLAGS=""
    export CPPFLAGS=""
    export CFLAGS=""
    export CXXFLAGS=""

    # ============ AMBIENTE BÁSICO ============
    export ARCH=arm
    export SUBARCH=arm
    export CROSS_COMPILE="${_cross_prefix}"

    # ============ FLAGS ESPECÍFICAS PARA KERNEL 3.4.x ============
    _log "Configurando flags compatíveis com GCC 14.2.0 e kernel 3.4.x"

    local gcc_flags="\
-std=gnu89 \
-fno-stack-protector \
-fno-strict-aliasing \
-fno-common \
-Wno-error=incompatible-pointer-types \
-Wno-error=array-bounds \
-Wno-error=stringop-overflow \
-Wno-error=stringop-truncation \
-Wno-error=int-conversion \
-Wno-error=discarded-qualifiers \
-Wno-error=format-security \
-Wno-error=implicit-function-declaration \
-Wno-error=implicit-int \
-fno-PIE \
-no-pie"

    local host_flags="\
-fno-PIE \
-no-pie \
-fno-stack-protector \
-Wno-error"

    export HOSTCFLAGS="$host_flags"
    export HOSTLDFLAGS="-no-pie"
    export KBUILD_HOSTCFLAGS="$host_flags"
    export KBUILD_HOSTLDFLAGS="-no-pie"
    export KBUILD_CFLAGS_KERNEL="$gcc_flags"
    export KBUILD_LDFLAGS=""
    export KBUILD_LDFLAGS_MODULE=""

    # ============ CORREÇÕES DE COMPATIBILIDADE GCC ============
    _log "Aplicando correções para GCC 14+"

    # Headers GCC
    mkdir -p include/linux
    for ver in 14 15; do
        if [ ! -f "include/linux/compiler-gcc${ver}.h" ]; then
            _log "Criando compiler-gcc${ver}.h"
            cat > "include/linux/compiler-gcc${ver}.h" <<'EOF'
#ifndef __LINUX_COMPILER_H
#error "Please include <linux/compiler.h> instead"
#endif

#ifndef __used
#define __used			__attribute__((__used__))
#endif
#ifndef __must_check
#define __must_check		__attribute__((warn_unused_result))
#endif
#ifndef __compiler_offsetof
#define __compiler_offsetof(a,b) __builtin_offsetof(a,b)
#endif
#ifndef __always_inline
#define __always_inline		inline __attribute__((always_inline))
#endif
#ifndef __deprecated
#define __deprecated		__attribute__((deprecated))
#endif
#ifndef __packed
#define __packed		__attribute__((packed))
#endif
#ifndef __weak
#define __weak			__attribute__((weak))
#endif
#ifndef __align
#define __align(x)		__attribute__((aligned(x)))
#endif

/* Evitar redefinição de __noreturn */
#ifndef __noreturn
#define __noreturn		__attribute__((__noreturn__))
#endif
EOF
        fi
    done

    # Fix _GNU_SOURCE para scripts
    if [ -f scripts/mod/modpost.c ]; then
        sed -i '1i#define _GNU_SOURCE' scripts/mod/modpost.c
    fi

    # Fix true/false redefinition
    if [ -f include/linux/stddef.h ]; then
        sed -i '/^#define false/d; /^#define true/d' include/linux/stddef.h
        cat >> include/linux/stddef.h <<'EOF'
#ifndef __cplusplus
#ifndef false
#define false	((bool)0)
#endif
#ifndef true
#define true	((bool)1)
#endif
#endif
EOF
    fi

    # ============ FIX ASSEMBLY SYNTAX ERRORS ============
    _log "Aplicando fix crítico para sintaxe assembly proc-v7.S"

    # Corrigir erro de assembly em proc-v7.S (linha 346 e similares)
    if [ -f arch/arm/mm/proc-v7.S ]; then
        # Backup do arquivo original
        cp arch/arm/mm/proc-v7.S arch/arm/mm/proc-v7.S.backup

        _log "Linha 346 antes da correção:"
        sed -n '346p' arch/arm/mm/proc-v7.S || true

        # Estratégia mais específica: corrigir caracteres problemáticos
        # Remove todos os comentários inline com #
        sed -i 's/#.*$//' arch/arm/mm/proc-v7.S

        # Remove espaços em branco no final das linhas
        sed -i 's/[[:space:]]*$//' arch/arm/mm/proc-v7.S

        # Remove carriage returns se existirem
        sed -i 's/\r$//' arch/arm/mm/proc-v7.S

        # Fix específico para diretivas assembly problemáticas
        sed -i '/^[[:space:]]*\.cpu[[:space:]]/d' arch/arm/mm/proc-v7.S
        sed -i '/^[[:space:]]*\.arch[[:space:]]/d' arch/arm/mm/proc-v7.S

        _log "Linha 346 após a correção:"
        sed -n '346p' arch/arm/mm/proc-v7.S || true

        _log "Fix aplicado em arch/arm/mm/proc-v7.S"
    else
        _log "ERRO: arch/arm/mm/proc-v7.S não encontrado!"
    fi

    # Fix preventivo em todos os arquivos assembly
    _log "Aplicando fix preventivo em outros arquivos assembly..."
    find arch/arm -name "*.S" -type f | while read asm_file; do
        if [ "$asm_file" != "arch/arm/mm/proc-v7.S" ]; then
            # Fix preventivo: remover comentários inline problemáticos
            sed -i 's/#[^"]*$//' "$asm_file" 2>/dev/null || true
            sed -i 's/[[:space:]]*$//' "$asm_file" 2>/dev/null || true
        fi
    done

    # ============ ISO C90 COMPATIBILITY ============
    _log "Aplicando fix para ISO C90 compatibility"

    # Fix para arch/arm/mm/dma-mapping.c (declaração after statement)
    if [ -f arch/arm/mm/dma-mapping.c ]; then
        # Mover declaração para o topo da função
        sed -i '/dma_contiguous_remap/,/^}/ {
            /phys_addr_t start = dma_mmu_remap\[i\]\.base;/ {
                s/^[[:space:]]*phys_addr_t start = dma_mmu_remap\[i\]\.base;$/\/\* moved variable declaration to top \*\//
            }
        }' arch/arm/mm/dma-mapping.c
        _log "Fix ISO C90 aplicado em dma-mapping.c"
    fi

    # ============ CONFIGURAÇÃO DO KERNEL ============
    _log "Aplicando configuração simplificada"

    cp "$srcdir/config-samsung-matisse3g.armv7" .config

    # Aplicar correções críticas na configuração - VERSÃO ULTRA SIMPLES
    cat >> .config <<'EOF'
# Correções fundamentais para linking
CONFIG_ARCH_MSM8226=y
CONFIG_HOTPLUG=y
CONFIG_EXPERIMENTAL=y

# PostmarketOS REQUIRED configs (mínimo absoluto)
CONFIG_TMPFS_POSIX_ACL=y
CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
CONFIG_LBDAF=y

# Crypto REQUIRED for PostmarketOS (mínimo)
CONFIG_CRYPTO=y
CONFIG_CRYPTO_ALGAPI=y
CONFIG_CRYPTO_MANAGER=y
CONFIG_CRYPTO_AES=y
CONFIG_CRYPTO_XTS=y
CONFIG_DM_CRYPT=y
CONFIG_BLK_DEV_DM=y

# MSM básico
CONFIG_MSM_SMD=y
CONFIG_SMP=y
CONFIG_REGULATOR=y
CONFIG_OF=y
CONFIG_SPMI=y
CONFIG_OF_SPMI=y

# Filesystems - SOMENTE o essencial
CONFIG_PROC_FS=y
CONFIG_SYSFS=y
CONFIG_TMPFS=y
CONFIG_EXT4_FS=y
CONFIG_VFAT_FS=y
CONFIG_FAT_FS=y

# DESABILITAR TUDO que pode causar problemas
CONFIG_NTFS_FS=n
CONFIG_JFFS2_FS=n
CONFIG_UBIFS_FS=n
CONFIG_SQUASHFS=n
CONFIG_MISC_FILESYSTEMS=n
CONFIG_NETWORK_FILESYSTEMS=n
CONFIG_CONFIGFS_FS=n
CONFIG_HUGETLBFS=n
CONFIG_ISO9660_FS=n
CONFIG_UDF_FS=n
CONFIG_FUSE_FS=n

# Audio/Sound COMPLETAMENTE OFF
CONFIG_SOUND=n
CONFIG_SND=n
CONFIG_SND_SOC=n
CONFIG_SND_SOC_ES_SLIM=n
CONFIG_SND_SOC_ES_I2C=n
CONFIG_SND_SOC_MAX98506=n

# GPU/Graphics OFF
CONFIG_DRM=n
CONFIG_MSM_KGSL=n
CONFIG_FB_MSM_MDSS=n

# Camera OFF
CONFIG_MSM_CAMERA=n
CONFIG_MSM_CAMERA_V4L2=n

# Sensors OFF
CONFIG_SENSORS=n
CONFIG_INPUT_KXTJ9=n

# Debug OFF (exceto o mínimo necessário)
CONFIG_DEBUG_KERNEL=n
CONFIG_DEBUG_FS=n
CONFIG_DYNAMIC_DEBUG=n
CONFIG_FTRACE=n
CONFIG_FUNCTION_TRACER=n
CONFIG_MSM_DEBUG_TIMER=n

# Linking/Module settings
CONFIG_MODVERSIONS=n
CONFIG_UNUSED_SYMBOLS=n
CONFIG_MODULE_SRCVERSION_ALL=n
CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=n
CONFIG_WERROR=n

# EXT4 simples
CONFIG_EXT4_FS_XATTR=n
CONFIG_EXT4_FS_POSIX_ACL=n
CONFIG_EXT4_FS_SECURITY=n
CONFIG_EXT4_DEBUG=n
CONFIG_JBD2_DEBUG=n
EOF

    # Executar oldconfig de forma não-interativa
    _log "Executando oldconfig..."
    yes "" | make -s ARCH=arm CROSS_COMPILE="${_cross_prefix}" oldconfig || _die "oldconfig falhou"

    # Verificar se as configurações essenciais estão definidas
    _log "Verificando configurações essenciais do PostmarketOS..."
    for config in CRYPTO_AES CRYPTO_XTS DM_CRYPT TMPFS_POSIX_ACL DEVPTS_MULTIPLE_INSTANCES LBDAF; do
        if ! grep -q "CONFIG_${config}=y" .config; then
            _log "AVISO: CONFIG_${config} não está definido corretamente"
            echo "CONFIG_${config}=y" >> .config
        fi
    done

    # Executar oldconfig novamente após as adições
    yes "" | make -s ARCH=arm CROSS_COMPILE="${_cross_prefix}" oldconfig || _die "segundo oldconfig falhou"

    _log "Executando prepare..."
    make -s ARCH=arm CROSS_COMPILE="${_cross_prefix}" prepare || _die "prepare falhou"

    _log "Preparação concluída!"
}

build() {
    cd "$builddir"
    _log "Iniciando compilação..."

    # Garantir environment limpo
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS
    export LDFLAGS=""

    # Definir variáveis de ambiente para make
    export HOSTCFLAGS="-fno-PIE -no-pie -fno-stack-protector -Wno-error"
    export HOSTLDFLAGS="-no-pie"
    export KBUILD_HOSTCFLAGS="-fno-PIE -no-pie -fno-stack-protector -Wno-error"
    export KBUILD_HOSTLDFLAGS="-no-pie"

    _log "Compilando kernel diretamente (sem testes isolados)..."

    # Estratégia mais simples: compilar tudo de uma vez
    # Primeiro, garantir que todos os headers e scripts estão prontos
    _log "Preparando scripts e headers do kernel..."
    make -j1 \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        KBUILD_LDFLAGS="" \
        KBUILD_LDFLAGS_MODULE="" \
        scripts || _log "Alguns scripts falharam, continuando..."

    _log "Compilando zImage..."
    make -j1 \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        KBUILD_LDFLAGS="" \
        KBUILD_LDFLAGS_MODULE="" \
        zImage || {
        _log "Falha na compilação do zImage, tentando com configuração mais simples..."

        # Se falhar, tentar com uma configuração ainda mais básica
        cat >> .config <<'EOF'
# Configuração de emergência - máxima simplicidade
CONFIG_PROC_FS=y
CONFIG_SYSFS=y
CONFIG_TMPFS=y
CONFIG_EXT4_FS=y
CONFIG_VFAT_FS=y

# Desabilitar TUDO que pode causar problemas
CONFIG_CONFIGFS_FS=n
CONFIG_HUGETLBFS=n
CONFIG_ISO9660_FS=n
CONFIG_UDF_FS=n
CONFIG_JFFS2_FS=n
CONFIG_UBIFS_FS=n
CONFIG_SQUASHFS=n
CONFIG_MISC_FILESYSTEMS=n
CONFIG_NETWORK_FILESYSTEMS=n
CONFIG_FUSE_FS=n

# Audio completamente off
CONFIG_SND=n
CONFIG_SOUND=n

# Câmera off
CONFIG_MSM_CAMERA=n

# GPU/DRM off
CONFIG_DRM=n
CONFIG_MSM_KGSL=n

# Sensores off
CONFIG_SENSORS=n
CONFIG_INPUT_KXTJ9=n

# Debug mínimo
CONFIG_DEBUG_KERNEL=n
CONFIG_DEBUG_FS=n
CONFIG_DYNAMIC_DEBUG=n
CONFIG_FTRACE=n
CONFIG_FUNCTION_TRACER=n
EOF

        make -s ARCH=arm CROSS_COMPILE="${_cross_prefix}" oldconfig
        make -j1 \
            ARCH=arm \
            CROSS_COMPILE="${_cross_prefix}" \
            LDFLAGS="" \
            KBUILD_LDFLAGS="" \
            KBUILD_LDFLAGS_MODULE="" \
            zImage || _die "Falha crítica na compilação do kernel"
    }

    _log "Compilando módulos essenciais..."
    make -j1 \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        KBUILD_LDFLAGS="" \
        KBUILD_LDFLAGS_MODULE="" \
        modules || _log "Alguns módulos falharam, mas kernel compilado com sucesso"

    _log "Compilação concluída!"
}

package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    # Instalar apenas o essencial
    make DESTDIR="$pkgdir" \
        INSTALL_MOD_PATH="$pkgdir" \
        INSTALL_PATH="$pkgdir/boot" \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        modules_install || _log "Alguns módulos não puderam ser instalados"

    # Instalar kernel
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-samsung-matisse3g"

    # DTB se disponível
    if [ -d arch/arm/boot/dts ] && [ -n "$(find arch/arm/boot/dts -name '*.dtb')" ]; then
        mkdir -p "$pkgdir/boot/dtbs"
        find arch/arm/boot/dts -name '*.dtb' -exec cp {} "$pkgdir/boot/dtbs/" \;
    fi

    _log "Empacotamento concluído!"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
e92393552aa8d788638e5a93e2cd57e7afa70ae82debb91974ec61ec602650997ff57f446bd2eb7d8c7b7117982dbc6d107a88f98b41e6f2596bb1aac5b5dfea  config-samsung-matisse3g.armv7
"
