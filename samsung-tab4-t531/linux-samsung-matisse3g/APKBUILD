# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=12
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Otimizado para PostmarketOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz gcc-arm-none-eabi
"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-vfp-assembly-syntax.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

# ============ FUNÇÕES AUXILIARES ============
_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

_detect_cross_compiler() {
    local compilers="arm-none-eabi-gcc arm-linux-gnueabihf-gcc arm-linux-gnu-gcc"

    for compiler in $compilers; do
        if command -v "$compiler" >/dev/null 2>&1; then
            export CROSS_COMPILE="${compiler%-gcc}-"
            _log "✓ Usando $compiler"
            return 0
        fi
    done

    _die "Nenhum compilador cruzado ARM encontrado!"
}

_setup_build_environment() {
    # Limpar flags conflitantes COMPLETAMENTE
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS

    export ARCH=arm
    export SUBARCH=arm

    # FLAGS ANTI-PIE AGRESSIVAS para HOST
    export HOSTCC="gcc"
    export HOSTCXX="g++"
    local host_flags="-fno-PIE -fno-pic -no-pie -fno-stack-protector -O2 -static-libgcc"
    export HOSTCFLAGS="$host_flags -std=gnu89"
    export HOSTCXXFLAGS="$host_flags"
    export HOSTLDFLAGS="-no-pie -static"

    # Flags para o kernel ARM - mais conservadoras
    local base_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing -fno-common"
    local warning_flags="-Wno-error -Wno-array-bounds -Wno-stringop-overflow -Wno-format-overflow -Wno-builtin-macro-redefined"
    local compat_flags="-fgnu89-inline -fno-strict-overflow -fconserve-stack -fno-builtin"
    local asm_flags="-Wa,--fatal-warnings -Wa,--noexecstack"

    export KCFLAGS="$base_flags $warning_flags $compat_flags"
    export AFLAGS="$asm_flags"
    export KBUILD_AFLAGS="$asm_flags"
    export KBUILD_CFLAGS="$base_flags $warning_flags $compat_flags"
    export LDFLAGS=""

    _log "✓ Ambiente de compilação configurado com flags anti-PIE"
}

_fix_makefile_pie() {
    _log "Aplicando correção PIE inline no Makefile.host..."

    # Aplicar correção diretamente no arquivo
    if [ -f scripts/Makefile.host ]; then
        # Backup do original
        cp scripts/Makefile.host scripts/Makefile.host.orig

        # Adicionar flags anti-PIE
        sed -i '/^HOST_EXTRACXXFLAGS := \$(HOSTCXXFLAGS)/a\\n# Force disable PIE for all host programs - Alpine Linux compatibility\nHOST_EXTRACFLAGS += -fno-PIE -fno-pic -no-pie\nHOST_EXTRACXXFLAGS += -fno-PIE -fno-pic -no-pie' scripts/Makefile.host

        # Corrigir comandos de linkagem
        sed -i 's/cmd_host-csingle.*= \$(HOSTCC) \$(hostc_flags) -o \$@ \$</      cmd_host-csingle\t= $(HOSTCC) $(hostc_flags) -fno-PIE -no-pie -o $@ $</' scripts/Makefile.host
        sed -i 's/cmd_host-cmulti.*= \$(HOSTCC) \$(host_flags) -o \$@/      cmd_host-cmulti\t= $(HOSTCC) $(host_flags) -fno-PIE -no-pie -o $@/' scripts/Makefile.host

        _log "✓ Makefile.host corrigido para PIE"
    else
        _log "AVISO: scripts/Makefile.host não encontrado"
    fi
}

_fix_redefinitions() {
    _log "Corrigindo redefinições problemáticas..."

    # Caso específico para stdbool.h se existir
    if [ -f include/linux/stdbool.h ]; then
        cp include/linux/stdbool.h include/linux/stdbool.h.backup
        cat > include/linux/stdbool.h << 'EOF'
#ifndef _LINUX_STDBOOL_H
#define _LINUX_STDBOOL_H

#ifndef __cplusplus
#ifndef __KERNEL__
typedef _Bool bool;
#ifndef bool
#define bool _Bool
#endif
#ifndef true
#define true 1
#endif
#ifndef false
#define false 0
#endif
#endif /* __KERNEL__ */
#endif /* __cplusplus */

#endif /* _LINUX_STDBOOL_H */
EOF
        _log "✓ stdbool.h corrigido"
    fi

    _log "✓ Redefinições corrigidas"
}

_apply_manual_fixes() {
    _log "Aplicando correções manuais..."

    # Corrigir asm-offsets.c
    if [ -f arch/arm/kernel/asm-offsets.c ] && ! grep -q "#define __user" arch/arm/kernel/asm-offsets.c; then
        sed -i '1i#ifndef __user\n#define __user\n#endif\n' arch/arm/kernel/asm-offsets.c
        _log "✓ asm-offsets.c corrigido"
    fi

    # Criar kbuild.h se não existir ou não tiver DEFINE
    if [ ! -f include/linux/kbuild.h ] || ! grep -q "DEFINE" include/linux/kbuild.h; then
        mkdir -p include/linux
        cat > include/linux/kbuild.h << 'EOF'
#ifndef __LINUX_KBUILD_H
#define __LINUX_KBUILD_H

#define DEFINE(sym, val) \
        __asm__ __volatile__("\n->" #sym " %0 " #val : : "i" (val))

#define BLANK() \
        __asm__ __volatile__("\n->" : : )

#define OFFSET(sym, str, mem) \
        DEFINE(sym, offsetof(struct str, mem))

#define COMMENT(x) \
        __asm__ __volatile__("\n->#" x)

#endif
EOF
        _log "✓ kbuild.h criado"
    fi

    # Criar/melhorar compiler.h
    mkdir -p include/linux
    if [ ! -f include/linux/compiler.h ] || ! grep -q "__user" include/linux/compiler.h; then
        cat >> include/linux/compiler.h << 'EOF'

#ifndef __user
#define __user
#endif
#ifndef __kernel
#define __kernel
#endif
#ifndef __force
#define __force
#endif
#ifndef __iomem
#define __iomem
#endif
#ifndef __acquires
#define __acquires(x)
#endif
#ifndef __releases
#define __releases(x)
#endif
EOF
        _log "✓ compiler.h melhorado"
    fi

    # Adicionar definições thread_info se necessário
    if [ -f arch/arm/include/asm/thread_info.h ] && ! grep -q "TI_PREEMPT.*8" arch/arm/include/asm/thread_info.h; then
        cat >> arch/arm/include/asm/thread_info.h << 'EOF'

#ifndef TI_PREEMPT
#define TI_PREEMPT		8
#endif
#ifndef TI_ADDR_LIMIT
#define TI_ADDR_LIMIT		12
#endif
EOF
        _log "✓ thread_info.h melhorado"
    fi

    # Adicionar S_PC ao ptrace.h se necessário
    if [ -f arch/arm/include/asm/ptrace.h ] && ! grep -q "S_PC.*60" arch/arm/include/asm/ptrace.h; then
        sed -i '/PSR_c.*0x000000ff/a\\n#ifndef S_PC\n#define S_PC\t\t60\n#endif' arch/arm/include/asm/ptrace.h
        _log "✓ ptrace.h melhorado"
    fi

    # Adicionar definições VFP
    if [ -f arch/arm/include/asm/vfpmacros.h ] && ! grep -q "TI_VFPSTATE" arch/arm/include/asm/vfpmacros.h; then
        sed -i '/include.*asm\/vfp\.h/a\\n#ifndef TI_VFPSTATE\n#define TI_VFPSTATE\t\t(TI_USED_CP + 4*16)\n#endif\n#ifndef TI_CPU\n#define TI_CPU\t\t\t4\n#endif' arch/arm/include/asm/vfpmacros.h
        _log "✓ vfpmacros.h melhorado"
    fi

    # Criar stddef.h mais robusto
    mkdir -p include/uapi/linux
    if [ ! -f include/uapi/linux/stddef.h ]; then
        cat > include/uapi/linux/stddef.h << 'EOF'
#ifndef _UAPI_LINUX_STDDEF_H
#define _UAPI_LINUX_STDDEF_H

#ifdef __KERNEL__
#include <linux/compiler.h>
#endif

#ifndef __ASSEMBLY__

#ifdef __KERNEL__
#undef NULL
#if defined(__cplusplus)
#define NULL 0
#else
#define NULL ((void *)0)
#endif

#undef offsetof
#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
#endif /* __KERNEL__ */

#endif /* __ASSEMBLY__ */
#endif /* _UAPI_LINUX_STDDEF_H */
EOF
        _log "✓ uapi/stddef.h criado"
    fi

    # Corrigir include/linux/stddef.h se existir
    if [ -f include/linux/stddef.h ]; then
        # Backup do original
        cp include/linux/stddef.h include/linux/stddef.h.orig

        # Remover redefinições problemáticas
        sed -i '/^#define false /d' include/linux/stddef.h
        sed -i '/^#define true /d' include/linux/stddef.h

        # Adicionar proteções contra redefinição
        if ! grep -q "#ifndef false" include/linux/stddef.h; then
            sed -i '/#define __kernel_false/i #ifndef false' include/linux/stddef.h
            sed -i '/#define __kernel_false/a #endif' include/linux/stddef.h
        fi

        if ! grep -q "#ifndef true" include/linux/stddef.h; then
            sed -i '/#define __kernel_true/i #ifndef true' include/linux/stddef.h
            sed -i '/#define __kernel_true/a #endif' include/linux/stddef.h
        fi

        _log "✓ include/linux/stddef.h corrigido"
    fi

    _log "✓ Correções manuais aplicadas"
}

_apply_config_fixes() {
    _log "Aplicando correções de configuração..."

    # Adicionar configurações específicas
    cat >> .config << 'EOF'

# ============ CORREÇÕES MATISSE3G ============
CONFIG_MSM_SPM_REGULATOR=n
CONFIG_ARCH_MSM8610=n
CONFIG_MSM8610_DEVICE=n
CONFIG_ARCH_RANDOM=n
CONFIG_GENERIC_TIME_VSYSCALL=y
CONFIG_MATISSE_3G=y
CONFIG_ARCH_MSM8226=y
CONFIG_MSM_SMD=y

# ============ VFP OTIMIZADO ============
CONFIG_VFP=y
CONFIG_VFPv3=y
CONFIG_NEON=y
CONFIG_ARM_UNWIND=y

# ============ DESABILITAR PROBLEMÁTICOS ============
CONFIG_WERROR=n
CONFIG_MODVERSIONS=n
CONFIG_DEBUG_INFO=n
CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=n

# ============ PREEMPTION ============
CONFIG_PREEMPT_NONE=y
CONFIG_PREEMPT_VOLUNTARY=n
CONFIG_PREEMPT=n

# ============ COMPILADOR ============
CONFIG_CC_OPTIMIZE_FOR_SIZE=n
CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
EOF

    # Remover configurações conflitantes
    sed -i 's/CONFIG_MSM_SPM_REGULATOR=y/CONFIG_MSM_SPM_REGULATOR=n/' .config

    # Adicionar defines para evitar conflitos de redefinição
    echo 'KBUILD_CFLAGS += -D__KERNEL_STRICT_NAMES' >> .config
    echo 'KBUILD_CFLAGS += -Wno-builtin-macro-redefined' >> .config

    _log "✓ Configurações corrigidas"
}

_test_critical_build() {
    _log "Testando componentes críticos..."

    # Testar scripts host primeiro (onde está falhando)
    _log "Testando compilação de scripts host..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         scripts/basic/fixdep || _die "Falha na compilação dos scripts host"

    # Testar VFP especificamente
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" V=1 \
         HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         arch/arm/vfp/entry.o || _die "Falha na compilação do VFP"

    # Testar asm-offsets
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" V=1 \
         HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         arch/arm/kernel/asm-offsets.s || _die "Falha no asm-offsets"

    _log "✓ Componentes críticos OK"
}

# ============ PREPARE ============
prepare() {
    cd "$builddir"
    _log "Preparando kernel Matisse3G - BUILD SIMPLIFICADO"

    # Detectar compilador
    _detect_cross_compiler

    # Configurar ambiente ANTES de qualquer coisa
    _setup_build_environment

    # Aplicar patches
    default_prepare

    # Aplicar correção PIE inline
    _fix_makefile_pie

    # Aplicar correções manuais
    _apply_manual_fixes

    # Corrigir redefinições problemáticas
    _fix_redefinitions

    # Aplicar configuração
    if [ ! -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        _die "Arquivo de configuração não encontrado"
    fi

    cp "$srcdir/config-samsung-matisse3g.armv7" .config
    _apply_config_fixes

    # Configuração automatizada com flags explícitas
    _log "Executando configuração automatizada..."
    printf "n\ny\n" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
                           HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
                           KCFLAGS="$KCFLAGS" oldconfig || \
                      make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
                           HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
                           KCFLAGS="$KCFLAGS" olddefconfig || _die "Configuração falhou"

    # Preparar build com flags explícitas
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         prepare || _die "Preparação falhou"

    _log "✓ Preparação concluída"
}

# ============ BUILD ============
build() {
    cd "$builddir"
    _log "Iniciando compilação..."

    # Configurar ambiente
    _setup_build_environment

    # Testar componentes críticos primeiro
    _test_critical_build

    # Limpeza parcial
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" clean || true

    # Compilar zImage com todas as flags explícitas
    _log "Compilando zImage..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" LDFLAGS="$LDFLAGS" \
         -j$(nproc) zImage || _die "Falha na compilação do zImage"

    # Compilar módulos
    _log "Compilando módulos..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" LDFLAGS="$LDFLAGS" \
         -j$(nproc) modules || _log "AVISO: Alguns módulos falharam"

    # Compilar DTBs se existirem
    if find arch/arm/boot/dts -name "*.dts" 2>/dev/null | grep -q "msm8226\|matisse"; then
        _log "Compilando Device Tree Blobs..."
        make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
             HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
             KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
             dtbs || _log "AVISO: DTBs falharam"
    fi

    _log "✓ Compilação concluída"
}

# ============ PACKAGE ============
package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    # Instalar módulos
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" \
         ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         modules_install || _log "AVISO: Módulos falharam"

    # Instalar kernel
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"

    # Instalar DTBs
    if [ -d arch/arm/boot/dts ]; then
        dtb_count=$(find arch/arm/boot/dts -name "*.dtb" 2>/dev/null | wc -l)
        if [ "$dtb_count" -gt 0 ]; then
            _log "Instalando $dtb_count DTBs..."
            mkdir -p "$pkgdir/boot/dtbs-$_flavor"
            find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null || true
        fi
    fi

    # Link simbólico
    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz-samsung-matisse3g" || true

    # Informações da build
    cat > "$pkgdir/boot/kernel-info-$_flavor" << EOF
Kernel: $pkgver-$pkgrel
Data: $(date)
Fonte: $_commit
Compilador: $CROSS_COMPILE
Patches aplicados: VFP assembly fix, PIE inline fix, correções inline para headers e definições
EOF

    _log "✓ Empacotamento concluído"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
9bcc57e7a3de597dec583da93f5cab0200f48dc053eaeaeb499dab993f50c5a5af5639b14c3eaa04f72eb430df694a920613116e2b9008fab4da86ca92311606  config-samsung-matisse3g.armv7
56c15f47049ab547a6128a0e507ec1b198f14ab5881d88187212f0b05c40f860f8a9897e935e8f2229f2838c110ff9cefb2198e022e97ef25cbb095157547574  01-fix-vfp-assembly-syntax.patch
"
