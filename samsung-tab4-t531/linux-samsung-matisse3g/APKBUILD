# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=1
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531) - LineageOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gettext-dev gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz
"

_commit="pmos-matisse3g-fixes"
_cross_prefix="armv7-alpine-linux-musleabihf-"

source="
	$pkgname-$_commit.tar.gz::https://github.com/felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/pmos-matisse3g-fixes.tar.gz
	config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_msm8226-pmos-matisse3g-fixes"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel com correções stddef.h + __user"

    # ============ LIMPEZA COMPLETA ============
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS
    export LDFLAGS=""
    export CPPFLAGS=""
    export CFLAGS=""
    export CXXFLAGS=""

    # ============ AMBIENTE BÁSICO ============
    export ARCH=arm
    export SUBARCH=arm
    export CROSS_COMPILE="${_cross_prefix}"

    # ============ FLAGS OTIMIZADAS ============
    local gcc_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing -fno-common -Wno-error -fno-PIE -no-pie"
    local host_flags="-fno-PIE -no-pie -fno-stack-protector -Wno-error"

    export HOSTCFLAGS="$host_flags"
    export HOSTLDFLAGS="-no-pie"
    export KBUILD_HOSTCFLAGS="$host_flags"
    export KBUILD_HOSTLDFLAGS="-no-pie"
    export KBUILD_CFLAGS_KERNEL="$gcc_flags"
    export KBUILD_LDFLAGS=""

    # ============ CORREÇÃO 1: STDDEF.H (JÁ FUNCIONAL) ============
    _log "CORREÇÃO 1: stddef.h com enum simples"

    # Remover arquivos problemáticos anteriores
    rm -f include/linux/postmarketos-compat.h 2>/dev/null || true

    # Estrutura uapi
    mkdir -p include/uapi/linux include/uapi/asm

    # uapi/linux/stddef.h
    cat > include/uapi/linux/stddef.h << 'EOF'
#ifndef _UAPI_LINUX_STDDEF_H
#define _UAPI_LINUX_STDDEF_H

#ifndef __ASSEMBLY__
#ifndef NULL
#ifdef __cplusplus
#define NULL 0
#else
#define NULL ((void *)0)
#endif
#endif
#endif /* __ASSEMBLY__ */

#endif /* _UAPI_LINUX_STDDEF_H */
EOF

    # stddef.h com enum (sem typedef _Bool)
    cat > include/linux/stddef.h << 'EOF'
#ifndef _LINUX_STDDEF_H
#define _LINUX_STDDEF_H

#include <uapi/linux/stddef.h>

#ifndef __ASSEMBLY__

/* Enum simples para evitar problemas de typedef */
#undef false
#undef true
enum {
	false	= 0,
	true	= 1
};

#undef offsetof
#ifdef __compiler_offsetof
#define offsetof(TYPE, MEMBER)	__compiler_offsetof(TYPE, MEMBER)
#else
#define offsetof(TYPE, MEMBER)	((size_t) &((TYPE *)0)->MEMBER)
#endif

#endif /* __ASSEMBLY__ */
#endif /* _LINUX_STDDEF_H */
EOF

    # ============ CORREÇÃO 2: __USER NO CAPABILITY.H ============
    _log "CORREÇÃO 2: Resolvendo problema __user no capability.h"

    # Primeiro, garantir que compiler.h tenha as definições necessárias
    if [ -f include/linux/compiler.h ]; then
        cp include/linux/compiler.h include/linux/compiler.h.backup

        # Verificar se __user já está definido
        if ! grep -q "#define __user" include/linux/compiler.h; then
            _log "Adicionando definições Sparse ao compiler.h"
            cat >> include/linux/compiler.h << 'EOF'

/* Sparse annotations - definições essenciais para kernel 3.4.x */
#ifndef __user
# ifdef __CHECKER__
#  define __user		__attribute__((noderef, address_space(1)))
# else
#  define __user
# endif
#endif

#ifndef __kernel
# define __kernel
#endif

#ifndef __iomem
# ifdef __CHECKER__
#  define __iomem		__attribute__((noderef, address_space(2)))
# else
#  define __iomem
# endif
#endif

#ifndef __safe
# define __safe		__attribute__((safe))
#endif

#ifndef __force
# define __force	__attribute__((force))
#endif

#ifndef __nocast
# define __nocast	__attribute__((nocast))
#endif

#ifndef __acquires
# define __acquires(x)	__attribute__((context(x,0,1)))
#endif

#ifndef __releases
# define __releases(x)	__attribute__((context(x,1,0)))
#endif
EOF
        fi
    fi

    # Corrigir capability.h para incluir compiler.h
    if [ -f include/linux/capability.h ]; then
        cp include/linux/capability.h include/linux/capability.h.backup

        # Verificar se já inclui compiler.h
        if ! grep -q "#include.*compiler.h" include/linux/capability.h; then
            _log "Adicionando include compiler.h ao capability.h"
            # Adicionar após o include de types.h (que geralmente está no topo)
            sed -i '/^#include.*types\.h/a\#include <linux/compiler.h>' include/linux/capability.h
        fi
    fi

    # Corrigir outros headers que podem ter o mesmo problema
    for header in include/linux/security.h include/linux/sched.h include/linux/fs.h; do
        if [ -f "$header" ] && grep -q "__user" "$header"; then
            if ! grep -q "#include.*compiler.h" "$header"; then
                _log "Adicionando compiler.h a $header"
                cp "$header" "${header}.backup"
                sed -i '/^#include.*types\.h/a\#include <linux/compiler.h>' "$header"
            fi
        fi
    done

    # ============ OUTRAS CORREÇÕES JÁ TESTADAS ============
    _log "Aplicando outras correções..."

    # Limpar definições conflitantes de false/true
    find arch/arm/mach-msm/ include/linux/mfd/ sound/soc/codecs/ -name "*.h" -type f 2>/dev/null | while read header; do
        if [ -f "$header" ] && grep -q "#define false\|#define true" "$header" 2>/dev/null; then
            cp "$header" "${header}.backup"
            sed -i '/#define false/d' "$header"
            sed -i '/#define true/d' "$header"
        fi
    done

    # uapi/linux/types.h se necessário
    if [ ! -f include/uapi/linux/types.h ]; then
        cat > include/uapi/linux/types.h << 'EOF'
#ifndef _UAPI_LINUX_TYPES_H
#define _UAPI_LINUX_TYPES_H
#include <asm/types.h>
#ifndef __ASSEMBLY__
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;
#endif
#endif
EOF
    fi

    # Link asm/types.h
    if [ ! -f include/uapi/asm/types.h ] && [ -f arch/arm/include/asm/types.h ]; then
        ln -sf ../../../arch/arm/include/asm/types.h include/uapi/asm/types.h
    fi

    # Headers GCC modernos
    for ver in 14 15; do
        if [ ! -f "include/linux/compiler-gcc${ver}.h" ]; then
            cat > "include/linux/compiler-gcc${ver}.h" <<'EOF'
#ifndef __LINUX_COMPILER_H
#error "Please include <linux/compiler.h> instead"
#endif

#define __used			__attribute__((__used__))
#define __must_check		__attribute__((warn_unused_result))
#define __compiler_offsetof(a,b) __builtin_offsetof(a,b)
#define __always_inline		inline __attribute__((always_inline))
#define __deprecated		__attribute__((deprecated))
#define __packed		__attribute__((packed))
#define __weak			__attribute__((weak))

#pragma GCC diagnostic ignored "-Wendif-labels"
#pragma GCC diagnostic ignored "-Wformat-security"
EOF
        fi
    done

    # Limpar kernel/bounds.c de includes problemáticos
    if [ -f kernel/bounds.c ]; then
        cp kernel/bounds.c kernel/bounds.c.backup
        sed -i '/postmarketos-compat/d' kernel/bounds.c
    fi

    # Correções de assembly
    if [ -f arch/arm/include/asm/processor.h ]; then
        cp arch/arm/include/asm/processor.h arch/arm/include/asm/processor.h.backup
        sed -i '99s/#endif#define task_pt_regs/#endif\n#define task_pt_regs/' arch/arm/include/asm/processor.h
    fi

    if [ -f arch/arm/kernel/entry-armv.S ]; then
        cp arch/arm/kernel/entry-armv.S arch/arm/kernel/entry-armv.S.backup
        sed -i 's/#ifdef CONFIG_ARM_THUMB()/#ifdef CONFIG_ARM_THUMB/g' arch/arm/kernel/entry-armv.S
    fi

    if [ -f arch/arm/kernel/entry-header.S ]; then
        cp arch/arm/kernel/entry-header.S arch/arm/kernel/entry-header.S.backup
        sed -i '185s/#if ((sizeof(struct pt_regs) % 8) != 0)/#if 0 \/\* disabled \*\//' arch/arm/kernel/entry-header.S
    fi

    # ============ CONFIGURAÇÃO ============
    _log "Aplicando configuração..."
    cp "$srcdir/config-samsung-matisse3g.armv7" .config

    # Configurações específicas
    cat >> .config <<'EOF'
# Resolver warnings MSM8226
CONFIG_DEBUG_FS=n
CONFIG_OF=y
CONFIG_SPMI=y
CONFIG_OF_SPMI=y
CONFIG_REGULATOR=y
CONFIG_MSM_RPM_SMD=y

# Desabilitar problemáticos
CONFIG_SOUND=n
CONFIG_SND=n
CONFIG_MODVERSIONS=n
CONFIG_WERROR=n

# ARM/ABI
CONFIG_AEABI=y
CONFIG_OABI_COMPAT=n
CONFIG_ARM_UNWIND=n
CONFIG_ARM_THUMB=y
CONFIG_THUMB2_KERNEL=n
EOF

    _log "Executando oldconfig..."
    yes "" | make -s ARCH=arm CROSS_COMPILE="${_cross_prefix}" oldconfig || _die "oldconfig falhou"

    _log "Executando prepare..."
    make -s ARCH=arm CROSS_COMPILE="${_cross_prefix}" prepare || _die "prepare falhou"

    _log "✓ Preparação concluída com correções stddef.h + __user!"
}

build() {
    cd "$builddir"
    _log "Compilando kernel..."

    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS
    export LDFLAGS=""
    export HOSTCFLAGS="-fno-PIE -no-pie -fno-stack-protector -Wno-error"
    export HOSTLDFLAGS="-no-pie"

    _log "Compilando zImage..."
    make -j1 \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        zImage || _die "Falha na compilação do zImage"

    _log "Compilando módulos..."
    make -j1 \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        modules || _log "Alguns módulos falharam"

    _log "✓ Compilação concluída!"
}

package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    make DESTDIR="$pkgdir" \
        INSTALL_MOD_PATH="$pkgdir" \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        modules_install || true

    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-samsung-matisse3g"

    if [ -d arch/arm/boot/dts ] && [ -n "$(find arch/arm/boot/dts -name '*.dtb' 2>/dev/null)" ]; then
        mkdir -p "$pkgdir/boot/dtbs"
        find arch/arm/boot/dts -name '*.dtb' -exec cp {} "$pkgdir/boot/dtbs/" \; 2>/dev/null || true
    fi

    _log "✓ Empacotamento concluído!"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
644fa94f06ca1aef030f6f5d707948afacb12b213cae2fe8f78b933fddcf7aa906db468b7f6ba53f5ff88ad91956905ead1e3fe0294fd6c902a9bd0fc7180b93  config-samsung-matisse3g.armv7
"
