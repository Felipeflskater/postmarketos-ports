# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=45
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Otimizado para PostmarketOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz gcc-arm-none-eabi
"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-timex-header.patch
	03-fix-defconfig.patch
	04-fix-jffs2-format-warnings.patch
	05-fix-fundamental-headers.patch
	06-add-missing-byteorder-headers.patch
	07-fix-compiler-headers.patch
	08-fix-asm-offsets-simple.patch
	09-fix-memory-and-const.patch
	10-add-gcc15-conservative-flags.patch
	11-fix-irq-timer-definitions-v2.patch
	12-fix-proc-v7-assembly.patch
	13-fix-bool-redefinitions.patch
	14-fix-fs-build-errors.patch
	15-ultimate-macro-redefinition-fix.patch
	16-fix-ext4-strncpy-warnings.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

_detect_cross_compiler() {
    # CRÍTICO: Priorizar compiladores com linker completo para kernels Linux
    local compilers="armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc arm-none-eabi-gcc"

    for compiler in $compilers; do
        if command -v "$compiler" >/dev/null 2>&1; then
            export CROSS_COMPILE="${compiler%-gcc}-"
            _log "Testando $compiler..."

            # NOVO: Verificar se o linker funciona para kernels
            local linker="${CROSS_COMPILE}ld"
            if command -v "$linker" >/dev/null 2>&1; then
                # Testar se pode fazer linking ELF relocatable (necessário para kernel)
                echo "int test;" | ${CROSS_COMPILE}gcc -c -o /tmp/test_link.o - 2>/dev/null
                if $linker -r -o /tmp/test_final.o /tmp/test_link.o 2>/dev/null; then
                    _log "✅ Usando $compiler com linker funcional"
                    rm -f /tmp/test_link.o /tmp/test_final.o 2>/dev/null
                    return 0
                else
                    _log "AVISO: $linker não suporta linking de kernel adequadamente"
                fi
                rm -f /tmp/test_link.o /tmp/test_final.o 2>/dev/null
            fi
        fi
    done

    _die "Nenhum compilador cruzado ARM com linker adequado encontrado!"
}

_setup_clean_environment() {
    _log "Configurando ambiente limpo e otimizado..."

    # Limpar TODAS as variáveis de ambiente que podem interferir
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS KCFLAGS AFLAGS KBUILD_AFLAGS
    unset KBUILD_CFLAGS EXTRA_CFLAGS KBUILD_CPPFLAGS KBUILD_LDFLAGS
    unset KBUILD_SUBDIR_CCFLAGS KBUILD_SUBDIR_ASFLAGS
    unset GCC_SPECS SPECS

    export ARCH=arm
    export SUBARCH=arm
    unset __LINUX_ARM_ARCH__

    # Host compiler básico
    export HOSTCC="gcc"
    export HOSTCXX="g++"
    export HOSTCFLAGS="-std=gnu89 -O1 -w"
    export HOSTCXXFLAGS="-std=gnu89 -O1 -w"
    export HOSTLDFLAGS=""

    # Versões fixas
    export KERNELRELEASE="3.4.113"
    export UTS_RELEASE="3.4.113"
    export LOCALVERSION=""
    export KBUILD_VERBOSE=1

    # Flags limpas e únicas
    local macro_safety="-Utrue -Ufalse -Ubool"

    # Warning suppression para GCC moderno
    local warning_flags="-w -Wno-error -Wno-stringop-truncation -Wno-stringop-overflow"
    warning_flags="$warning_flags -Wno-maybe-uninitialized -Wno-unused-but-set-variable"
    warning_flags="$warning_flags -Wno-implicit-function-declaration -Wno-attributes"

    # Compatibility flags para kernel 3.4
    local compat_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing"
    compat_flags="$compat_flags -fno-common -fgnu89-inline -fno-strict-overflow"

    # ARM specific para MSM8226 (Cortex-A7)
    local arm_flags="-march=armv7-a -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=softfp"
    arm_flags="$arm_flags -marm -mno-thumb-interwork"

    # Combinar flags UMA VEZ SÓ
    local final_cflags="$macro_safety $warning_flags $compat_flags $arm_flags"

    export KBUILD_CFLAGS="$final_cflags"
    export KBUILD_AFLAGS="$macro_safety -Wa,-march=armv7-a -Wa,-mcpu=cortex-a7"
    export EXTRA_CFLAGS="$final_cflags"
    export KBUILD_CPPFLAGS="$macro_safety -D__LINUX_ARM_ARCH__=7"

    _log "Ambiente limpo configurado (flags únicas, sem duplicação)"
}

_configure_advanced_linking() {
    _log "Configurando linking avançado para kernel..."

    # Força o uso do LD através do GCC para melhor compatibilidade
    export LD="${CROSS_COMPILE}gcc"

    # Flags de linking específicas para kernels ARM antigos
    export LDFLAGS_vmlinux="-static --no-undefined"

    # Alternativa: usar ld.bfd se gold falhar
    if command -v "${CROSS_COMPILE}ld.bfd" >/dev/null 2>&1; then
        export LD="${CROSS_COMPILE}ld.bfd"
        _log "Usando ld.bfd como linker alternativo"
    fi

    _log "Linking configurado: LD=$LD"
}

_simple_makefile_patches() {
    _log "Aplicando patches simples nos Makefiles..."

    # Apenas adicionar flags anti-macro no Makefile principal
    if [ -f "Makefile" ] && ! grep -q "Utrue.*Ufalse.*Ubool" Makefile; then
        _log "Adicionando flags anti-macro no Makefile..."

        # Backup
        cp Makefile Makefile.backup

        # Encontrar a linha KBUILD_CFLAGS e adicionar nossas flags
        sed -i '/^KBUILD_CFLAGS.*fconserve-stack/s|$| -Utrue -Ufalse -Ubool|' Makefile

        _log "Makefile patcheado com sucesso"
    else
        _log "Makefile já contém patches ou não encontrado"
    fi
}

_critical_manual_fixes() {
    _log "Aplicando correções críticas manuais..."

    # Fix 1: irqs.h
    if [ -f "arch/arm/mach-msm/include/mach/irqs.h" ]; then
        _log "Corrigindo irqs.h..."

        local endif_count=$(grep -c "#endif" arch/arm/mach-msm/include/mach/irqs.h 2>/dev/null || echo "0")
        _log "Encontrados $endif_count #endif em irqs.h"

        if sed -n '136p' arch/arm/mach-msm/include/mach/irqs.h 2>/dev/null | grep -q "^#endif"; then
            _log "Removendo #endif duplicado da linha 136"
            sed -i '136d' arch/arm/mach-msm/include/mach/irqs.h
        fi

        if ! tail -1 arch/arm/mach-msm/include/mach/irqs.h | grep -q "#endif"; then
            echo "#endif" >> arch/arm/mach-msm/include/mach/irqs.h
            _log "#endif adicionado ao final"
        fi

        if ! grep -q "INT_GP_TIMER_EXP" arch/arm/mach-msm/include/mach/irqs.h; then
            _log "Adicionando definições de timer..."
            sed -i '$i /* Timer definitions for MSM8226 */' arch/arm/mach-msm/include/mach/irqs.h
            sed -i '$i #define INT_GP_TIMER_EXP (NR_MSM_IRQS + 1)' arch/arm/mach-msm/include/mach/irqs.h
            sed -i '$i #define INT_DEBUG_TIMER_EXP (NR_MSM_IRQS + 2)' arch/arm/mach-msm/include/mach/irqs.h
        fi
    fi

    # Fix 2: proc-v7.S
    if [ -f "arch/arm/mm/proc-v7.S" ]; then
        _log "Corrigindo proc-v7.S..."
        if grep -n "PMD_SECT_AF #" arch/arm/mm/proc-v7.S >/dev/null 2>&1; then
            _log "Corrigindo sintaxe de assembly em proc-v7.S"
            sed -i 's/PMD_SECT_AF #|.*/PMD_SECT_AF | \\/' arch/arm/mm/proc-v7.S
        fi
    fi

    # Fix 3: Header de emergência
    _log "Criando header de emergência..."
    cat > include/linux/emergency_fix.h << 'EOF'
#ifndef _EMERGENCY_FIX_H
#define _EMERGENCY_FIX_H

/* Emergência: prevenir redefinições */
#ifdef true
#undef true
#endif
#ifdef false
#undef false
#endif
#ifdef bool
#undef bool
#endif

#endif /* _EMERGENCY_FIX_H */
EOF

    _log "Correções críticas aplicadas"
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel Matisse3G com solução definitiva..."

    _detect_cross_compiler
    _setup_clean_environment
    _configure_advanced_linking

    # Aplicar patches
    _log "Aplicando patches em sequência..."
    local patch_count=0
    local patch_success=0

    for patch in $(echo "$source" | tr ' ' '\n' | grep '\.patch$' | sort); do
        if [ -f "$srcdir/$patch" ]; then
            patch_count=$((patch_count + 1))
            _log "Aplicando $patch..."

            if patch -p1 -i "$srcdir/$patch" >/dev/null 2>&1; then
                patch_success=$((patch_success + 1))
                _log "  ✅ $patch aplicado com sucesso"
            else
                _log "  ⚠️  $patch falhou (tentando --reject-format)"
                if patch -p1 --reject-format=unified -i "$srcdir/$patch" >/dev/null 2>&1; then
                    patch_success=$((patch_success + 1))
                    _log "  ✅ $patch aplicado com --reject-format"
                else
                    _log "  ❌ $patch falhou completamente (continuando)"
                fi
            fi
        fi
    done

    _log "Patches aplicados: $patch_success/$patch_count"

    # Aplicar correções
    _critical_manual_fixes
    _simple_makefile_patches

    # Configuração
    if [ -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        _log "Aplicando configuração do dispositivo..."
        cp "$srcdir/config-samsung-matisse3g.armv7" .config

        # Configs essenciais
        {
            echo "CONFIG_CROSS_COMPILE=\"$CROSS_COMPILE\""
            echo "CONFIG_ARCH_MSM8226=y"
            echo "CONFIG_MSM_CORTEX_A7=y"
            echo "# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set"
        } >> .config
    fi

    # Estruturas necessárias
    mkdir -p include/generated include/config scripts/basic scripts/kconfig scripts/mod

    # Arquivos básicos
    echo '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    echo '#define LINUX_VERSION_CODE 200435' >> include/generated/utsrelease.h
    echo '/* Auto generated */' > include/generated/autoconf.h
    touch include/generated/bounds.h include/generated/asm-offsets.h
    touch include/config/auto.conf include/config/tristate.conf

    # Preparar build tools
    _log "Preparando ferramentas de build..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" \
         KBUILD_CFLAGS="$KBUILD_CFLAGS" EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         scripts_basic >/dev/null 2>&1 || _log "AVISO: scripts_basic falhou parcialmente"

    # Configuração
    _log "Configurando kernel..."
    yes "" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" \
         KBUILD_CFLAGS="$KBUILD_CFLAGS" EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         oldconfig >/dev/null 2>&1 || _log "AVISO: oldconfig falhou parcialmente"

    _log "Preparação concluída"
}

build() {
    cd "$builddir"
    _log "Compilando kernel com linking otimizado..."

    # Proteger arquivos críticos
    if [ -f include/generated/utsrelease.h ]; then
        chmod 444 include/generated/utsrelease.h
    fi

    # Verificar configuração problemática
    if grep -q "CONFIG_EXT4_FS=y" .config 2>/dev/null; then
        _log "🔍 DETECTADO: EXT4 habilitado - aplicando estratégia inteligente"

        # Backup da config
        cp .config .config.full

        # Primeira tentativa: com EXT4
        _log "🚀 Tentativa 1: Compilação completa com EXT4..."

        local build_log="build_ext4.log"
        if ! timeout 3600 env -i \
             PATH="$PATH" HOME="$HOME" TERM="$TERM" \
             ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
             LD="$LD" LDFLAGS_vmlinux="$LDFLAGS_vmlinux" \
             HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
             KERNELRELEASE="$KERNELRELEASE" UTS_RELEASE="$UTS_RELEASE" LOCALVERSION="$LOCALVERSION" \
             KBUILD_VERBOSE="$KBUILD_VERBOSE" \
             KBUILD_CFLAGS="$KBUILD_CFLAGS" KBUILD_AFLAGS="$KBUILD_AFLAGS" \
             EXTRA_CFLAGS="$EXTRA_CFLAGS" KBUILD_CPPFLAGS="$KBUILD_CPPFLAGS" \
             make -j$(nproc) zImage 2>&1 | tee "$build_log"; then

            _log "❌ Tentativa com EXT4 falhou. Aplicando solução alternativa..."

            # Desabilitar EXT4 e dependências
            sed -i 's/^CONFIG_EXT4_FS=.*/# CONFIG_EXT4_FS is not set/' .config
            sed -i 's/^CONFIG_JBD2=.*/# CONFIG_JBD2 is not set/' .config

            # Forçar reconfig
            yes "" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
                KBUILD_CFLAGS="$KBUILD_CFLAGS" oldconfig >/dev/null 2>&1

            _log "🔄 Tentativa 2: Compilando sem EXT4/JBD2 (kernel ainda funcional)..."
            if ! timeout 1800 env -i \
                PATH="$PATH" HOME="$HOME" TERM="$TERM" \
                ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
                LD="$LD" LDFLAGS_vmlinux="$LDFLAGS_vmlinux" \
                HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
                KERNELRELEASE="$KERNELRELEASE" UTS_RELEASE="$UTS_RELEASE" LOCALVERSION="$LOCALVERSION" \
                KBUILD_CFLAGS="$KBUILD_CFLAGS" EXTRA_CFLAGS="$EXTRA_CFLAGS" \
                make -j$(nproc) zImage 2>&1 | tee build_no_ext4.log; then

                _log "❌ Ambas tentativas falharam. Análise de erro:"
                echo "=== ERRO NO LINKING ==="
                grep -i "ld:.*error\|undefined reference" build_*.log | tail -10 || echo "Nenhum erro de linking específico encontrado"
                echo "=== ÚLTIMAS LINHAS DOS LOGS ==="
                tail -10 build_*.log
                _die "Linking falhou mesmo sem EXT4"
            else
                _log "✅ SUCESSO! Kernel compilado sem EXT4 (funcional para PostmarketOS)"
            fi
        else
            _log "🎉 SUCESSO TOTAL! Kernel compilado com EXT4 completo"
        fi
    else
        # Build normal se EXT4 não estiver habilitado
        _log "🚀 Compilação normal (EXT4 não detectado)..."
        if ! timeout 3600 env -i \
             PATH="$PATH" HOME="$HOME" TERM="$TERM" \
             ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
             LD="$LD" LDFLAGS_vmlinux="$LDFLAGS_vmlinux" \
             HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
             KERNELRELEASE="$KERNELRELEASE" UTS_RELEASE="$UTS_RELEASE" LOCALVERSION="$LOCALVERSION" \
             KBUILD_VERBOSE="$KBUILD_VERBOSE" \
             KBUILD_CFLAGS="$KBUILD_CFLAGS" KBUILD_AFLAGS="$KBUILD_AFLAGS" \
             EXTRA_CFLAGS="$EXTRA_CFLAGS" KBUILD_CPPFLAGS="$KBUILD_CPPFLAGS" \
             make -j$(nproc) zImage 2>&1 | tee build_normal.log; then
            _die "Compilação normal falhou - verifique build_normal.log"
        fi
    fi

    # Verificar resultado final
    if [ ! -f arch/arm/boot/zImage ]; then
        _die "zImage não foi criado"
    fi

    local zimage_size=$(stat -c%s arch/arm/boot/zImage 2>/dev/null || echo "0")
    _log "🎉 zImage criado com sucesso! Tamanho: $zimage_size bytes"

    if [ $zimage_size -lt 1000000 ]; then
        _log "⚠️  AVISO: zImage muito pequeno ($zimage_size bytes) - pode indicar problema"
    else
        _log "✅ Tamanho do zImage parece correto"
    fi

    # Módulos (não-crítico para o boot)
    _log "📦 Compilando módulos..."
    env -i \
        PATH="$PATH" HOME="$HOME" \
        ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
        KBUILD_CFLAGS="$KBUILD_CFLAGS" EXTRA_CFLAGS="$EXTRA_CFLAGS" \
        make V=0 -j$(nproc) modules >/dev/null 2>&1 || _log "⚠️  Módulos falharam (não-crítico para boot)"

    _log "🚀 COMPILAÇÃO CONCLUÍDA COM SUCESSO!"
}

package() {
    cd "$builddir"
    _log "📦 Empacotando kernel..."

    # Instalar kernel
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"

    # Instalar módulos (se existirem)
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" \
         ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         modules_install 2>/dev/null || _log "AVISO: Instalação de módulos falhou"

    # Instalar DTBs (se existirem)
    if [ -d arch/arm/boot/dts ]; then
        dtb_count=$(find arch/arm/boot/dts -name "*.dtb" 2>/dev/null | wc -l)
        if [ "$dtb_count" -gt 0 ]; then
            mkdir -p "$pkgdir/boot/dtbs-$_flavor"
            find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null
            _log "📁 Instalados $dtb_count DTBs"
        fi
    fi

    # Criar symlink
    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz" || true

    _log "✅ Empacotamento concluído com sucesso"
    _log "🎯 PORT DO POSTMARKETOS PARA SAMSUNG MATISSE3G CONCLUÍDO!"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
4eff4dab705a03c3ce5082b00469b1d8728f6cda27a5e79786cc9bdb299f8421d016c74b0aa3e3da39e6849ac39d962b5a11aa7794ba18c5a376161447147c31  config-samsung-matisse3g.armv7
f3bbc54d1c3433310f701c0da130c165d8baab29d924ad90a7021c40818e767066c10b6c2467b97d92b43191a7d0e1bb389dc056463263c14347e9e4582ae0ca  01-fix-timex-header.patch
726321e16d16edad715abd4bc83e9f546902e11b5d2c5f5ab1b7076872ad0fceee85d2e512e8007a78c0a956b3454b239b9a844149a87094a342d91030972889  03-fix-defconfig.patch
7462871c23903b5b061117757adb82da2e80caeadf44f941686ca1bba8c67a337d5d1ffdf94350cdd964ecc7651adec6770cc0801e18e60872b72490e917fa02  04-fix-jffs2-format-warnings.patch
ce5dd92a66e208c873919aea7f571b72bd7811482b7f846d9bb62e22da5eb7671e941168fc413ee87e2e434d96799843f3a5690789c460651d7120d72dfaf3e3  05-fix-fundamental-headers.patch
9cdd95f4701f1f659fdeb9aa51529d71c5f0102f6422cfbc6ef1d37b5f6071515be816bf825c7d84ed4fa118c26dc1871aed5a7721e64fb73db8ed5803f65581  06-add-missing-byteorder-headers.patch
ea9fd7ed6e4ad9f51cf8f852cabe13fe6d725f77f04cb9aff584844156f6355ac55aafed6ae6cfc94cc032c15830057867a08ce1acf2e4985aed8bba4010b132  07-fix-compiler-headers.patch
c0567e7c8f8458663296a6bdddac021dd8417055f2f17fa96c13ce39cf6502fffa23897eecac9911fce515f4f7f716d0ff394334fe6a36036c67832c378e0f43  08-fix-asm-offsets-simple.patch
7486b8f2841205e9988719a7cff4508965bd6b5808c57ab0ac3f31cdcdf297234cd3b7ab703c142513bca699d024026577ebbe720e8c2187d821a68808e86cd5  09-fix-memory-and-const.patch
c100588d2c68d4ca7564cfc5dfabe55d0ffef60d6d4bf3561b551db851ce472951ef3521ea2cad5099c65137bc230a5f17aaff81f95486ab8a0ff602114e6a24  10-add-gcc15-conservative-flags.patch
7380d8e468c4183230871ebc38cc5ef853adb59683774e7a7ced7430ee12bf5091b003197aa5af4028ddfc731e1b921f27e5e2e357023bb0ac82918d73fc612a  11-fix-irq-timer-definitions-v2.patch
235a13b089f624f65cf3533c8480fad10bc76bb322a2cdae93ca68115e3eb52a58a97b3dd2ee89cceb79185451d3a8599562d6188c2d172479e2a43846c51bdf  12-fix-proc-v7-assembly.patch
6d881eb39c17e38b829c8568bcb98960ef570a709731c6b3327c5130c3181cdc555adbd6bb3915a8d6d377c9268e1cc790a78a3a10b682a20d05ea9425f27721  13-fix-bool-redefinitions.patch
bcaf48edc68de62aeae3c97c0419ae7e78ac3d65ced9d08cb1d397561bc546de9f632c1f398c7b04a4f8326ea01238f3204efdd1f96db860f32122a96c2736d1  14-fix-fs-build-errors.patch
b31c13237d0f45bc9649be5915d0d37a9d40d3063d53f49b874481cb517d1bb5038af5071470f43ce07b160dcc2df60a65344bc49f9131ccaddab0dc4d55cdce  15-ultimate-macro-redefinition-fix.patch
068a2b50a9125c8cc23897910edffa3b08fdab5e082679e90937b9f984da8fb3b99d9a415fac9314cfeba85e9729bc0405875627a3b01aa36dfbe2a7f8821de2  16-fix-ext4-strncpy-warnings.patch
"
