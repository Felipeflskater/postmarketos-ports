# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=0
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531) - LineageOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gettext-dev gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz
"

_commit="pmos-matisse3g-fixes"
_cross_prefix="armv7-alpine-linux-musleabihf-"

source="
	$pkgname-$_commit.tar.gz::https://github.com/felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/pmos-matisse3g-fixes.tar.gz
	config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_msm8226-pmos-matisse3g-fixes"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel para Samsung Matisse3G (MSM8226)"

    # ============ LIMPEZA DE FLAGS PROBLEMÁTICAS ============
    _log "Limpando flags incompatíveis..."

    # Limpa completamente as LDFLAGS do sistema Alpine
    unset LDFLAGS
    unset CPPFLAGS
    export LDFLAGS=""
    export CPPFLAGS=""

    # ============ AMBIENTE ============
    export ARCH=arm
    export SUBARCH=arm
    export CROSS_COMPILE="${_cross_prefix}"

    # ============ COMPATIBILIDADE GCC 14.2.0 ============
    _log "Configurando compatibilidade com GCC 14.2.0"

    # Flags GCC para kernel 3.4.x - COM desabilitação completa de PIE
    local gcc_flags="\
-std=gnu89 \
-fno-stack-protector \
-Wno-error=incompatible-pointer-types \
-Wno-error=array-bounds \
-Wno-error=stringop-overflow \
-Wno-error=int-conversion \
-Wno-error=discarded-qualifiers \
-Wno-error=format-security \
-fno-PIE \
-no-pie"

    # Flags específicas para HOST (scripts do kernel)
    local host_flags="\
-fno-PIE \
-no-pie \
-fno-stack-protector \
-Wno-error"

    # Configuração completa de ambiente
    export HOSTCFLAGS="$host_flags"
    export HOSTLDFLAGS="-no-pie"
    export KBUILD_HOSTCFLAGS="$host_flags"
    export KBUILD_HOSTLDFLAGS="-no-pie"
    export KBUILD_CFLAGS_KERNEL="$gcc_flags"

    # Força o uso de ld tradicional, não gold
    export KBUILD_LDFLAGS=""
    export KBUILD_LDFLAGS_MODULE=""

    # Headers GCC para GCC 14/15
    mkdir -p include/linux
    local gcc_version=$(gcc -dumpversion | cut -d. -f1)
    _log "GCC detectado: $gcc_version"

    for ver in 14 15; do
        if [ ! -f "include/linux/compiler-gcc${ver}.h" ]; then
            _log "Criando compiler-gcc${ver}.h"
            local found=false
            for src in 13 12 11 10 9 8 7 6 5 4; do
                if [ -f "include/linux/compiler-gcc${src}.h" ]; then
                    cp "include/linux/compiler-gcc${src}.h" "include/linux/compiler-gcc${ver}.h"
                    found=true
                    break
                fi
            done
            if [ "$found" = "false" ]; then
                cat > "include/linux/compiler-gcc${ver}.h" <<'EOF'
#ifndef __LINUX_COMPILER_H
#error "Please include <linux/compiler.h> instead"
#endif
#define __used			__attribute__((__used__))
#define __must_check		__attribute__((warn_unused_result))
#define __compiler_offsetof(a,b) __builtin_offsetof(a,b)
#define __always_inline		inline __attribute__((always_inline))
#define __noreturn		__attribute__((__noreturn__))
#define __deprecated		__attribute__((deprecated))
#define __packed		__attribute__((packed))
#define __weak			__attribute__((weak))
#define __align(x)		__attribute__((aligned(x)))
EOF
            fi
        fi
    done

    # Fix para scripts/mod/modpost.c (GCC 14 precisa de _GNU_SOURCE)
    if [ -f scripts/mod/modpost.c ]; then
        sed -i '1i#define _GNU_SOURCE' scripts/mod/modpost.c
        _log "Fix _GNU_SOURCE aplicado em scripts/mod/modpost.c"
    fi

    # Fix adicional para true/false redefinition warnings
    _log "Aplicando fix para redefinição de true/false"
    if [ -f include/linux/stddef.h ]; then
        sed -i '/^#define false/d; /^#define true/d' include/linux/stddef.h
        cat >> include/linux/stddef.h <<'EOF'
#ifndef __cplusplus
#ifndef false
#define false	((bool)0)
#endif
#ifndef true
#define true	((bool)1)
#endif
#endif
EOF
    fi

    # Fix para INT_DEBUG_TIMER_EXP não definido
    _log "Aplicando fix para INT_DEBUG_TIMER_EXP"
    if [ -f arch/arm/mach-msm/timer.c ]; then
        # Primeiro, verifica se já existe a definição
        if ! grep -q "INT_DEBUG_TIMER_EXP" arch/arm/mach-msm/include/mach/irqs.h 2>/dev/null; then
            # Adiciona a definição no arquivo de IRQs apropriado
            if [ -f arch/arm/mach-msm/include/mach/irqs-8960.h ]; then
                echo "#define INT_DEBUG_TIMER_EXP	(GIC_SPI_START + 1)" >> arch/arm/mach-msm/include/mach/irqs-8960.h
                _log "INT_DEBUG_TIMER_EXP definido em irqs-8960.h"
            elif [ -f arch/arm/mach-msm/include/mach/irqs.h ]; then
                echo "#define INT_DEBUG_TIMER_EXP	(GIC_SPI_START + 1)" >> arch/arm/mach-msm/include/mach/irqs.h
                _log "INT_DEBUG_TIMER_EXP definido em irqs.h"
            else
                # Cria definição diretamente no timer.c
                sed -i '1i#define INT_DEBUG_TIMER_EXP (GIC_SPI_START + 1)' arch/arm/mach-msm/timer.c
                _log "INT_DEBUG_TIMER_EXP definido diretamente no timer.c"
            fi
        fi

        # Alternativa: comentar a linha problemática se ainda falhar
        sed -i 's/.*INT_DEBUG_TIMER_EXP.*/\t\/\* INT_DEBUG_TIMER_EXP disabled - compatibility fix \*\//' arch/arm/mach-msm/timer.c
        _log "Linha INT_DEBUG_TIMER_EXP comentada como fallback"
    fi

    # ============ CONFIGURAÇÃO DO KERNEL ============
    _log "Aplicando configuração do kernel"

    # Copia o config base
    cp "$srcdir/config-samsung-matisse3g.armv7" .config || _die "Falha ao copiar .config"

    # Aplica correções críticas ANTES da preparação
    cat >> .config <<'EOF'
# Correções pós-cópia para compatibilidade
CONFIG_ARCH_MSM8226=y
CONFIG_MSM_SMD=y
CONFIG_HOTPLUG=y
CONFIG_EXPERIMENTAL=y
CONFIG_SPMI=y
CONFIG_OF_SPMI=y

# Desabilita símbolos problemáticos
CONFIG_CPU_32v6K=n
CONFIG_CPU_CACHE_VIPT=n
CONFIG_ARM_THUMBEE=n
CONFIG_UNUSED_SYMBOLS=n
CONFIG_WERROR=n

# Configurações de áudio/codec
CONFIG_SND_SOC_ES_SLIM=n
CONFIG_SND_SOC_ES_I2C=n
CONFIG_SND_SOC_MAX98506=n

# VSYSCALL fix para kernel 3.4.x
CONFIG_GENERIC_TIME_VSYSCALL=n

# Fix para linking issues
CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=n
CONFIG_MODVERSIONS=n

# Fixes específicos para filesystems
CONFIG_NTFS_DEBUG=n
CONFIG_NTFS_RW=y
CONFIG_EXT4_DEBUG=n

# Reduz complexidade de alguns sistemas de arquivos
CONFIG_JBD2_DEBUG=n

# Fixes para MSM timer e debug
CONFIG_MSM_DEBUG_TIMER=n
CONFIG_DEBUG_TIMEKEEPING=n
CONFIG_TIMER_STATS=n

# EXT4 simplificado para evitar problemas de linking
CONFIG_EXT4_FS=y
CONFIG_EXT4_FS_XATTR=n
CONFIG_EXT4_FS_POSIX_ACL=n
CONFIG_EXT4_FS_SECURITY=n
CONFIG_JBD2_DEBUG=n

# Desabilita NTFS que pode estar causando problemas
CONFIG_NTFS_FS=n
CONFIG_NTFS_DEBUG=n
CONFIG_NTFS_RW=n
EOF

    # Para kernel 3.4.x, usar oldconfig com input redirecionado
    _log "Executando make oldconfig (non-interactive)..."
    yes "" | make -s \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        HOSTCFLAGS="$host_flags" \
        HOSTLDFLAGS="-no-pie" \
        LDFLAGS="" \
        oldconfig || _die "oldconfig falhou"

    _log "Executando make prepare..."
    make -s \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        HOSTCFLAGS="$host_flags" \
        HOSTLDFLAGS="-no-pie" \
        LDFLAGS="" \
        prepare || _die "prepare falhou"

    _log "Preparação concluída com sucesso!"
}

build() {
    cd "$builddir"
    _log "Compilando zImage, módulos e DTBs..."

    # Garante que as LDFLAGS permaneçam limpas durante a compilação
    unset LDFLAGS
    export LDFLAGS=""

    _log "Compilando fs com captura completa de erro..."

    # Cria um script para capturar o comando exato que falha
    cat > capture_fs_error.sh <<'EOF'
#!/bin/bash
set -x
exec 2>&1
make V=1 KBUILD_VERBOSE=1 -j1 \
    ARCH=arm \
    CROSS_COMPILE="armv7-alpine-linux-musleabihf-" \
    fs/built-in.o
EOF
    chmod +x capture_fs_error.sh

    # Executa e captura TUDO
    if ! ./capture_fs_error.sh 2>&1 | tee fs_full_log.txt; then
        _log "=== CAPTURANDO ERRO DETALHADO ==="
        _log "Últimas 30 linhas do log:"
        tail -n 30 fs_full_log.txt

        _log "Procurando pelo comando LD que falhou..."
        grep -A5 -B5 "ld.*fs.*built-in" fs_full_log.txt || true
        grep -A5 -B5 "Error\|error\|failed" fs_full_log.txt | tail -n 20

        _log "Listando arquivos built-in.o criados:"
        find fs/ -name "built-in.o" -ls

        _log "Testando linking manual dos componentes do fs..."
        components=""
        for dir in fs/*/; do
            if [ -f "${dir}built-in.o" ]; then
                component=$(basename "$dir")
                _log "Encontrado componente: $component"
                components="$components ${dir}built-in.o"
            fi
        done

        _log "Componentes encontrados: $components"

        # Tenta o link manual para ver o erro específico
        _log "Executando link manual:"
        ${_cross_prefix}ld -EL -r -o fs/built-in.o.manual $components 2>&1 | tee manual_link.log || {
            _log "=== ERRO DO LINK MANUAL ==="
            cat manual_link.log

            # Tenta um por um para identificar qual está problemático
            for comp in $components; do
                _log "Testando componente individual: $comp"
                if ! ${_cross_prefix}ld -EL -r -o test_$.o $comp 2>/dev/null; then
                    _log "COMPONENTE PROBLEMÁTICO: $comp"
                    ${_cross_prefix}nm $comp | grep " U " | head -10
                fi
            done
        }

        _die "Falha no fs - log detalhado criado"
    fi

    _log "fs compilado com sucesso, continuando..."

    make -j$(nproc) \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        HOSTCFLAGS="$host_flags" \
        HOSTLDFLAGS="-no-pie" \
        LDFLAGS="" \
        KBUILD_LDFLAGS="" \
        KBUILD_LDFLAGS_MODULE="" \
        zImage modules dtbs || _die "Falha na compilação"

    # Gera dt.img se dtbTool estiver disponível
    if command -v dtbTool >/dev/null 2>&1; then
        _log "Gerando dt.img..."
        dtbTool -s 2048 -p scripts/dtc/ -o arch/arm/boot/dt.img arch/arm/boot/dts/ || _log "dtbTool falhou"
    else
        _log "dtbTool não encontrado, pulando dt.img"
    fi
}

package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    make DESTDIR="$pkgdir" \
        INSTALL_MOD_PATH="$pkgdir" \
        INSTALL_PATH="$pkgdir/boot" \
        ARCH=arm \
        CROSS_COMPILE="${_cross_prefix}" \
        LDFLAGS="" \
        install modules_install || _die "Falha ao instalar"

    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-samsung-matisse3g"
    [ -f arch/arm/boot/dt.img ] && install -Dm644 arch/arm/boot/dt.img "$pkgdir/boot/dt.img"

    _log "Empacotamento concluído!"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
a42873d0a8cce7b8f2adbd62f3450f15a2b10ecfc47703f949079b33bcf6cb72d51f3245f11fd58dc49d1fd089de0b431404f5a7768e8d8e3afe968c7cdb6dc9  config-samsung-matisse3g.armv7
"
