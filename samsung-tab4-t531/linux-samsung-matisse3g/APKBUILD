# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.0
pkgrel=0
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531)"
arch="armv7"
url="https://github.com/matissewifi/android_kernel_samsung_matisse"
license="GPL-2.0-only"
options="!strip !check"
makedepends="bc bison flex perl python3 gmp-dev mpfr-dev mpc1-dev gettext-dev bash"
subpackages=""
source="
    https://github.com/matissewifi/android_kernel_samsung_matisse/archive/refs/heads/cm-14.1.tar.gz
    config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_matisse-cm-14.1"

prepare() {
    default_prepare
    cd "$builddir"

    echo "[*] Criando link simbólico para bash se necessário"
    if [ ! -f /bin/bash ] && [ -f /usr/bin/bash ]; then
        mkdir -p "$builddir/bin-symlinks"
        ln -sf /usr/bin/bash "$builddir/bin-symlinks/bash"
        export PATH="$builddir/bin-symlinks:$PATH"
    fi

    echo "[*] Corrigindo compatibilidade com GCC 15+"
    # Cria o arquivo compiler-gcc15.h baseado no gcc14.h ou o mais recente disponível
    if [ -f include/linux/compiler-gcc14.h ]; then
        cp include/linux/compiler-gcc14.h include/linux/compiler-gcc15.h
        echo "Criado compiler-gcc15.h baseado no gcc14.h"
    elif [ -f include/linux/compiler-gcc13.h ]; then
        cp include/linux/compiler-gcc13.h include/linux/compiler-gcc15.h
        echo "Criado compiler-gcc15.h baseado no gcc13.h"
    elif [ -f include/linux/compiler-gcc12.h ]; then
        cp include/linux/compiler-gcc12.h include/linux/compiler-gcc15.h
        echo "Criado compiler-gcc15.h baseado no gcc12.h"
    elif [ -f include/linux/compiler-gcc11.h ]; then
        cp include/linux/compiler-gcc11.h include/linux/compiler-gcc15.h
        echo "Criado compiler-gcc15.h baseado no gcc11.h"
    elif [ -f include/linux/compiler-gcc10.h ]; then
        cp include/linux/compiler-gcc10.h include/linux/compiler-gcc15.h
        echo "Criado compiler-gcc15.h baseado no gcc10.h"
    else
        # Fallback: criar um arquivo mínimo
        cat > include/linux/compiler-gcc15.h << 'EOF'
#ifndef __LINUX_COMPILER_H
#error "Please don't include <linux/compiler-gcc15.h> directly, include <linux/compiler.h> instead."
#endif

#define __used                  __attribute__((__used__))
#define __maybe_unused          __attribute__((unused))
#define __always_unused         __attribute__((unused))

#define __gcc_header(x) #x
#define _gcc_header(x) __gcc_header(linux/compiler-gcc##x.h)
#define gcc_header(x) _gcc_header(x)
EOF
        echo "Criado compiler-gcc15.h genérico"
    fi

    echo "[*] Corrigindo problemas de C23/bool no kernel antigo"
    # Corrige include/linux/stddef.h
    if [ -f include/linux/stddef.h ]; then
        sed -i '/enum {/,/};/c\
#ifndef __cplusplus\
#ifndef bool\
enum {\
\t__false\t= 0,\
\t__true\t= 1\
};\
#define false __false\
#define true __true\
#endif\
#endif' include/linux/stddef.h
        echo "Corrigido include/linux/stddef.h para C23"
    fi

    # Corrige include/linux/types.h
    if [ -f include/linux/types.h ]; then
        sed -i 's/typedef _Bool[[:space:]]*bool;/#ifndef __cplusplus\n#ifndef bool\ntypedef _Bool bool;\n#endif\n#endif/' include/linux/types.h
        echo "Corrigido include/linux/types.h para C23"
    fi

    # Adiciona patch adicional para outros arquivos problemáticos
    if [ -f include/linux/compiler.h ]; then
        # Adiciona proteção para bool no compiler.h se necessário
        if ! grep -q "#ifndef bool" include/linux/compiler.h; then
            sed -i '1i\
#ifndef __cplusplus\
#ifndef bool\
typedef _Bool bool;\
#endif\
#ifndef true\
#define true 1\
#endif\
#ifndef false\
#define false 0\
#endif\
#endif' include/linux/compiler.h
            echo "Adicionadas proteções bool/true/false ao compiler.h"
        fi
    fi

    echo "[*] Corrigindo gcc-wrapper.py para Python 3"
    if [ -f scripts/gcc-wrapper.py ]; then
        # Reescreve o arquivo completo para Python 3
        cat > scripts/gcc-wrapper.py << 'EOF'
#!/usr/bin/env python3

import sys
import subprocess
import re
import os

forbidden_warnings = [
    "include/linux/module.h:",
    "warning: ISO C90 forbids mixed declarations"
]

def interpret_warning(line):
    if isinstance(line, bytes):
        line = line.decode('utf-8', errors='ignore')

    for warning in forbidden_warnings:
        if warning in line:
            print("error, forbidden warning:", warning)
            return

    line = line.rstrip('\n')
    line = re.sub(r'\033\[[0-9;]*m', '', line)

def run_gcc():
    args = sys.argv[1:]
    if not args:
        return 1

    try:
        proc = subprocess.Popen(args, stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT,
                              universal_newlines=True)

        for line in proc.stdout:
            interpret_warning(line)
            sys.stdout.write(line)
            sys.stdout.flush()

        proc.wait()
        return proc.returncode

    except Exception as e:
        print("Error executing compiler:", str(e))
        return 1

if __name__ == "__main__":
    status = run_gcc()
    sys.exit(status)
EOF
        chmod +x scripts/gcc-wrapper.py
        echo "gcc-wrapper.py reescrito com sucesso para Python 3"
    fi

    echo "[*] Corrigindo outros scripts Python para Python 3"
    find "$builddir/scripts" -type f -name "*.py" -exec sed -i '1s|^#!.*python.*$|#!/usr/bin/env python3|' {} \;

    # Corrige prints Python 2 para Python 3 nos scripts críticos
    if [ -f scripts/tracing/draw_functrace.py ]; then
        sed -i 's/print \([^(].*\)/print(\1)/' scripts/tracing/draw_functrace.py
    fi

    if [ -f scripts/rt-tester/rt-tester.py ]; then
        sed -i 's/print \([^(].*\)/print(\1)/' scripts/rt-tester/rt-tester.py
    fi

    if [ -f scripts/build-all.py ]; then
        sed -i 's/print \([^(].*\)/print(\1)/' scripts/build-all.py
    fi

    echo "[*] Aplicando .config completo e já validado"
    cp "$srcdir"/config-samsung-matisse3g.armv7 .config

    echo "[*] Corrigindo Makefiles com TABs"
    find "$builddir" -type f -name "Makefile*" -exec sed -i 's/^\([ ]\+\)/\t/' {} +

    echo "[*] Corrigindo zconf.gperf (se existir)"
    [ -f scripts/kconfig/zconf.gperf ] && \
        sed -i 's/__inline\ static/inline/' scripts/kconfig/zconf.gperf || true

    echo "[*] Listando defconfigs disponíveis para debug:"
    ls -la arch/arm/configs/ | head -10

    echo "[*] Gerando configuração completa do kernel"
    # Define variáveis de ambiente para evitar problemas com bash e força C89
    export CONFIG_SHELL="/bin/sh"
    export SHELL="/bin/sh"
    export KCFLAGS="-std=gnu89 -Wno-error"
    export HOSTCFLAGS="-std=gnu89"

    # Usa a defconfig específica do matisse3g que foi encontrada!
    if [ -f arch/arm/configs/msm8226-sec_matisse3g_defconfig ]; then
        echo "Usando msm8226-sec_matisse3g_defconfig - configuração específica do dispositivo!"
        make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" msm8226-sec_matisse3g_defconfig
    elif [ -f arch/arm/configs/msm8226-sec_defconfig ]; then
        echo "Usando msm8226-sec_defconfig como base"
        make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" msm8226-sec_defconfig
    elif ls arch/arm/configs/*8226* 2>/dev/null; then
        # Pega o primeiro arquivo que contenha 8226
        DEFCONFIG=$(ls arch/arm/configs/*8226* | head -n1 | xargs basename)
        echo "Usando $DEFCONFIG como base"
        make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" $DEFCONFIG
    elif ls arch/arm/configs/*msm* 2>/dev/null; then
        # Fallback para qualquer defconfig MSM
        DEFCONFIG=$(ls arch/arm/configs/*msm* | head -n1 | xargs basename)
        echo "Usando $DEFCONFIG como base"
        make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" $DEFCONFIG
    else
        echo "ERRO: Nenhuma defconfig MSM encontrada!"
        exit 1
    fi

    # Aplica suas configurações específicas por cima
    echo "[*] Aplicando configurações específicas do dispositivo"
    while IFS='=' read -r key value; do
        # Ignora linhas vazias, comentários e linhas inválidas
        if [[ -n "$key" && "$key" =~ ^CONFIG_ && ! "$key" =~ ^# ]]; then
            # Remove a linha existente se houver
            sed -i "/^$key=/d" .config
            sed -i "/^# $key is not set/d" .config
            # Adiciona a nova configuração
            if [[ "$value" == "y" || "$value" == "m" || "$value" =~ ^[0-9]+$ || "$value" =~ ^\".*\"$ ]]; then
                echo "$key=$value" >> .config
            fi
        fi
    done < "$srcdir"/config-samsung-matisse3g.armv7

    # Gera configuração final completa sem interação
    echo "[*] Finalizando configuração do kernel"
    # Para kernels antigos (3.4), usa oldnoconfig em vez de olddefconfig
    if make ARCH=arm CONFIG_SHELL="/bin/sh" help | grep -q olddefconfig; then
        make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" olddefconfig
    elif make ARCH=arm CONFIG_SHELL="/bin/sh" help | grep -q oldnoconfig; then
        echo "Usando oldnoconfig (kernel antigo)"
        make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" oldnoconfig
    else
        echo "Usando silentoldconfig (fallback)"
        yes "" | make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" silentoldconfig
    fi

    echo "[*] Preparando ambiente (make prepare e make scripts)"
    # Remove problemas com DocBook que causam erros desnecessários
    sed -i 's/dochelp//' Documentation/DocBook/Makefile 2>/dev/null || true

    make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" prepare
    make ARCH=arm CONFIG_SHELL="/bin/sh" KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" scripts
}

build() {
    cd "$builddir"

    # Define variáveis para evitar problemas e força C89
    export CONFIG_SHELL="/bin/sh"
    export SHELL="/bin/sh"
    export KCFLAGS="-std=gnu89 -Wno-error"
    export HOSTCFLAGS="-std=gnu89"

    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- CONFIG_SHELL="/bin/sh" \
         KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" \
         -j$(nproc) zImage dtbs
}

package() {
    mkdir -p "$pkgdir/boot"
    cp arch/arm/boot/zImage "$pkgdir/boot/vmlinuz"
    cp arch/arm/boot/dts/*.dtb "$pkgdir/boot/" 2>/dev/null || true
}

sha512sums="
5f75c3531f91fe879b649f8b8bfd70b5158a85d569a4943d217a5c1308b2c790bbc79fbb9ad02713f9fdb26e45d088511dd66d76c90568c8c70086356abec45f  cm-14.1.tar.gz
a0d0940fd57fc11f7c899ce54a08403532dd7d3b3d0bbc8edefd1cf6bce424a33bee45e8324b733c4bbc374e9ed5a499240295029e5b1622c2b884a8636ef56c  config-samsung-matisse3g.armv7
"
