# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=4.4.302
pkgrel=0
pkgdesc="Linux kernel for Samsung Galaxy Tab 4 10.1 (SM-T531) - LineageOS 18.1"
arch="armv7"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps"
makedepends="
	bc
	bison
	flex
	perl
	python3
	gmp-dev
	mpfr-dev
	mpc1-dev
	gettext-dev
	bash
	findutils
	xz
"
subpackages=""
source="
	https://github.com/felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/pmos-matisse3g-fixes.tar.gz
	config-samsung-matisse3g.armv7
"
builddir="$srcdir/android_kernel_samsung_msm8226-pmos-matisse3g-fixes"

prepare() {
	default_prepare
	cd "$builddir"
	echo "[*] Preparando kernel LineageOS 18.1 para matisse3g"

	# Define ambiente
	export ARCH=arm
	export CROSS_COMPILE=armv7-alpine-linux-musleabihf-

	# Fix DIRETO para compatibilidade com C23 - remove definições conflitantes
	echo "[*] Aplicando fix direto para compatibilidade C23..."

	# Remove enum false/true de stddef.h
	sed -i '/^enum {$/,/^};$/d' include/linux/stddef.h

	# Remove typedef bool de types.h
	sed -i '/^typedef _Bool.*bool;$/d' include/linux/types.h

	# Força C11 no Makefile principal
	sed -i '/^HOSTCFLAGS.*:=/d' Makefile
	sed -i '/^HOSTCXXFLAGS.*:=/d' Makefile
	sed -i '/^KBUILD_HOSTCFLAGS.*:=/d' Makefile
	sed -i '/^KBUILD_HOSTCXXFLAGS.*:=/d' Makefile

	# Adiciona definições C11 no início do Makefile
	sed -i '1i# Force C11 for compatibility with modern GCC' Makefile
	sed -i '2i HOSTCFLAGS := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11' Makefile
	sed -i '3i HOSTCXXFLAGS := -O2 -std=gnu++11' Makefile
	sed -i '4i KBUILD_HOSTCFLAGS := $(HOSTCFLAGS)' Makefile
	sed -i '5i KBUILD_HOSTCXXFLAGS := $(HOSTCXXFLAGS)' Makefile
	sed -i '6i ' Makefile

	# Fix para scripts/mod/Makefile
	if [ -f scripts/mod/Makefile ]; then
		sed -i '1i HOSTCFLAGS += -std=gnu11' scripts/mod/Makefile
	fi

	# Fix para missing msm_rtb.h header
	echo "[*] Aplicando fix para headers MSM faltantes..."
	if [ ! -f arch/arm/include/asm/mach/msm_rtb.h ]; then
		mkdir -p arch/arm/include/asm/mach
		cat > arch/arm/include/asm/mach/msm_rtb.h << 'EOF'
#ifndef __ASM_ARCH_MSM_RTB_H
#define __ASM_ARCH_MSM_RTB_H

/* Stub header for missing MSM RTB functionality */
static inline void uncached_logk_pc(enum logk_event_type log_type, void *caller,
				void *data) { }
static inline void uncached_logk(enum logk_event_type log_type, void *data) { }

#endif /* __ASM_ARCH_MSM_RTB_H */
EOF
	fi

	# Fix alternativo - comentar a inclusão se o header não existe
	if [ -f arch/arm/include/asm/io.h ]; then
		sed -i 's/#include <mach\/msm_rtb.h>/\/\* #include <mach\/msm_rtb.h> \*\//' arch/arm/include/asm/io.h
	fi

	# fix: Corrigir erro de assembly em proc-arm926.S
	echo "[*] Corrigindo erro de assembly em proc-arm926.S..."
	if [ -f arch/arm/mm/proc-arm926.S ]; then
		# Remove comentários problemáticos que causam erro de parsing
		sed -i 's/\t#.*$//' arch/arm/mm/proc-arm926.S
		# Converte comentários # para @ (padrão ARM assembly)
		sed -i 's/^\([[:space:]]*\)#\([^!].*\)$/\1@ \2/' arch/arm/mm/proc-arm926.S
	fi

	# fix: Corrigir problemas de logging em io.h
	echo "[*] Corrigindo conflitos de logging em io.h..."
	if [ -f arch/arm/include/asm/io.h ]; then
		# Desabilita logging problemático se existir
		sed -i 's/__raw_write_logged/__raw_writeb_direct/g' arch/arm/include/asm/io.h 2>/dev/null || true
		# Remove macros problemáticas de logging
		sed -i '/^#define.*__raw_write_logged/d' arch/arm/include/asm/io.h 2>/dev/null || true
	fi

	# Fix para warnings de log2.h (atributos conflitantes)
	echo "[*] Corrigindo warnings de atributos em log2.h..."
	if [ -f include/linux/log2.h ]; then
		# Remove atributo noreturn conflitante
		sed -i 's/__attribute__((noreturn))//' include/linux/log2.h
		# Ou desabilita o warning específico
		sed -i '1i#pragma GCC diagnostic ignored "-Wattributes"' include/linux/log2.h
	fi

	# Fix para erros de compilação ARM específicos
	echo "[*] Aplicando fixes ARM específicos..."

	# Fix para flags incompatíveis com GCC moderno
	echo "[*] Corrigindo flags incompatíveis do GCC..."

	# Remove flags problemáticas do kernel antigo
	sed -i 's/-Wno-error-implicit-function-declaration//g' Makefile
	find . -name "Makefile*" -exec sed -i 's/-Wno-error-implicit-function-declaration//g' {} \;

	# Adiciona flags compatíveis
	sed -i 's/-Werror/-Wno-error/g' Makefile
	sed -i '/^KBUILD_CFLAGS.*+=/s/$/ -Wno-attributes -Wno-unused-but-set-variable -Wno-implicit-function-declaration/' Makefile

	# Remove outras flags problemáticas se existirem
	sed -i 's/-Wno-error-implicit-function-declaration/-Wno-implicit-function-declaration/g' Makefile

	# Aplica configuração
	make msm8226-sec_matisse3g_defconfig

	# Gera configuração final (kernel 4.4 usa oldnoconfig)
	echo "[*] Aplicando configuração do kernel..."
	if make help 2>/dev/null | grep -q olddefconfig; then
		make olddefconfig
	elif make help 2>/dev/null | grep -q oldnoconfig; then
		yes "" | make oldnoconfig
	else
		yes "" | make oldconfig
	fi
}

build() {
	cd "$builddir"

	# Define ambiente de cross-compilation EXPLICITAMENTE
	export PATH="/usr/armv7-alpine-linux-musleabihf/bin:$PATH"
	export ARCH=arm
	export CROSS_COMPILE=armv7-alpine-linux-musleabihf-
	export CC=armv7-alpine-linux-musleabihf-gcc
	export LD=armv7-alpine-linux-musleabihf-ld
	export AS=armv7-alpine-linux-musleabihf-as
	export AR=armv7-alpine-linux-musleabihf-ar
	export OBJCOPY=armv7-alpine-linux-musleabihf-objcopy
	export STRIP=armv7-alpine-linux-musleabihf-strip

	# Debug: verificar se as ferramentas estão disponíveis
	echo "[*] PATH atual: $PATH"
	echo "[*] Verificando ferramentas de compilação:"
	which armv7-alpine-linux-musleabihf-ld || echo "ERRO: LD não encontrado"
	which armv7-alpine-linux-musleabihf-gcc || echo "ERRO: GCC não encontrado"

	# Flags adicionais para evitar erros (sem flags incompatíveis)
	export CFLAGS_KERNEL="-Wno-error -Wno-attributes -Wno-unused-but-set-variable -Wno-implicit-function-declaration"
	export AFLAGS_KERNEL="-Wa,--no-warn"

	echo "[*] Compilando kernel com flags permissivas..."
	make V=1 \
		ARCH=arm \
		CROSS_COMPILE=armv7-alpine-linux-musleabihf- \
		CC=armv7-alpine-linux-musleabihf-gcc \
		LD=armv7-alpine-linux-musleabihf-ld \
		CFLAGS_KERNEL="$CFLAGS_KERNEL" \
		AFLAGS_KERNEL="$AFLAGS_KERNEL" \
		-j$(nproc) \
		zImage dtbs modules
}

package() {
	cd "$builddir"

	# Restaura ambiente
	export ARCH=arm
	export CROSS_COMPILE=armv7-alpine-linux-musleabihf-
	export PATH="/usr/armv7-alpine-linux-musleabihf/bin:$PATH"

	# Instala kernel
	install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz"

	# Instala DTBs se existirem
	if [ -d arch/arm/boot/dts/ ]; then
		for dtb in arch/arm/boot/dts/*.dtb; do
			[ -f "$dtb" ] && install -Dm644 "$dtb" "$pkgdir/boot/$(basename $dtb)"
		done
	fi

	# Instala módulos
	make ARCH=arm \
		CROSS_COMPILE=armv7-alpine-linux-musleabihf- \
		INSTALL_MOD_PATH="$pkgdir" \
		modules_install
}

sha512sums="
963d7aece14005735b0fe699ad50b903808019413ccf104772243e64f1d1ab8e571ae9bd32b7aedf86c8888fb3e09ede00a047277c01bfa104b4e6ea6848b0e5  pmos-matisse3g-fixes.tar.gz
552400c0d5244b461f591971c9b617129ab8bce8466cf01b3f085452c6765bb142e9101037360d431ffc3280bdfe8db07debafcb745216d21867d6f909a1abbf  config-samsung-matisse3g.armv7
"
