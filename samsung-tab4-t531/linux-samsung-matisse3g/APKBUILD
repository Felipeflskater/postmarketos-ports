# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=136
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531)"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex gmp-dev installkernel linux-headers mpc1-dev mpfr-dev perl python3 sed xz"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-timex-header.patch
	03-fix-defconfig.patch
	08-fix-asm-offsets-simple.patch
	10-add-gcc15-conservative-flags.patch
	11-fix-irq-timer-definitions-v2.patch
	12-fix-section-mismatch.patch
	13-disable-stack-protector.patch
	29-fix-lpm-levels-redefinition.patch
	40-create-compiler-gcc14-header.patch
	55-fix-proc-pid-init-ino.patch
	56-fix-rcu-build-bug-on.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

prepare() {
    cd "$builddir"

    # Setup básico
    for comp in armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc; do
        command -v "$comp" >/dev/null 2>&1 && export CROSS_COMPILE="${comp%-gcc}-" && break
    done

    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS KCFLAGS AFLAGS
    export ARCH=arm HOSTCC=gcc
    export HOSTCFLAGS="-O1 -w -std=gnu89"
    export KBUILD_CFLAGS="-w -std=gnu89 -marm -mno-thumb-interwork -Wno-error -fno-stack-protector -D__ARM_ARCH_7A__"
    export KBUILD_AFLAGS="-D__ASSEMBLY__ -marm -mno-thumb-interwork -fno-stack-protector -D__ARM_ARCH_7A__ -Wa,-mno-warn-deprecated"
    export EXTRA_CFLAGS="-w -marm -mno-thumb-interwork -fno-stack-protector -D__ARM_ARCH_7A__"

    # Criar headers necessários
    echo "Criando header global de arquitetura..."
    mkdir -p include/generated include/config arch/arm/include/generated/asm
    echo '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    cat > include/generated/autoconf.h << 'EOF'
#define CONFIG_ARM 1
#define CONFIG_CPU_V7 1
#define CONFIG_MSM_PM 1
EOF
    touch include/generated/asm-offsets.h include/generated/bounds.h

    # Definir __LINUX_ARM_ARCH__ globalmente em asm-offsets.c
    if [ -f arch/arm/kernel/asm-offsets.c ]; then
        if ! grep -q "^#define __LINUX_ARM_ARCH__" arch/arm/kernel/asm-offsets.c; then
            sed -i '1i#ifndef __LINUX_ARM_ARCH__\n#define __LINUX_ARM_ARCH__ 7\n#endif' arch/arm/kernel/asm-offsets.c
            echo "  ✓ Incluído em arch/arm/kernel/asm-offsets.c"
        fi
    fi

    # Definir em outros headers críticos
    for f in arch/arm/include/asm/spinlock.h arch/arm/include/asm/atomic.h; do
        if [ -f "$f" ] && ! grep -q "^#define __LINUX_ARM_ARCH__" "$f"; then
            sed -i '1i#ifndef __LINUX_ARM_ARCH__\n#define __LINUX_ARM_ARCH__ 7\n#endif' "$f"
            echo "  ✓ Incluído em $f"
        fi
    done

    # Aplicar patches NA ORDEM CORRETA
    echo "Aplicando patches..."
    for p in 01-fix-timex-header.patch \
             03-fix-defconfig.patch \
             08-fix-asm-offsets-simple.patch \
             10-add-gcc15-conservative-flags.patch \
             11-fix-irq-timer-definitions-v2.patch \
             12-fix-section-mismatch.patch \
             13-disable-stack-protector.patch \
             29-fix-lpm-levels-redefinition.patch \
             40-create-compiler-gcc14-header.patch \
             55-fix-proc-pid-init-ino.patch \
             56-fix-rcu-build-bug-on.patch; do
        if [ -f "$srcdir/$p" ]; then
            echo "  Aplicando $p..."
            # Tentar aplicar com diferentes níveis de fuzz
            if ! patch -p1 -i "$srcdir/$p" 2>/dev/null; then
                echo "  Tentando com --forward..."
                if ! patch -p1 --forward -i "$srcdir/$p" 2>/dev/null; then
                    echo "  AVISO: $p pode ter falhado, continuando..."
                fi
            fi
        else
            echo "  AVISO: $p não encontrado em $srcdir"
        fi
    done

    echo "Aplicando correções manuais..."

    # Correção manual para rcupdate.h - desabilitar BUILD_BUG_ON problemático
    if [ -f include/linux/rcupdate.h ]; then
        echo "Corrigindo rcupdate.h (BUILD_BUG_ON)..."
        sed -i 's/^\([[:space:]]*\)BUILD_BUG_ON(!__builtin_constant_p(offset));/\1\/\* BUILD_BUG_ON(!__builtin_constant_p(offset)); - Disabled for GCC 15+ compatibility *\//' include/linux/rcupdate.h
        echo "  ✓ rcupdate.h corrigido"
    fi

    # Correção manual para lpm_levels.c se o patch falhou
    if [ -f arch/arm/mach-msm/lpm_levels.c ]; then
        echo "Corrigindo lpm_levels.c manualmente..."
        # Adicionar forward declaration antes da função lpm_levels_module_init
        if ! grep -q "static int __init lpm_levels_module_init(void);" arch/arm/mach-msm/lpm_levels.c; then
            # Encontrar a linha da função e adicionar forward declaration antes
            sed -i '/^static int __init lpm_levels_module_init(void)$/i\
/* Forward declaration to avoid redefinition */\
static int __init lpm_levels_module_init(void);\
' arch/arm/mach-msm/lpm_levels.c
            echo "  ✓ lpm_levels.c corrigido"
        fi
    fi

    # Correção manual para cpuidle.h se o patch falhou
    if [ -f arch/arm/mach-msm/include/mach/cpuidle.h ]; then
        echo "Corrigindo cpuidle.h manualmente..."
        # Verificar o conteúdo atual do arquivo
        if ! grep -q "MSM_PM_CPUIDLE_DEFINED" arch/arm/mach-msm/include/mach/cpuidle.h; then
            # Obter o conteúdo atual sem o header guard final
            CURRENT_CONTENT=$(sed '/#endif/d' arch/arm/mach-msm/include/mach/cpuidle.h | tail -n +3)

            # Reescrever o arquivo com proteção contra múltiplas definições
            cat > arch/arm/mach-msm/include/mach/cpuidle.h << 'CPUIDLE_EOF'
#ifndef _ARCH_ARM_MACH_MSM_CPUIDLE_H
#define _ARCH_ARM_MACH_MSM_CPUIDLE_H

#ifdef CONFIG_MSM_PM
#ifndef MSM_PM_CPUIDLE_DEFINED
#define MSM_PM_CPUIDLE_DEFINED
CPUIDLE_EOF

            # Adicionar o conteúdo existente
            echo "$CURRENT_CONTENT" >> arch/arm/mach-msm/include/mach/cpuidle.h

            # Fechar os guards
            cat >> arch/arm/mach-msm/include/mach/cpuidle.h << 'CPUIDLE_EOF'

#endif /* MSM_PM_CPUIDLE_DEFINED */
#endif /* CONFIG_MSM_PM */
#endif
CPUIDLE_EOF
            echo "  ✓ cpuidle.h corrigido"
        fi
    fi

    # PATCH 28: Aplicar ARM/Thumb macros manualmente via sed
    echo "Aplicando correções ARM/Thumb manualmente..."
    for asm_file in arch/arm/kernel/entry-armv.S \
                    arch/arm/mm/cache-v7.S \
                    arch/arm/kernel/entry-common.S \
                    arch/arm/mm/proc-v7.S; do
        if [ -f "$asm_file" ]; then
            echo "  Corrigindo $asm_file..."
            # Inserir correções logo após #include <asm/assembler.h>
            sed -i '/^#include <asm\/assembler.h>/a\
\
/* Force ARM-only mode - override any thumb macros */\
#undef arm\
#undef thumb\
#undef W\
#define arm(x...) x\
#define thumb(x...)\
#define W(instr) instr\
\t.syntax unified' "$asm_file"
            echo "    ✓ $asm_file"
        fi
    done

    # CRÍTICO: Remover TODAS as macros arm()/thumb() dos arquivos assembly
    echo "Removendo macros arm()/thumb() dos arquivos assembly..."
    for asm_file in arch/arm/kernel/entry-armv.S \
                    arch/arm/mm/cache-v7.S \
                    arch/arm/kernel/entry-common.S \
                    arch/arm/mm/proc-v7.S; do
        if [ -f "$asm_file" ]; then
            echo "  Processando $asm_file..."
            # Remover linhas arm(...) mantendo apenas o conteúdo
            sed -i 's/^\([[:space:]]*\)arm(\([^)]*\))/\1\2/' "$asm_file"
            # Remover linhas thumb(...) completamente
            sed -i 's/^\([[:space:]]*\)thumb([^)]*)$//' "$asm_file"
            # Remover thumb(...) inline
            sed -i 's/thumb(\([^)]*\))//' "$asm_file"
            echo "    ✓ $asm_file"
        fi
    done

    # Corrigir platsmp.c - comentar campos incompatíveis com kernel 3.4
    if [ -f arch/arm/mach-msm/platsmp.c ]; then
        echo "Corrigindo platsmp.c..."
        sed -i 's/\.cpu_kill[[:space:]]*=.*$/\/\* .cpu_kill - not supported in 3.4 *\//g' arch/arm/mach-msm/platsmp.c
        sed -i 's/\.cpu_die[[:space:]]*=.*$/\/\* .cpu_die - not supported in 3.4 *\//g' arch/arm/mach-msm/platsmp.c
        sed -i 's/\.cpu_disable[[:space:]]*=.*$/\/\* .cpu_disable - not supported in 3.4 *\//g' arch/arm/mach-msm/platsmp.c
        echo "  ✓ platsmp.c"
    fi

    # CRÍTICO: Desabilitar CONFIG_THUMB2_KERNEL para evitar problemas
    echo "Desabilitando Thumb-2..."
    sed -i 's/CONFIG_THUMB2_KERNEL=y/# CONFIG_THUMB2_KERNEL is not set/' .config 2>/dev/null || true
    echo "CONFIG_THUMB2_KERNEL=n" >> .config
    echo "# CONFIG_THUMB2_KERNEL is not set" >> .config

    # Forçar .arm em TODOS os arquivos assembly problemáticos
    echo "Forçando ARM mode em arquivos assembly..."
    for asm_file in arch/arm/kernel/entry-armv.S \
                    arch/arm/kernel/entry-common.S \
                    arch/arm/kernel/head.S \
                    arch/arm/kernel/head-common.S \
                    arch/arm/mm/cache-v7.S \
                    arch/arm/mm/proc-v7.S \
                    arch/arm/mach-msm/fiq_glue.S; do
        if [ -f "$asm_file" ]; then
            if ! grep -q "^[[:space:]]*\.arm" "$asm_file"; then
                sed -i '1i\.arm\n.syntax unified' "$asm_file"
            fi
            echo "  ✓ $asm_file"
        fi
    done

    # board-8226.c - stub de arrays problemáticos
    if [ -f arch/arm/mach-msm/board-8226.c ]; then
        echo "Corrigindo board-8226.c (stub)..."
        sed -i '/^static struct of_dev_auxdata msm_hsic_host_adata/,/^};/c\
static void *msm_hsic_host_adata = NULL;' arch/arm/mach-msm/board-8226.c

        sed -i '/^static struct of_dev_auxdata msm8226_auxdata_lookup/,/^};/c\
static void *msm8226_auxdata_lookup = NULL;' arch/arm/mach-msm/board-8226.c
    fi

    # smd_init_plat.c - stub simples
    cat > arch/arm/mach-msm/smd_init_plat.c << 'EOF'
#include <linux/module.h>
#include <linux/init.h>
int __init smd_core_init(void) { return 0; }
static int __init msm_smd_driver_init(void) { return smd_core_init(); }
module_init(msm_smd_driver_init);
MODULE_LICENSE("GPL v2");
EOF

    # Makefiles - forçar -marm em arquivos problemáticos
    cat >> arch/arm/vfp/Makefile << 'EOF'

CFLAGS_vfpmodule.o += -marm
CFLAGS_vfpsingle.o += -marm
CFLAGS_vfpdouble.o += -marm
EOF

    cat >> arch/arm/kernel/Makefile << 'EOF'

CFLAGS_ptrace.o += -marm
CFLAGS_process.o += -marm
EOF

    cat >> arch/arm/mm/Makefile << 'EOF'

CFLAGS_fault.o += -marm
CFLAGS_init.o += -marm
EOF

    # module_param bool -> int (compatibilidade)
    find . -name "*.c" -type f -exec sed -i \
        -e 's/module_param[[:space:]]*([[:space:]]*\([^,]*\)[[:space:]]*,[[:space:]]*bool[[:space:]]*,/module_param(\1, int,/g' \
        -e 's/module_param[[:space:]]*([[:space:]]*\([^,]*\)[[:space:]]*,[[:space:]]*_Bool[[:space:]]*,/module_param(\1, int,/g' \
        {} \; 2>/dev/null

    # Aplicar config otimizado
    cp "$srcdir/config-samsung-matisse3g.armv7" .config
    sed -i 's/# CONFIG_SMP is not set/CONFIG_SMP=y/' .config
    sed -i 's/CONFIG_NR_CPUS=1/CONFIG_NR_CPUS=4/' .config

    cat >> .config << 'EOF'
CONFIG_SMP=y
CONFIG_NR_CPUS=4
CONFIG_ARM_UNWIND=y
CONFIG_MSM_PM=y
CONFIG_DEBUG_SECTION_MISMATCH=n
CONFIG_NO_ERROR_ON_MISMATCH=y
CONFIG_HAVE_SMP=y
CONFIG_SMP_ON_UP=y
CONFIG_ARM_CPU_TOPOLOGY=y
CONFIG_SCHED_MC=y
EOF

    make scripts_basic >/dev/null 2>&1 || true
    yes "" | make oldconfig >/dev/null 2>&1 || true

    echo "Preparação concluída com sucesso!"
}

build() {
    cd "$builddir"
    timeout 2400 make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
        HOSTCFLAGS="$HOSTCFLAGS" KBUILD_CFLAGS="$KBUILD_CFLAGS" \
        KBUILD_AFLAGS="$KBUILD_AFLAGS" EXTRA_CFLAGS="$EXTRA_CFLAGS" \
        CONFIG_NO_ERROR_ON_MISMATCH=y KCFLAGS="-fno-stack-protector" \
        -j$(nproc) zImage || exit 1
    [ -f arch/arm/boot/zImage ] || exit 1
    make modules 2>/dev/null || true
}

package() {
    cd "$builddir"
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"
    make DESTDIR="$pkgdir" modules_install 2>/dev/null || true
    [ -d arch/arm/boot/dts ] && {
        mkdir -p "$pkgdir/boot/dtbs-$_flavor"
        find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \;
    }
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
d8a95e9527bab186d5e0d40fcbef90c761bb2e8ca17a7441101c560ba2d3dab91b978a45220c6aa651fb502c7618f401bc2a783afe2bf1210a8e5ddd9e64f5a0  config-samsung-matisse3g.armv7
f3bbc54d1c3433310f701c0da130c165d8baab29d924ad90a7021c40818e767066c10b6c2467b97d92b43191a7d0e1bb389dc056463263c14347e9e4582ae0ca  01-fix-timex-header.patch
726321e16d16edad715abd4bc83e9f546902e11b5d2c5f5ab1b7076872ad0fceee85d2e512e8007a78c0a956b3454b239b9a844149a87094a342d91030972889  03-fix-defconfig.patch
c0567e7c8f8458663296a6bdddac021dd8417055f2f17fa96c13ce39cf6502fffa23897eecac9911fce515f4f7f716d0ff394334fe6a36036c67832c378e0f43  08-fix-asm-offsets-simple.patch
c100588d2c68d4ca7564cfc5dfabe55d0ffef60d6d4bf3561b551db851ce472951ef3521ea2cad5099c65137bc230a5f17aaff81f95486ab8a0ff602114e6a24  10-add-gcc15-conservative-flags.patch
7380d8e468c4183230871ebc38cc5ef853adb59683774e7a7ced7430ee12bf5091b003197aa5af4028ddfc731e1b921f27e5e2e357023bb0ac82918d73fc612a  11-fix-irq-timer-definitions-v2.patch
3df086eb955c08fa770b43a16008a4eee7753ff9f1a47780a5528f3fda96f1cfb8f705c6931c83cb2ac2b9b6d20737998f99d13ae4c8e88f958d762237c2dc47  12-fix-section-mismatch.patch
b738038c3aa96ddd210277626ccba22a1047d74b5a958f222f0983ba9771dab2210b2c39dc348398dce213d079e63c554379ddeacf071ad84d88a283c383c834  13-disable-stack-protector.patch
4e99f91b1e181f5703eddbc8b1224389a5b972c71fa8993af8a95407938a1323d8e6a014e99d200ce912f31673113ca2eea8a03057ddf64c36aa603e9e72c752  29-fix-lpm-levels-redefinition.patch
9609c8c3fb4829b595d00738a4f8ee1daa58cbf5ae3cc59eb7ecc89f04705e13bfbb2116ae4c8ca3e4ecff733c9a8bd982bca06a8e1dbad336be8e71108df65c  40-create-compiler-gcc14-header.patch
1e4a630a8d83663304568c1fe676a952212131e2d9b0b7f09c5008c25beea8b24b0d2d9e451707cfa66f1055d96b669f4f6d854fafada08d9e14ca08d4199f40  55-fix-proc-pid-init-ino.patch
5f4ef7743dc298739e03f882b950b668e72b4c7069ef50e0b3f778d657ca246bcbab4afa9522d918a233b7c594343bc08145c69dfc0c1521ccdf7917c81c96bd  56-fix-rcu-build-bug-on.patch
"
