# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=21
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Otimizado para PostmarketOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz gcc-arm-none-eabi
"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-timex-header.patch
	03-fix-defconfig.patch
	04-fix-jffs2-format-warnings.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

# Função para corrigir o problema do __LINUX_ARM_ARCH__ redefinido
_fix_arm_arch_redefinition() {
    _log "Corrigindo redefinição do __LINUX_ARM_ARCH__..."

    # 1. Limpar definições conflitantes no Makefile principal
    if [ -f Makefile ]; then
        # Remover definições duplicadas se existirem
        sed -i '/__LINUX_ARM_ARCH__/d' Makefile 2>/dev/null || true

        # Adicionar definição única e controlada
        if ! grep -q "LINUX_ARM_ARCH_FIXED" Makefile; then
            cat >> Makefile << 'EOF'

# LINUX_ARM_ARCH_FIXED - Fix for redefinition warnings
ifndef __LINUX_ARM_ARCH__
KBUILD_CFLAGS += -D__LINUX_ARM_ARCH__=7
endif
EOF
        fi
    fi

    # 2. Corrigir arch/arm/Makefile
    if [ -f arch/arm/Makefile ]; then
        # Condicionalizar a definição para evitar redefinição
        sed -i 's/KBUILD_CFLAGS.*+= -D__LINUX_ARM_ARCH__=$(arch-y)/ifeq ($(filter -D__LINUX_ARM_ARCH__%,$(KBUILD_CFLAGS)),)\nKBUILD_CFLAGS += -D__LINUX_ARM_ARCH__=$(arch-y)\nendif/' arch/arm/Makefile 2>/dev/null || true
    fi

    # 3. Verificar e corrigir scripts de build
    if [ -f scripts/Makefile.build ]; then
        if grep -q "__LINUX_ARM_ARCH__" scripts/Makefile.build; then
            sed -i '/__LINUX_ARM_ARCH__/d' scripts/Makefile.build
        fi
    fi
}

# Função para aplicar correções via código em vez de patches
_apply_code_fixes() {
    _log "Aplicando correções via código..."

    # CORREÇÃO PRINCIPAL: Resolver __LINUX_ARM_ARCH__ redefinido
    _fix_arm_arch_redefinition

    # CORREÇÃO 1: Timex.h (já aplicada pelo patch 01)
    _log "Verificando correção do timex.h..."

    # CORREÇÃO 2: GCC15 compatibility no compiler.h
    if [ -f include/linux/compiler.h ]; then
        if ! grep -q "GCC 15+ compatibility" include/linux/compiler.h; then
            _log "Adicionando suporte GCC 15+ ao compiler.h..."
            cat >> include/linux/compiler.h << 'EOF'

/* GCC 15+ compatibility - added by pmbootstrap */
#ifndef __always_inline
#define __always_inline inline __attribute__((always_inline))
#endif
#ifndef __deprecated
#define __deprecated __attribute__((deprecated))
#endif
#ifndef __force
#define __force __attribute__((force))
#endif
EOF
        fi
    fi

    # CORREÇÃO 3: Makefile flags mais conservadores para evitar conflitos
    if [ -f Makefile ]; then
        if ! grep -q "CONSERVATIVE_GCC_FLAGS" Makefile; then
            _log "Adicionando flags conservadores ao Makefile..."
            cat >> Makefile << 'EOF'

# CONSERVATIVE_GCC_FLAGS - More conservative approach to avoid redefinition issues
KBUILD_CFLAGS += -fgnu89-inline -std=gnu89
KBUILD_CFLAGS += -Wno-error=format -Wno-error=format-overflow -Wno-error=format-truncation
KBUILD_CFLAGS += -Wno-error=stringop-overflow -Wno-error=stringop-truncation
KBUILD_CFLAGS += -Wno-error=array-bounds -Wno-error=dangling-pointer
KBUILD_CFLAGS += -Wno-error=address -Wno-error=maybe-uninitialized
KBUILD_CFLAGS += -Wno-macro-redefined
HOSTCFLAGS := -fgnu89-inline -std=gnu89 -O2 -static
HOSTCXXFLAGS := -fgnu89-inline -O2 -static
HOSTLDFLAGS := -static
EOF
        fi
    fi

    # CORREÇÃO 4: VFP entry.S com offsets hardcoded
    if [ -f arch/arm/vfp/entry.S ]; then
        _log "Corrigindo VFP entry.S..."
        # Substituir referências problemáticas por offsets fixos
        sed -i 's/#TI_PREEMPT/#8/g' arch/arm/vfp/entry.S 2>/dev/null || true
        sed -i 's/#S_PC/#60/g' arch/arm/vfp/entry.S 2>/dev/null || true
        sed -i 's/#TI_CPU/#20/g' arch/arm/vfp/entry.S 2>/dev/null || true
        sed -i 's/#TI_VFPSTATE/#144/g' arch/arm/vfp/entry.S 2>/dev/null || true
    fi

    # CORREÇÃO 5: Memory macros
    if [ -f arch/arm/include/asm/memory.h ]; then
        if ! grep -q "GCC 15+ compatibility" arch/arm/include/asm/memory.h; then
            _log "Corrigindo memory.h..."
            # Adicionar definições UL no início do arquivo
            sed -i '/^#ifndef _ASMARM_MEMORY_H/a\
\
/* GCC 15+ compatibility - UL macro fix */\
#ifndef __ASSEMBLY__\
#ifndef UL\
#define UL(x) _AC(x, UL)\
#endif\
#else\
#define UL(x) (x)\
#endif' arch/arm/include/asm/memory.h

            # Substituir definições problemáticas por valores fixos
            sed -i 's/#define PAGE_OFFSET.*UL(CONFIG_PAGE_OFFSET).*/#define PAGE_OFFSET             UL(0xC0000000)/' arch/arm/include/asm/memory.h
            sed -i 's/#define PHYS_OFFSET.*UL(CONFIG_PHYS_OFFSET).*/#define PHYS_OFFSET             UL(0x00000000)/' arch/arm/include/asm/memory.h
        fi
    fi

    # CORREÇÃO 6: const.h para _AC macro
    if [ -f include/linux/const.h ]; then
        if ! grep -q "__AC" include/linux/const.h; then
            _log "Adicionando macro _AC ao const.h..."
            cat >> include/linux/const.h << 'EOF'

/* _AC macro for memory.h compatibility */
#ifndef __AC
#define __AC(X,Y)	(X##Y)
#define _AC(X,Y)	__AC(X,Y)
#endif
EOF
        fi
    fi

    # CORREÇÃO 7: kbuild.h se não existir
    if [ ! -f include/linux/kbuild.h ]; then
        _log "Criando include/linux/kbuild.h..."
        mkdir -p include/linux
        cat > include/linux/kbuild.h << 'EOF'
#ifndef __LINUX_KBUILD_H
#define __LINUX_KBUILD_H

#define DEFINE(sym, val) \
        __asm__ __volatile__("\n->" #sym " %0 " #val : : "i" (val))

#define BLANK() \
        __asm__ __volatile__("\n->" : : )

#define OFFSET(sym, str, mem) \
        DEFINE(sym, offsetof(struct str, mem))

#define COMMENT(x) \
        __asm__ __volatile__("\n->#" x)

#endif
EOF
    fi

    # CORREÇÃO 8: asm-offsets.c user attribute
    if [ -f arch/arm/kernel/asm-offsets.c ]; then
        if ! grep -q "__user.*address_space" arch/arm/kernel/asm-offsets.c; then
            _log "Corrigindo asm-offsets.c..."
            sed -i '/#include <linux\/sched.h>/a\
\
/* GCC 15+ compatibility */\
#ifndef __user\
#define __user __attribute__((noderef, address_space(1)))\
#endif' arch/arm/kernel/asm-offsets.c
        fi
    fi

    # CORREÇÃO 9: Criar mach/msm_rtb.h faltante
    if [ ! -f arch/arm/mach-msm/include/mach/msm_rtb.h ]; then
        _log "Criando mach/msm_rtb.h faltante..."
        mkdir -p arch/arm/mach-msm/include/mach
        cat > arch/arm/mach-msm/include/mach/msm_rtb.h << 'EOF'
/*
 * MSM RTB (Real Time Buffer) - Stub implementation for PostmarketOS
 * Original header missing - providing minimal implementation
 */

#ifndef __MACH_MSM_RTB_H
#define __MACH_MSM_RTB_H

/* Empty stub - RTB functionality disabled for PostmarketOS build */
static inline void msm_rtb_disable(void) { }

#endif /* __MACH_MSM_RTB_H */
EOF
    fi

    # CORREÇÃO 10: Corrigir arch/arm/include/asm/io.h para lidar com header faltante
    if [ -f arch/arm/include/asm/io.h ]; then
        if grep -q "#include <mach/msm_rtb.h>" arch/arm/include/asm/io.h; then
            _log "Corrigindo include problemático em asm/io.h..."
            sed -i 's/#include <mach\/msm_rtb.h>/#ifdef CONFIG_MSM_RTB\n#include <mach\/msm_rtb.h>\n#endif/' arch/arm/include/asm/io.h
        fi
    fi

    # CORREÇÃO 11: Corrigir redefinições de true/false
    if [ -f include/linux/stddef.h ]; then
        if ! grep -q "ifndef.*false" include/linux/stddef.h; then
            _log "Corrigindo redefinições de true/false..."
            sed -i 's/#define false __kernel_false/#ifndef false\n#define false __kernel_false\n#endif/' include/linux/stddef.h
            sed -i 's/#define true  __kernel_true/#ifndef true\n#define true  __kernel_true\n#endif/' include/linux/stddef.h
        fi
    fi

    # CORREÇÃO 12: JFFS2 format warnings mais agressivos
    _log "Aplicando correções agressivas para JFFS2..."

    # Criar um header temporário para JFFS2
    if [ ! -f fs/jffs2/jffs2_format_fix.h ]; then
        cat > fs/jffs2/jffs2_format_fix.h << 'EOF'
/*
 * JFFS2 Format Warning Fixes for PostmarketOS/GCC 15+
 */
#ifndef JFFS2_FORMAT_FIX_H
#define JFFS2_FORMAT_FIX_H

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat"
#pragma GCC diagnostic ignored "-Wformat-overflow"
#pragma GCC diagnostic ignored "-Wformat-truncation"
#pragma GCC diagnostic ignored "-Wformat-security"
#pragma GCC diagnostic ignored "-Wformat-nonliteral"

#endif /* JFFS2_FORMAT_FIX_H */
EOF
    fi

    # Aplicar o header em arquivos JFFS2 problemáticos
    for jffs2_file in fs/jffs2/wbuf.c fs/jffs2/scan.c fs/jffs2/readinode.c fs/jffs2/gc.c fs/jffs2/erase.c; do
        if [ -f "$jffs2_file" ]; then
            if ! grep -q "jffs2_format_fix.h" "$jffs2_file"; then
                _log "Aplicando correção de formato em $jffs2_file..."
                sed -i '1i\
#include "jffs2_format_fix.h"' "$jffs2_file"

                # Adicionar restore no final do arquivo
                echo -e '\n#pragma GCC diagnostic pop' >> "$jffs2_file"
            fi
        fi
    done

    _log "Correções aplicadas via código"
}

_detect_cross_compiler() {
    local compilers="arm-none-eabi-gcc armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc"

    for compiler in $compilers; do
        if command -v "$compiler" >/dev/null 2>&1; then
            export CROSS_COMPILE="${compiler%-gcc}-"
            _log "Usando $compiler"
            return 0
        fi
    done

    _die "Nenhum compilador cruzado ARM encontrado!"
}

_setup_gcc15_environment() {
    _log "Configurando ambiente para GCC 15+ com ARM v7..."

    # Limpar flags conflitantes
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS

    export ARCH=arm
    export SUBARCH=arm

    # Evitar redefinições
    unset __LINUX_ARM_ARCH__

    # CRÍTICO: Forçar arquitetura ARM v7 para Cortex-A7 (MSM8226)
    export ARM_ARCH="armv7-a"
    export CPU_TYPE="cortex-a7"

    # Host flags mais conservadores
    export HOSTCC="gcc"
    export HOSTCXX="g++"
    export HOSTCFLAGS="-fgnu89-inline -std=gnu89 -O2 -static -w"
    export HOSTCXXFLAGS="-fgnu89-inline -O2 -static -w"
    export HOSTLDFLAGS="-static"

    # Kernel flags com arquitetura ARM v7 específica
    local base_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing -fno-common"
    local warning_flags="-w -Wno-error"
    local compat_flags="-fgnu89-inline -fno-strict-overflow -fconserve-stack"
    local gcc15_flags="-fno-PIE -fno-pic -no-pie"
    # NOVO: Flags específicos para ARM v7
    local arm_flags="-march=armv7-a -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=softfp"
    arm_flags="$arm_flags -marm -mno-thumb-interwork"

    export KCFLAGS="$base_flags $warning_flags $compat_flags $gcc15_flags $arm_flags"

    # Assembly flags com suporte ARM v7
    export AFLAGS="-Wa,-march=armv7-a -Wa,-mcpu=cortex-a7 -Wa,--noexecstack"
    export KBUILD_AFLAGS="$AFLAGS"
    export KBUILD_CFLAGS="$KCFLAGS"

    # Forçar versões fixas
    export KERNELRELEASE="3.4.113"
    export UTS_RELEASE="3.4.113"

    # Flags adicionais para evitar conflitos
    export EXTRA_CFLAGS="-Wno-macro-redefined -D__LINUX_ARM_ARCH__=7"
    export KBUILD_CPPFLAGS="-D__LINUX_ARM_ARCH__=7"

    _log "Ambiente ARM v7 configurado para Cortex-A7"
}

prepare() {
    cd "$builddir"
    _log "Preparando kernel Matisse3G..."

    # 1. Configurar ambiente (ordem importante!)
    _detect_cross_compiler
    _setup_gcc15_environment

    # 2. Aplicar patches disponíveis primeiro
    _log "Aplicando patches disponíveis..."
    for patch in $source; do
        case $patch in
            *.patch)
                if [ -f "$srcdir/$patch" ]; then
                    _log "Aplicando $patch..."
                    patch -p1 -i "$srcdir/$patch" || _log "AVISO: $patch falhou"
                fi
                ;;
        esac
    done

    # 3. Aplicar correções via código (incluindo fix do __LINUX_ARM_ARCH__)
    _apply_code_fixes

    # 4. Configuração
    if [ -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        cp "$srcdir/config-samsung-matisse3g.armv7" .config
    fi

    # 5. Criar arquivos necessários
    mkdir -p include/generated include/config scripts/basic scripts/kconfig
    echo '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    echo '/* Auto generated */' > include/generated/autoconf.h
    touch include/generated/bounds.h
    touch include/generated/asm-offsets.h

    # 6. Preparar build com flags conservadores
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         scripts_basic 2>/dev/null || _log "AVISO: scripts_basic falhou"

    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" \
         defconfig 2>/dev/null || _log "Usando configuração existente"

    _log "Preparação concluída"
}

build() {
    cd "$builddir"
    _log "Compilando kernel com supressão agressiva de warnings..."

    # Proteger utsrelease.h
    if [ -f include/generated/utsrelease.h ]; then
        chmod 444 include/generated/utsrelease.h
    fi

    # Compilar com flags mais agressivos para suprimir warnings
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS -w" \
         KERNELRELEASE="$KERNELRELEASE" UTS_RELEASE="$UTS_RELEASE" \
         -j$(nproc) zImage 2>&1 | grep -E "(error:|Error:|ERROR:|fatal)" || true

    # Verificar se zImage foi criado
    if [ ! -f arch/arm/boot/zImage ]; then
        _die "zImage não foi criado"
    fi

    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC="$HOSTCC" HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS -w" \
         KERNELRELEASE="$KERNELRELEASE" UTS_RELEASE="$UTS_RELEASE" \
         -j$(nproc) modules 2>&1 | grep -E "(error:|Error:|ERROR:|fatal)" || _log "Módulos compilados (com avisos)"

    _log "Compilação concluída com sucesso!"
}

package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"

    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" \
         ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         modules_install 2>/dev/null || _log "AVISO: Módulos falharam"

    if [ -d arch/arm/boot/dts ]; then
        dtb_count=$(find arch/arm/boot/dts -name "*.dtb" 2>/dev/null | wc -l)
        if [ "$dtb_count" -gt 0 ]; then
            mkdir -p "$pkgdir/boot/dtbs-$_flavor"
            find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null
        fi
    fi

    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz" || true

    _log "Empacotamento concluído"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
0c9e4fa526d029046264d17b845e3a0e8d52dd5cbd5ec2928292ccf22b89dca61735de51666445954e5793d28f77855c177c7f700bc7f712f4f753fab2683713  config-samsung-matisse3g.armv7
f3bbc54d1c3433310f701c0da130c165d8baab29d924ad90a7021c40818e767066c10b6c2467b97d92b43191a7d0e1bb389dc056463263c14347e9e4582ae0ca  01-fix-timex-header.patch
726321e16d16edad715abd4bc83e9f546902e11b5d2c5f5ab1b7076872ad0fceee85d2e512e8007a78c0a956b3454b239b9a844149a87094a342d91030972889  03-fix-defconfig.patch
7462871c23903b5b061117757adb82da2e80caeadf44f941686ca1bba8c67a337d5d1ffdf94350cdd964ecc7651adec6770cc0801e18e60872b72490e917fa02  04-fix-jffs2-format-warnings.patch
"
