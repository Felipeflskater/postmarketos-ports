# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=12
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - Otimizado para PostmarketOS"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="
	bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex
	gmp-dev installkernel linux-headers mpc1-dev mpfr-dev
	perl python3 sed xz gcc-arm-none-eabi
"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-vfp-assembly-syntax.patch
	02-fix-compiler-macros.patch
	03-fix-assembly-comments.patch
	04-fix-kbuild-headers.patch
	05-add-missing-defines.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

# ============ FUNÇÕES AUXILIARES ============
_log() {
    printf "\n[*] %s\n" "$1"
}

_die() {
    _log "ERRO: $1"
    exit 1
}

_detect_cross_compiler() {
    local compilers="arm-none-eabi-gcc arm-linux-gnueabihf-gcc arm-linux-gnu-gcc"

    for compiler in $compilers; do
        if command -v "$compiler" >/dev/null 2>&1; then
            export CROSS_COMPILE="${compiler%-gcc}-"
            _log "✓ Usando $compiler"
            return 0
        fi
    done

    _die "Nenhum compilador cruzado ARM encontrado!"
}

_setup_build_environment() {
    # Limpar flags conflitantes
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS

    export ARCH=arm
    export SUBARCH=arm

    # Flags otimizadas para kernel antigo
    local base_flags="-std=gnu89 -fno-stack-protector -fno-strict-aliasing -fno-common -fno-PIE"
    local warning_flags="-Wno-error -Wno-array-bounds -Wno-stringop-overflow -Wno-format-overflow"
    local compat_flags="-fgnu89-inline -fno-strict-overflow -fconserve-stack"
    local asm_flags="-Wa,--fatal-warnings -Wa,--noexecstack"

    export HOSTCFLAGS="$base_flags $warning_flags $compat_flags"
    export HOSTLDFLAGS="-no-pie"
    export KCFLAGS="$base_flags $warning_flags $compat_flags"
    export AFLAGS="$asm_flags"
    export KBUILD_AFLAGS="$asm_flags"
    export LDFLAGS=""

    _log "✓ Ambiente de compilação configurado"
}

_apply_config_fixes() {
    _log "Aplicando correções de configuração..."

    # Adicionar configurações específicas
    cat >> .config << 'EOF'

# ============ CORREÇÕES MATISSE3G ============
CONFIG_MSM_SPM_REGULATOR=n
CONFIG_ARCH_MSM8610=n
CONFIG_MSM8610_DEVICE=n
CONFIG_ARCH_RANDOM=n
CONFIG_GENERIC_TIME_VSYSCALL=y
CONFIG_MATISSE_3G=y
CONFIG_ARCH_MSM8226=y
CONFIG_MSM_SMD=y

# ============ VFP OTIMIZADO ============
CONFIG_VFP=y
CONFIG_VFPv3=y
CONFIG_NEON=y
CONFIG_ARM_UNWIND=y

# ============ DESABILITAR PROBLEMÁTICOS ============
CONFIG_WERROR=n
CONFIG_MODVERSIONS=n
CONFIG_DEBUG_INFO=n
CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=n

# ============ PREEMPTION ============
CONFIG_PREEMPT_NONE=y
CONFIG_PREEMPT_VOLUNTARY=n
CONFIG_PREEMPT=n
EOF

    # Remover configurações conflitantes
    sed -i 's/CONFIG_MSM_SPM_REGULATOR=y/CONFIG_MSM_SPM_REGULATOR=n/' .config

    _log "✓ Configurações corrigidas"
}

_test_critical_build() {
    _log "Testando componentes críticos..."

    # Testar VFP especificamente
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" V=1 \
         HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         arch/arm/vfp/entry.o || _die "Falha na compilação do VFP"

    # Testar asm-offsets
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" V=1 \
         HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         arch/arm/kernel/asm-offsets.s || _die "Falha no asm-offsets"

    _log "✓ Componentes críticos OK"
}

# ============ PREPARE ============
prepare() {
    cd "$builddir"
    _log "Preparando kernel Matisse3G - BUILD SIMPLIFICADO"

    # Detectar compilador
    _detect_cross_compiler

    # Configurar ambiente
    _setup_build_environment

    # Aplicar patches (automático via abuild)
    default_prepare

    # Aplicar configuração
    if [ ! -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        _die "Arquivo de configuração não encontrado"
    fi

    cp "$srcdir/config-samsung-matisse3g.armv7" .config
    _apply_config_fixes

    # Configuração automatizada
    _log "Executando configuração automatizada..."
    printf "n\ny\n" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
                           HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" \
                           oldconfig || make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
                                            HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" \
                                            olddefconfig || _die "Configuração falhou"

    # Preparar build
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
         prepare || _die "Preparação falhou"

    _log "✓ Preparação concluída"
}

# ============ BUILD ============
build() {
    cd "$builddir"
    _log "Iniciando compilação..."

    # Configurar ambiente
    _setup_build_environment

    # Testar componentes críticos primeiro
    _test_critical_build

    # Limpeza parcial
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" clean || true

    # Compilar zImage
    _log "Compilando zImage..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" LDFLAGS="$LDFLAGS" \
         -j$(nproc) zImage || _die "Falha na compilação do zImage"

    # Compilar módulos
    _log "Compilando módulos..."
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCFLAGS="$HOSTCFLAGS" HOSTLDFLAGS="$HOSTLDFLAGS" \
         KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" LDFLAGS="$LDFLAGS" \
         -j$(nproc) modules || _log "AVISO: Alguns módulos falharam"

    # Compilar DTBs se existirem
    if find arch/arm/boot/dts -name "*.dts" 2>/dev/null | grep -q "msm8226\|matisse"; then
        _log "Compilando Device Tree Blobs..."
        make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
             HOSTCFLAGS="$HOSTCFLAGS" KCFLAGS="$KCFLAGS" AFLAGS="$AFLAGS" \
             dtbs || _log "AVISO: DTBs falharam"
    fi

    _log "✓ Compilação concluída"
}

# ============ PACKAGE ============
package() {
    cd "$builddir"
    _log "Empacotando kernel..."

    # Instalar módulos
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" \
         ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         modules_install || _log "AVISO: Módulos falharam"

    # Instalar kernel
    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"

    # Instalar DTBs
    if [ -d arch/arm/boot/dts ]; then
        dtb_count=$(find arch/arm/boot/dts -name "*.dtb" 2>/dev/null | wc -l)
        if [ "$dtb_count" -gt 0 ]; then
            _log "Instalando $dtb_count DTBs..."
            mkdir -p "$pkgdir/boot/dtbs-$_flavor"
            find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null || true
        fi
    fi

    # Link simbólico
    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz-samsung-matisse3g" || true

    # Informações da build
    cat > "$pkgdir/boot/kernel-info-$_flavor" << EOF
Kernel: $pkgver-$pkgrel
Data: $(date)
Fonte: $_commit
Compilador: $CROSS_COMPILE
Patches aplicados: VFP assembly, compiler macros, assembly comments, kbuild headers, missing defines
EOF

    _log "✓ Empacotamento concluído"
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
9bcc57e7a3de597dec583da93f5cab0200f48dc053eaeaeb499dab993f50c5a5af5639b14c3eaa04f72eb430df694a920613116e2b9008fab4da86ca92311606  config-samsung-matisse3g.armv7
56c15f47049ab547a6128a0e507ec1b198f14ab5881d88187212f0b05c40f860f8a9897e935e8f2229f2838c110ff9cefb2198e022e97ef25cbb095157547574  01-fix-vfp-assembly-syntax.patch
7f7546ecc15ac32d990a83849f3f890518dc71387522dfe3d8f02b6c7c4132c683e22caf850fdddd3399b749db4a356032d2c749e62fb0e029047e8660491b2b  02-fix-compiler-macros.patch
b1a59d5b307498bc250727fd01984593f5cbf2c1a975e10936c82bff672ba2e442883d614a422d0f18b373b55fac20ae4b5b4259c7403cd3c8d7d81c909b3fee  03-fix-assembly-comments.patch
18b2c9896cc530a8f14b1ed69a0a30f418eedf9de622ec0e052e305c1f6a679bef145b62dc5da3878766394605f77ec7b66a15f74459464fe61c81dff459ad7e  04-fix-kbuild-headers.patch
d278ddf44fdc49f3c8a97d660a3672e8ce9df89be13246b0c4c47c6249607e2364875ca5bd057989eece8bafa5f5601dd9ee4f871fcd9e49ef9554ded300259e  05-add-missing-defines.patch
"
