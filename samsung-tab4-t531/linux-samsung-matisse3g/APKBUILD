# Maintainer: Felipe Prestes Aranalde <felipe.aranalde@gmail.com>
pkgname=linux-samsung-matisse3g
pkgver=3.4.113
pkgrel=81
pkgdesc="Kernel Linux para Samsung Galaxy Tab 4 10.1 (SM-T531) - APKBUILD simplificado sem asm-offsets"
arch="armv7"
_flavor="samsung-matisse3g"
url="https://github.com/felipeflskater/android_kernel_samsung_msm8226"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
makedepends="bash bc bison devicepkg-dev dtbtool elfutils-dev findutils flex gmp-dev installkernel linux-headers mpc1-dev mpfr-dev perl python3 sed xz gcc-arm-none-eabi"

_commit="pmos-matisse3g-fixes"

source="
	$pkgname-$_commit.tar.gz::https://github.com/Felipeflskater/android_kernel_samsung_msm8226/archive/refs/heads/$_commit.tar.gz
	config-samsung-matisse3g.armv7
	01-fix-timex-header.patch
	03-fix-defconfig.patch
	04-fix-jffs2-format-warnings.patch
	05-fix-fundamental-headers.patch
	06-add-missing-byteorder-headers.patch
	07-fix-compiler-headers.patch
	08-fix-asm-offsets-simple.patch
	09-fix-memory-and-const.patch
	10-add-gcc15-conservative-flags.patch
	11-fix-irq-timer-definitions-v2.patch
	12-fix-proc-v7-assembly.patch
	13-fix-bool-redefinitions.patch
	14-fix-fs-build-errors.patch
	15-ultimate-macro-redefinition-fix.patch
	16-fix-ext4-strncpy-warnings.patch
	22-ultimate-all-offsets-final.patch
	23-fix-arm-architecture-detection.patch
	24-fix-devicetable-basic-types.patch
	25-fix-printf-macro.patch
	26-fix-string-header-inclusion.patch
	27-fix-fundamental-types-comprehensive.patch
	28-fix-asm-offsets-includes.patch
"
builddir="$srcdir/android_kernel_samsung_msm8226-$_commit"

prepare() {
    cd "$builddir"

    # Compilador
    for comp in armv7-alpine-linux-musleabihf-gcc arm-linux-gnueabihf-gcc arm-none-eabi-gcc; do
        if command -v "$comp" >/dev/null 2>&1; then
            export CROSS_COMPILE="${comp%-gcc}-"
            break
        fi
    done
    [ -z "$CROSS_COMPILE" ] && { echo "ERRO: Compilador não encontrado"; exit 1; }

    # Ambiente
    unset LDFLAGS CPPFLAGS CFLAGS CXXFLAGS KCFLAGS AFLAGS KBUILD_AFLAGS KBUILD_CFLAGS EXTRA_CFLAGS KBUILD_CPPFLAGS KBUILD_LDFLAGS
    export ARCH=arm SUBARCH=arm HOSTCC=gcc
    export HOSTCFLAGS="-O1 -w -std=gnu89 -D__LINUX_ARM_ARCH__=7 -DBITS_PER_LONG=32"
    export KBUILD_CFLAGS="-w -Wno-error -std=gnu89 -D__LINUX_ARM_ARCH__=7 -DBITS_PER_LONG=32"
    export EXTRA_CFLAGS="-w -Wno-error -D__LINUX_ARM_ARCH__=7 -DBITS_PER_LONG=32"
    export KBUILD_CPPFLAGS="-D__LINUX_ARM_ARCH__=7 -DBITS_PER_LONG=32"

    # Criar estruturas básicas
    mkdir -p include/linux include/asm-generic include/generated include/config scripts/basic scripts/mod
    mkdir -p arch/arm/include/mach arch/arm/include/generated/mach arch/arm/include/generated/asm

    # Headers básicos
    printf '%s\n' '#ifndef _LINUX_TYPES_H' '#define _LINUX_TYPES_H' '#ifndef __ASSEMBLY__' > include/linux/types.h
    printf '%s\n' 'typedef unsigned char u8;' 'typedef signed char s8;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned short u16;' 'typedef signed short s16;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int u32;' 'typedef signed int s32;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned long long u64;' 'typedef signed long long s64;' >> include/linux/types.h
    printf '%s\n' 'typedef u8 __u8; typedef s8 __s8; typedef u16 __u16; typedef s16 __s16;' >> include/linux/types.h
    printf '%s\n' 'typedef u32 __u32; typedef s32 __s32; typedef u64 __u64; typedef s64 __s64;' >> include/linux/types.h
    printf '%s\n' '#ifndef __SIZE_TYPE__' '#define __SIZE_TYPE__ unsigned long' '#endif' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned long kernel_ulong_t;' >> include/linux/types.h
    printf '%s\n' 'typedef __SIZE_TYPE__ __kernel_size_t;' >> include/linux/types.h
    printf '%s\n' 'typedef long __kernel_ssize_t;' >> include/linux/types.h
    printf '%s\n' 'typedef long __kernel_ptrdiff_t;' >> include/linux/types.h
    printf '%s\n' 'typedef long __kernel_time_t;' >> include/linux/types.h
    printf '%s\n' 'typedef long __kernel_suseconds_t;' >> include/linux/types.h
    printf '%s\n' 'typedef int __kernel_pid_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int __kernel_uid_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int __kernel_gid_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned long __kernel_ino_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int __kernel_mode_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned short __kernel_umode_t;' >> include/linux/types.h
    printf '%s\n' 'typedef long long __kernel_loff_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int __kernel_dev_t;' >> include/linux/types.h
    printf '%s\n' 'typedef __kernel_size_t size_t;' >> include/linux/types.h
    printf '%s\n' 'typedef __kernel_ssize_t ssize_t;' >> include/linux/types.h
    printf '%s\n' 'typedef __kernel_ptrdiff_t ptrdiff_t;' >> include/linux/types.h
    printf '%s\n' 'typedef __kernel_time_t time_t;' >> include/linux/types.h
    printf '%s\n' 'typedef __kernel_mode_t umode_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int dev_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned int gfp_t;' >> include/linux/types.h
    printf '%s\n' 'typedef long clock_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned long resource_size_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned long phys_addr_t;' >> include/linux/types.h
    printf '%s\n' 'typedef int clockid_t;' >> include/linux/types.h
    printf '%s\n' 'typedef unsigned char bool;' >> include/linux/types.h
    printf '%s\n' '#ifndef true' '#define true 1' '#endif' >> include/linux/types.h
    printf '%s\n' '#ifndef false' '#define false 0' '#endif' >> include/linux/types.h
    printf '%s\n' 'typedef struct { int counter; } atomic_t;' >> include/linux/types.h
    printf '%s\n' 'struct list_head { struct list_head *next, *prev; };' >> include/linux/types.h
    printf '%s\n' 'struct hlist_head { struct hlist_node *first; };' >> include/linux/types.h
    printf '%s\n' 'struct hlist_node { struct hlist_node *next, **pprev; };' >> include/linux/types.h
    printf '%s\n' '#ifndef BITS_PER_LONG' '#define BITS_PER_LONG 32' '#endif' >> include/linux/types.h
    printf '%s\n' '#define BITS_TO_LONGS(nr) (((nr) + BITS_PER_LONG - 1) / BITS_PER_LONG)' >> include/linux/types.h
    printf '%s\n' '#define NSEC_PER_USEC 1000L' '#define NSEC_PER_MSEC 1000000L' >> include/linux/types.h
    printf '%s\n' '#define USEC_PER_MSEC 1000L' '#define NSEC_PER_SEC 1000000000L' >> include/linux/types.h
    printf '%s\n' '#define USEC_PER_SEC 1000000L' '#define MSEC_PER_SEC 1000L' >> include/linux/types.h
    printf '%s\n' '#endif' '#endif' >> include/linux/types.h

    # stddef.h
    printf '%s\n' '#ifndef _LINUX_STDDEF_H' '#define _LINUX_STDDEF_H' > include/linux/stddef.h
    printf '%s\n' '#undef NULL' >> include/linux/stddef.h
    printf '%s\n' '#if defined(__cplusplus)' '#define NULL 0' '#else' '#define NULL ((void *)0)' '#endif' >> include/linux/stddef.h
    printf '%s\n' '#undef offsetof' >> include/linux/stddef.h
    printf '%s\n' '#ifdef __compiler_offsetof' >> include/linux/stddef.h
    printf '%s\n' '#define offsetof(TYPE,MEMBER) __compiler_offsetof(TYPE,MEMBER)' >> include/linux/stddef.h
    printf '%s\n' '#else' >> include/linux/stddef.h
    printf '%s\n' '#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)' >> include/linux/stddef.h
    printf '%s\n' '#endif' '#endif' >> include/linux/stddef.h

    # Compiler attributes
    printf '%s\n' '#ifndef __LINUX_COMPILER_ATTRIBUTES_H' '#define __LINUX_COMPILER_ATTRIBUTES_H' > include/linux/compiler-attributes.h
    printf '%s\n' '#ifdef __GNUC__' >> include/linux/compiler-attributes.h
    printf '%s\n' '# define __printf(a, b) __attribute__((format(printf, a, b)))' >> include/linux/compiler-attributes.h
    printf '%s\n' '# define __scanf(a, b) __attribute__((format(scanf, a, b)))' >> include/linux/compiler-attributes.h
    printf '%s\n' '# define __attribute_const__ __attribute__((__const__))' >> include/linux/compiler-attributes.h
    printf '%s\n' '# define __maybe_unused __attribute__((unused))' >> include/linux/compiler-attributes.h
    printf '%s\n' '#else' >> include/linux/compiler-attributes.h
    printf '%s\n' '# define __printf(a, b)' '# define __scanf(a, b)' >> include/linux/compiler-attributes.h
    printf '%s\n' '# define __attribute_const__' '# define __maybe_unused' >> include/linux/compiler-attributes.h
    printf '%s\n' '#endif' '#endif' >> include/linux/compiler-attributes.h

    # GCC headers
    for v in 14 15 16; do
        printf '%s\n' '#ifndef __LINUX_COMPILER_H' '#error "Include compiler.h"' '#endif' > include/linux/compiler-gcc${v}.h
        printf '%s\n' '#define __used __attribute__((__used__))' >> include/linux/compiler-gcc${v}.h
        printf '%s\n' '#define __must_check __attribute__((warn_unused_result))' >> include/linux/compiler-gcc${v}.h
        printf '%s\n' '#define __compiler_offsetof(a,b) __builtin_offsetof(a,b)' >> include/linux/compiler-gcc${v}.h
        printf '%s\n' '#ifndef __printf' >> include/linux/compiler-gcc${v}.h
        printf '%s\n' '#define __printf(a, b) __attribute__((format(printf, a, b)))' >> include/linux/compiler-gcc${v}.h
        printf '%s\n' '#endif' >> include/linux/compiler-gcc${v}.h
    done

    # Headers ARM
    printf '%s\n' '#ifndef __ASM_MACH_MEMORY_H' '#define __ASM_MACH_MEMORY_H' > arch/arm/include/mach/memory.h
    printf '%s\n' '#define PLAT_PHYS_OFFSET UL(0x00000000)' >> arch/arm/include/mach/memory.h
    printf '%s\n' '#define MAX_DMA_ADDRESS 0x40000000' >> arch/arm/include/mach/memory.h
    printf '%s\n' '#endif' >> arch/arm/include/mach/memory.h

    # Headers básicos gerados
    printf '%s\n' '#define UTS_RELEASE "3.4.113"' > include/generated/utsrelease.h
    printf '%s\n' '/* Auto generated */' > include/generated/autoconf.h
    printf '%s\n' '#define __LINUX_ARM_ARCH__ 7' >> include/generated/autoconf.h
    printf '%s\n' '#define BITS_PER_LONG 32' >> include/generated/autoconf.h
    printf '%s\n' '#define HZ 250' >> include/generated/autoconf.h
    printf '%s\n' '#define CLOCK_TICK_RATE 19200000' >> include/generated/autoconf.h

    printf '%s\n' '/* Empty asm-offsets.h */' > include/generated/asm-offsets.h
    touch include/generated/bounds.h

    # Aplicar patches
    local patches_applied=0
    echo "=== APLICANDO PATCHES ==="
    for p in $(echo "$source" | tr ' ' '\n' | grep '\.patch$' | sort -V); do
        if [ -f "$srcdir/$p" ]; then
            if patch -p1 -i "$srcdir/$p" >/dev/null 2>&1; then
                echo "✓ $p"
                patches_applied=$((patches_applied + 1))
            else
                echo "✗ $p (já aplicado ou conflito)"
            fi
        else
            echo "⚠ $p (não encontrado)"
        fi
    done
    echo "Patches aplicados: $patches_applied"

    # Config
    if [ -f "$srcdir/config-samsung-matisse3g.armv7" ]; then
        cp "$srcdir/config-samsung-matisse3g.armv7" .config
        echo "✓ Config copiada"
    fi

    # Build inicial do sistema
    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" scripts_basic >/dev/null 2>&1 || true
    yes "" | make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" oldconfig >/dev/null 2>&1 || true
}

build() {
    cd "$builddir"

    echo "=== VERIFICAÇÕES FINAIS ==="

    if grep -q "printf.*format" include/linux/compiler-gcc*.h 2>/dev/null; then
        echo "✓ __printf macro definido"
    else
        echo "✗ __printf macro ausente"
    fi

    if grep -q "__u32" scripts/mod/devicetable-offsets.c 2>/dev/null; then
        echo "✓ Tipos básicos definidos"
    else
        echo "✗ Tipos básicos ausentes"
    fi

    echo ""
    echo "=== INICIANDO BUILD ==="

    if ! timeout 3600 make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" \
         HOSTCC=gcc HOSTCFLAGS="$HOSTCFLAGS" KBUILD_CFLAGS="$KBUILD_CFLAGS" \
         EXTRA_CFLAGS="$EXTRA_CFLAGS" KBUILD_CPPFLAGS="$KBUILD_CPPFLAGS" \
         V=1 -j$(nproc) zImage 2>&1 | tee build.log; then

        echo ""
        echo "=== BUILD FALHOU - ANÁLISE ==="

        if grep -q "__printf.*expected declaration" build.log; then
            echo "ERRO: Problema com macro __printf ainda persiste"
        fi

        if grep -q "OFF_.*_undeclared" build.log; then
            echo "ERRO: Offsets de devicetable ainda ausentes"
        fi

        echo ""
        echo "=== CONTEXTO DO ERRO ==="
        grep -B2 -A2 -E "(error|Error|fatal)" build.log | head -20

        exit 1
    fi

    if [ -f arch/arm/boot/zImage ]; then
        local size=$(stat -c%s arch/arm/boot/zImage)
        echo "SUCCESS! zImage criado: $size bytes"
    else
        echo "ERRO: zImage não foi criado"
        exit 1
    fi

    make ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" modules >/dev/null 2>&1 || true
}

package() {
    cd "$builddir"

    install -Dm644 arch/arm/boot/zImage "$pkgdir/boot/vmlinuz-$_flavor"
    make DESTDIR="$pkgdir" INSTALL_MOD_PATH="$pkgdir" ARCH=arm CROSS_COMPILE="$CROSS_COMPILE" modules_install 2>/dev/null || true

    if [ -d arch/arm/boot/dts ]; then
        mkdir -p "$pkgdir/boot/dtbs-$_flavor"
        find arch/arm/boot/dts -name "*.dtb" -exec cp {} "$pkgdir/boot/dtbs-$_flavor/" \; 2>/dev/null || true
    fi

    mkdir -p "$pkgdir/boot"
    ln -sf "vmlinuz-$_flavor" "$pkgdir/boot/vmlinuz" || true
}

sha512sums="
7fa4253037e154e2f245e12b4d7999887d6fcf99c9e7d30601ecf53a2fe5d47f1a423dd9483dac9eec86b7e5a9daf0b48e8ddde7311cd091a66630ff0656bd45  linux-samsung-matisse3g-pmos-matisse3g-fixes.tar.gz
4eff4dab705a03c3ce5082b00469b1d8728f6cda27a5e79786cc9bdb299f8421d016c74b0aa3e3da39e6849ac39d962b5a11aa7794ba18c5a376161447147c31  config-samsung-matisse3g.armv7
f3bbc54d1c3433310f701c0da130c165d8baab29d924ad90a7021c40818e767066c10b6c2467b97d92b43191a7d0e1bb389dc056463263c14347e9e4582ae0ca  01-fix-timex-header.patch
726321e16d16edad715abd4bc83e9f546902e11b5d2c5f5ab1b7076872ad0fceee85d2e512e8007a78c0a956b3454b239b9a844149a87094a342d91030972889  03-fix-defconfig.patch
7462871c23903b5b061117757adb82da2e80caeadf44f941686ca1bba8c67a337d5d1ffdf94350cdd964ecc7651adec6770cc0801e18e60872b72490e917fa02  04-fix-jffs2-format-warnings.patch
ce5dd92a66e208c873919aea7f571b72bd7811482b7f846d9bb62e22da5eb7671e941168fc413ee87e2e434d96799843f3a5690789c460651d7120d72dfaf3e3  05-fix-fundamental-headers.patch
9cdd95f4701f1f659fdeb9aa51529d71c5f0102f6422cfbc6ef1d37b5f6071515be816bf825c7d84ed4fa118c26dc1871aed5a7721e64fb73db8ed5803f65581  06-add-missing-byteorder-headers.patch
ea9fd7ed6e4ad9f51cf8f852cabe13fe6d725f77f04cb9aff584844156f6355ac55aafed6ae6cfc94cc032c15830057867a08ce1acf2e4985aed8bba4010b132  07-fix-compiler-headers.patch
c0567e7c8f8458663296a6bdddac021dd8417055f2f17fa96c13ce39cf6502fffa23897eecac9911fce515f4f7f716d0ff394334fe6a36036c67832c378e0f43  08-fix-asm-offsets-simple.patch
7486b8f2841205e9988719a7cff4508965bd6b5808c57ab0ac3f31cdcdf297234cd3b7ab703c142513bca699d024026577ebbe720e8c2187d821a68808e86cd5  09-fix-memory-and-const.patch
c100588d2c68d4ca7564cfc5dfabe55d0ffef60d6d4bf3561b551db851ce472951ef3521ea2cad5099c65137bc230a5f17aaff81f95486ab8a0ff602114e6a24  10-add-gcc15-conservative-flags.patch
7380d8e468c4183230871ebc38cc5ef853adb59683774e7a7ced7430ee12bf5091b003197aa5af4028ddfc731e1b921f27e5e2e357023bb0ac82918d73fc612a  11-fix-irq-timer-definitions-v2.patch
235a13b089f624f65cf3533c8480fad10bc76bb322a2cdae93ca68115e3eb52a58a97b3dd2ee89cceb79185451d3a8599562d6188c2d172479e2a43846c51bdf  12-fix-proc-v7-assembly.patch
6d881eb39c17e38b829c8568bcb98960ef570a709731c6b3327c5130c3181cdc555adbd6bb3915a8d6d377c9268e1cc790a78a3a10b682a20d05ea9425f27721  13-fix-bool-redefinitions.patch
bcaf48edc68de62aeae3c97c0419ae7e78ac3d65ced9d08cb1d397561bc546de9f632c1f398c7b04a4f8326ea01238f3204efdd1f96db860f32122a96c2736d1  14-fix-fs-build-errors.patch
b31c13237d0f45bc9649be5915d0d37a9d40d3063d53f49b874481cb517d1bb5038af5071470f43ce07b160dcc2df60a65344bc49f9131ccaddab0dc4d55cdce  15-ultimate-macro-redefinition-fix.patch
068a2b50a9125c8cc23897910edffa3b08fdab5e082679e90937b9f984da8fb3b99d9a415fac9314cfeba85e9729bc0405875627a3b01aa36dfbe2a7f8821de2  16-fix-ext4-strncpy-warnings.patch
fa48d727a40e0b305bf6c824c0416d9494281b9a5bf00b54074da1ac72002aa4fd25e556bdfee83afc50085d1e424cecf258e5098d25ca654a6777b91dc40be3  22-ultimate-all-offsets-final.patch
e0bf78d0247d8969cae6c9b18fafddb53dfdcf08155b7c9dfa327ed0ca369f74c7d7801b03595464dba28a93e87c7010c6dce812cc016f67a876a80ae6528c59  23-fix-arm-architecture-detection.patch
bc7c43f87eec73705a993ff971cf159933e762b0f658a124cdfd717ebe577a063b1d9eac71c51356244f0d579e2afbe75d14b66890d175932eb05d9dc502ccee  24-fix-devicetable-basic-types.patch
413fb977d4b3cdcc219be6381d9635c2a81da4884754f0c3c2fed9781a1e0ff56aa9715c9b14d16d102a5841a63cdd65febe8c8fa2e3aacde5c96797cd0904c0  25-fix-printf-macro.patch
ede2e6c6460a01477b4ed8e8e768c758f40459c6e07ed6fc3609fcadb2d51f23d71fd8b0930a7e1fb6aa03156c2e0431690b1af4fe5b86750ad2f15006c9a005  26-fix-string-header-inclusion.patch
dcd2ab1e0e7d5a6484f6e278328003d2e8fe51aed94bc431b239cd7d63af9189b28d642b794804dfd3d95c9448c366958f25da88d6d9e9ed0befcbc15f4e2c7b  27-fix-fundamental-types-comprehensive.patch
3bbf210725fc2c835137cbe6c8f255961f724ec2ff6613d15c2168e19989031af7398ee41b0e726ddf2eb3653db38cdb8ccd028b183256874dba87dc69783a84  28-fix-asm-offsets-includes.patch
"
