--- a/include/linux/stddef.h
+++ b/include/linux/stddef.h
@@ -14,8 +14,16 @@ enum {
 };
 
 #undef NULL
+
+/* Forçar undefinição de macros problemáticas */
+#ifdef false
+#undef false
+#endif
+#ifdef true
+#undef true
+#endif
+
 #define false __kernel_false
 #define true  __kernel_true
 
 #if defined(__GNUC__) && !defined(__STRICT_ANSI__)
--- a/include/linux/types.h
+++ b/include/linux/types.h
@@ -24,8 +24,18 @@ typedef __kernel_gid32_t	gid_t;
 typedef __kernel_uid16_t        uid16_t;
 typedef __kernel_gid16_t        gid16_t;
 
+/* Proteção agressiva contra redefinições de bool */
+#ifdef bool
+#undef bool
+#endif
+#ifdef true
+#undef true
+#endif
+#ifdef false
+#undef false
+#endif
+
 typedef _Bool			bool;
 #define true			1
 #define false			0
 
--- a/Makefile
+++ b/Makefile
@@ -369,7 +369,7 @@ LDFLAGS_MODULE  =
 CFLAGS_KERNEL	=
 AFLAGS_KERNEL	=
 CFLAGS_GCOV	= -fprofile-arcs -ftest-coverage
-LINUXINCLUDE    := -I$(srctree)/arch/$(hdr-arch)/include -Iinclude \
+LINUXINCLUDE    := -I$(srctree)/arch/$(hdr-arch)/include -Iinclude -Utrue -Ufalse -Ubool \
                    $(if $(KBUILD_SRC), -I$(srctree)/include) \
                    -include $(srctree)/include/linux/kconfig.h
 
@@ -648,7 +648,7 @@ endif
 KBUILD_CFLAGS	+= $(call cc-option,-fno-strict-overflow)
 
 # conserve stack if available
-KBUILD_CFLAGS   += $(call cc-option,-fconserve-stack)
+KBUILD_CFLAGS   += $(call cc-option,-fconserve-stack) -Utrue -Ufalse -Ubool
 
 # use the deterministic mode of AR if available
 KBUILD_ARFLAGS := $(call ar-option,D)
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -80,7 +80,7 @@ endif
 
 # The filename Kbuild has precedence over Makefile
 kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
-kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
+kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
 include $(kbuild-file)
 
 # If the save-* variables changed error out
@@ -139,6 +139,8 @@ endif
 
 c_flags        = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
 		 -include $(srctree)/include/linux/kconfig.h                 \
+		 -Utrue -Ufalse -Ubool \
+		 -D__kernel_false=0 -D__kernel_true=1 \
 		 $(__c_flags) $(modkern_cflags) \
 		 -D"KBUILD_STR(s)=\#s" $(basename_flags) $(modname_flags)
 
--- a/fs/proc/page.c
+++ b/fs/proc/page.c
@@ -1,3 +1,12 @@
+/* Proteção agressiva contra redefinições */
+#ifdef true
+#undef true
+#endif
+#ifdef false
+#undef false  
+#endif
+#ifdef bool
+#undef bool
+#endif
 #include <linux/bootmem.h>
 #include <linux/compiler.h>
 #include <linux/fs.h>
--- a/fs/proc/kmsg.c
+++ b/fs/proc/kmsg.c
@@ -5,6 +5,15 @@
  * This file contains code for reading kernel messages from procfs
  */
 
+/* Proteção agressiva contra redefinições */
+#ifdef true
+#undef true
+#endif
+#ifdef false
+#undef false
+#endif
+#ifdef bool
+#undef bool
+#endif
 #include <linux/fs.h>
 #include <linux/init.h>
 #include <linux/proc_fs.h>
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -101,6 +101,10 @@ basename_flags = -D"KBUILD_BASENAME=KBUILD_STR($(call name-fix,$(basetarget)))"
 modname_flags  = $(if $(filter 1,$(words $(modname))),\
                  -D"KBUILD_MODNAME=KBUILD_STR($(call name-fix,$(modname)))")
 
+# Adicionar flags para prevenir redefinições
+orig_c_flags   = $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(KBUILD_SUBDIR_CCFLAGS) \
+                 $(ccflags-y) $(CFLAGS_$(basetarget).o) -Utrue -Ufalse -Ubool
+
 orig_c_flags   = $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(KBUILD_SUBDIR_CCFLAGS) \
                  $(ccflags-y) $(CFLAGS_$(basetarget).o)
 _c_flags       = $(filter-out $(CFLAGS_REMOVE_$(basetarget).o), $(orig_c_flags))