diff --git a/include/asm-generic/bitops/__fls.h b/include/asm-generic/bitops/__fls.h
index 1234567..abcdefg 100644
--- a/include/asm-generic/bitops/__fls.h
+++ b/include/asm-generic/bitops/__fls.h
@@ -1,6 +1,11 @@
 #ifndef _ASM_GENERIC_BITOPS___FLS_H_
 #define _ASM_GENERIC_BITOPS___FLS_H_
 
+/* PostmarketOS: Prevent .err directives */
+#ifdef __ASSEMBLY__
+#error "This header should not be included in assembly files"
+#endif
+
 #include <asm/types.h>
 
 /**
diff --git a/include/asm-generic/bitops/fls.h b/include/asm-generic/bitops/fls.h
index 1234567..abcdefg 100644
--- a/include/asm-generic/bitops/fls.h
+++ b/include/asm-generic/bitops/fls.h
@@ -1,6 +1,11 @@
 #ifndef _ASM_GENERIC_BITOPS_FLS_H_
 #define _ASM_GENERIC_BITOPS_FLS_H_
 
+/* PostmarketOS: Prevent .err directives */
+#ifdef __ASSEMBLY__
+#error "This header should not be included in assembly files"
+#endif
+
 /**
  * fls - find last (most-significant) bit set
  * @x: the word to search
diff --git a/arch/arm/include/asm/bitops.h b/arch/arm/include/asm/bitops.h
index 1234567..abcdefg 100644
--- a/arch/arm/include/asm/bitops.h
+++ b/arch/arm/include/asm/bitops.h
@@ -17,6 +17,11 @@
 #ifndef _ARM_BITOPS_H
 #define _ARM_BITOPS_H
 
+/* PostmarketOS: Assembly safety check */
+#ifdef __ASSEMBLY__
+#error "bitops.h should not be included in assembly files"
+#endif
+
 #ifdef __KERNEL__
 
 #ifndef _LINUX_BITOPS_H
@@ -340,10 +345,15 @@ static inline int fls(int x)
 
 #include <asm-generic/bitops/fls64.h>
 #include <asm-generic/bitops/sched.h>
+
+/* PostmarketOS: Safe include order */
+#ifndef BITS_PER_LONG
+#define BITS_PER_LONG 32
+#endif
+
 #include <asm-generic/bitops/hweight.h>
 #include <asm-generic/bitops/lock.h>
 
-#ifdef __KERNEL__
 #include <asm-generic/bitops/ext2-atomic-setbit.h>
 
 #endif /* __KERNEL__ */
diff --git a/arch/arm/include/asm/system.h b/arch/arm/include/asm/system.h
index 1234567..abcdefg 100644
--- a/arch/arm/include/asm/system.h
+++ b/arch/arm/include/asm/system.h
@@ -1,6 +1,15 @@
 #ifndef __ASM_ARM_SYSTEM_H
 #define __ASM_ARM_SYSTEM_H
 
+/* PostmarketOS: Prevent problematic includes in assembly */
+#ifdef __ASSEMBLY__
+/* Only include essential defines for assembly */
+#include <asm/ptrace.h>
+#define __exception	__attribute__((section(".exception.text")))
+#define __exception_irq_entry	__exception
+#else
+/* Full includes for C code */
+
 #ifdef __KERNEL__
 
 #include <linux/compiler.h>
@@ -216,6 +225,11 @@ extern unsigned int user_debug;
 #define vectors_high()	(0)
 #endif
 
+#define __exception	__attribute__((section(".exception.text")))
+#define __exception_irq_entry	__exception
+
+#endif /* __ASSEMBLY__ */
+
 #if __LINUX_ARM_ARCH__ >= 7 ||	\
 	(__LINUX_ARM_ARCH__ == 6 && defined(CONFIG_CPU_32v6K))
 #define sev()	__asm__ __volatile__ ("sev" : : : "memory")
@@ -231,9 +245,6 @@ extern unsigned int user_debug;
 #define dmb(x) __asm__ __volatile__ ("" : : : "memory")
 #endif
 
-#define __exception	__attribute__((section(".exception.text")))
-#define __exception_irq_entry	__exception
-
 #endif /* __KERNEL__ */
 
 #endif
diff --git a/arch/arm/kernel/entry-header.S b/arch/arm/kernel/entry-header.S
index 1234567..abcdefg 100644
--- a/arch/arm/kernel/entry-header.S
+++ b/arch/arm/kernel/entry-header.S
@@ -1,3 +1,10 @@
+/* PostmarketOS: Safe entry header */
+#include <asm/unified.h>
+
+.arm
+.syntax unified
+
+/* Original content */
 #include <asm/assembler.h>
 #include <asm/memory.h>
 #include <asm/glue-df.h>
@@ -60,6 +67,8 @@
  * context switching.
  */
 	.macro	svc_entry, stack_hole=0
+	.arm			@ Force ARM mode
+	nop			@ Padding
  UNWIND(.fnstart		)
  UNWIND(.save {r0 - pc}		)
 	sub	sp, sp, #(S_FRAME_SIZE + \stack_hole - 4)
@@ -134,6 +143,8 @@
 
 	.macro	svc_exit, rpsr
 	msr	spsr_cxsf, \rpsr
+	.arm			@ Force ARM mode
+	nop			@ Padding
 #if defined(CONFIG_CPU_V6)
 	ldr	r0, [sp]
 	strex	r1, r2, [sp]			@ clear the exclusive monitor
@@ -200,6 +211,8 @@
 
 	.macro	usr_entry
  UNWIND(.fnstart	)
+	.arm			@ Force ARM mode
+	nop			@ Padding
  UNWIND(.cantunwind	)	@ Allow unwinding the user space
 	sub	sp, sp, #S_FRAME_SIZE
  ARM(	stmib	sp, {r1 - r12}	)
@@ -245,6 +258,8 @@
 	.endm
 
 	.macro	kuser_cmpxchg_check
+	.arm			@ Force ARM mode
+	nop			@ Padding
 #if !defined(CONFIG_CPU_32v6K) && !defined(CONFIG_NEEDS_SYSCALL_FOR_CMPXCHG)
 #ifndef CONFIG_MMU
 #warning "NPTL on non MMU needs fixing"
