--- a/scripts/mod/devicetable-offsets.c
+++ b/scripts/mod/devicetable-offsets.c
@@ -1,300 +1,120 @@
-#include <linux/kbuild.h>
-#include <linux/types.h>
-#include <linux/mod_devicetable.h>
-
-/* Definir tipos básicos necessários */
-#ifndef __u8
-typedef unsigned char __u8;
-#endif
-#ifndef __u16
-typedef unsigned short __u16;
-#endif
-#ifndef __u32
-typedef unsigned int __u32;
-#endif
-#ifndef kernel_ulong_t
-typedef unsigned long kernel_ulong_t;
-#endif
-
-/* Definir constantes necessárias */
-#ifndef BITS_PER_LONG
-#define BITS_PER_LONG 32
-#endif
-
-#ifndef INPUT_DEVICE_ID_EV_MAX
-#define INPUT_DEVICE_ID_EV_MAX 0x1f
-#endif
-
-#ifndef INPUT_DEVICE_ID_KEY_MAX
-#define INPUT_DEVICE_ID_KEY_MAX 0x2ff
-#endif
-
-#ifndef INPUT_DEVICE_ID_REL_MAX  
-#define INPUT_DEVICE_ID_REL_MAX 0x0f
-#endif
-
-#ifndef INPUT_DEVICE_ID_ABS_MAX
-#define INPUT_DEVICE_ID_ABS_MAX 0x3f
-#endif
-
-#ifndef INPUT_DEVICE_ID_MSC_MAX
-#define INPUT_DEVICE_ID_MSC_MAX 0x07
-#endif
-
-#ifndef INPUT_DEVICE_ID_LED_MAX
-#define INPUT_DEVICE_ID_LED_MAX 0x0f
-#endif
-
-#ifndef INPUT_DEVICE_ID_SND_MAX
-#define INPUT_DEVICE_ID_SND_MAX 0x07
-#endif
-
-#ifndef INPUT_DEVICE_ID_FF_MAX
-#define INPUT_DEVICE_ID_FF_MAX 0x7f
-#endif
-
-#ifndef INPUT_DEVICE_ID_SW_MAX
-#define INPUT_DEVICE_ID_SW_MAX 0x0f
-#endif
-
-/* Definir DEVID para estruturas simples */
-#define DEVID(devid) DEFINE(SIZE_##devid, sizeof(struct devid))
-
-/* Definir DEVID_FIELD usando offset manual calculado */
-#define DEVID_FIELD(devid, field) DEFINE(OFF_##devid##_##field, __builtin_offsetof(struct devid, field))
-
-int main(void)
-{
-    /* PCI device */
-    DEVID(pci_device_id);
-    DEVID_FIELD(pci_device_id, vendor);
-    DEVID_FIELD(pci_device_id, device);
-    DEVID_FIELD(pci_device_id, subvendor);
-    DEVID_FIELD(pci_device_id, subdevice);
-    DEVID_FIELD(pci_device_id, class);
-    DEVID_FIELD(pci_device_id, class_mask);
-
-    /* USB device */
-    DEVID(usb_device_id);
-    DEVID_FIELD(usb_device_id, match_flags);
-    DEVID_FIELD(usb_device_id, idVendor);
-    DEVID_FIELD(usb_device_id, idProduct);
-    DEVID_FIELD(usb_device_id, bcdDevice_lo);
-    DEVID_FIELD(usb_device_id, bcdDevice_hi);
-    DEVID_FIELD(usb_device_id, bDeviceClass);
-    DEVID_FIELD(usb_device_id, bDeviceSubClass);
-    DEVID_FIELD(usb_device_id, bDeviceProtocol);
-    DEVID_FIELD(usb_device_id, bInterfaceClass);
-    DEVID_FIELD(usb_device_id, bInterfaceSubClass);
-    DEVID_FIELD(usb_device_id, bInterfaceProtocol);
-    DEVID_FIELD(usb_device_id, bInterfaceNumber);
-
-    /* HID device */
-    DEVID(hid_device_id);
-    DEVID_FIELD(hid_device_id, bus);
-    DEVID_FIELD(hid_device_id, group);
-    DEVID_FIELD(hid_device_id, vendor);
-    DEVID_FIELD(hid_device_id, product);
-
-    /* Input device - com tratamento especial para arrays */
-    DEVID(input_device_id);
-    DEVID_FIELD(input_device_id, flags);
-    DEVID_FIELD(input_device_id, bustype);
-    DEVID_FIELD(input_device_id, vendor);
-    DEVID_FIELD(input_device_id, product);
-    DEVID_FIELD(input_device_id, version);
-    DEVID_FIELD(input_device_id, evbit);
-    DEVID_FIELD(input_device_id, keybit);
-    DEVID_FIELD(input_device_id, relbit);
-    DEVID_FIELD(input_device_id, absbit);
-    DEVID_FIELD(input_device_id, mscbit);
-    DEVID_FIELD(input_device_id, ledbit);
-    DEVID_FIELD(input_device_id, sndbit);
-    DEVID_FIELD(input_device_id, ffbit);
-    DEVID_FIELD(input_device_id, swbit);
-
-    /* Platform device */
-    DEVID(platform_device_id);
-    DEVID_FIELD(platform_device_id, name);
-
-    /* I2C device */
-    DEVID(i2c_device_id);
-    DEVID_FIELD(i2c_device_id, name);
-
-    /* SPI device */
-    DEVID(spi_device_id);
-    DEVID_FIELD(spi_device_id, name);
-
-    /* DMI system */
-    DEVID(dmi_system_id);
-    DEVID_FIELD(dmi_system_id, matches);
-
-    /* MDIO device */
-    DEVID(mdio_device_id);
-    DEVID_FIELD(mdio_device_id, phy_id);
-    DEVID_FIELD(mdio_device_id, phy_id_mask);
-
-    /* Zorro device */
-    DEVID(zorro_device_id);
-    DEVID_FIELD(zorro_device_id, id);
-
-    /* ISA PnP device */
-    DEVID(isapnp_device_id);
-    DEVID_FIELD(isapnp_device_id, vendor);
-    DEVID_FIELD(isapnp_device_id, function);
-
-    /* AMBA device */
-    DEVID(amba_id);
-    DEVID_FIELD(amba_id, id);
-    DEVID_FIELD(amba_id, mask);
-
-    /* x86 CPU */
-    DEVID(x86_cpu_id);
-    DEVID_FIELD(x86_cpu_id, feature);
-    DEVID_FIELD(x86_cpu_id, family);
-    DEVID_FIELD(x86_cpu_id, model);
-    DEVID_FIELD(x86_cpu_id, vendor);
-
-    /* OF device */
-    DEVID(of_device_id);
-    DEVID_FIELD(of_device_id, name);
-    DEVID_FIELD(of_device_id, type);
-    DEVID_FIELD(of_device_id, compatible);
-
-    /* VirtIO device */
-    DEVID(virtio_device_id);
-    DEVID_FIELD(virtio_device_id, device);
-    DEVID_FIELD(virtio_device_id, vendor);
-
-    /* VMBus device */
-    DEVID(hv_vmbus_device_id);
-    DEVID_FIELD(hv_vmbus_device_id, guid);
-
-    /* Definições condicionais para dispositivos que podem não existir */
-#ifdef CONFIG_IEEE1394
-    DEVID(ieee1394_device_id);
-    DEVID_FIELD(ieee1394_device_id, match_flags);
-    DEVID_FIELD(ieee1394_device_id, vendor_id);
-    DEVID_FIELD(ieee1394_device_id, model_id);
-    DEVID_FIELD(ieee1394_device_id, specifier_id);
-    DEVID_FIELD(ieee1394_device_id, version);
-#else
-    /* Definições vazias para evitar erros */
-    DEFINE(SIZE_ieee1394_device_id, 0);
-#endif
-
-#ifdef CONFIG_CCW
-    DEVID(ccw_device_id);
-    DEVID_FIELD(ccw_device_id, match_flags);
-    DEVID_FIELD(ccw_device_id, cu_type);
-    DEVID_FIELD(ccw_device_id, cu_model);
-    DEVID_FIELD(ccw_device_id, dev_type);
-    DEVID_FIELD(ccw_device_id, dev_model);
-#else
-    DEFINE(SIZE_ccw_device_id, 0);
-#endif
-
-#ifdef CONFIG_ZCRYPT
-    DEVID(ap_device_id);
-    DEVID_FIELD(ap_device_id, dev_type);
-#else
-    DEFINE(SIZE_ap_device_id, 0);
-#endif
-
-#ifdef CONFIG_CSS
-    DEVID(css_device_id);
-    DEVID_FIELD(css_device_id, type);
-#else
-    DEFINE(SIZE_css_device_id, 0);
-#endif
-
-#ifdef CONFIG_SERIO
-    DEVID(serio_device_id);
-    DEVID_FIELD(serio_device_id, type);
-    DEVID_FIELD(serio_device_id, proto);
-    DEVID_FIELD(serio_device_id, id);
-    DEVID_FIELD(serio_device_id, extra);
-#else
-    DEFINE(SIZE_serio_device_id, 0);
-#endif
-
-#ifdef CONFIG_ACPI
-    DEVID(acpi_device_id);
-    DEVID_FIELD(acpi_device_id, id);
-#else
-    DEFINE(SIZE_acpi_device_id, 0);
-#endif
-
-#ifdef CONFIG_PNP
-    DEVID(pnp_device_id);
-    DEVID_FIELD(pnp_device_id, id);
-    DEVID(pnp_card_device_id);
-    DEVID_FIELD(pnp_card_device_id, devs);
-#else
-    DEFINE(SIZE_pnp_device_id, 0);
-    DEFINE(SIZE_pnp_card_device_id, 0);
-#endif
-
-#ifdef CONFIG_PCMCIA
-    DEVID(pcmcia_device_id);
-    DEVID_FIELD(pcmcia_device_id, match_flags);
-    DEVID_FIELD(pcmcia_device_id, manf_id);
-    DEVID_FIELD(pcmcia_device_id, card_id);
-    DEVID_FIELD(pcmcia_device_id, func_id);
-    DEVID_FIELD(pcmcia_device_id, function);
-    DEVID_FIELD(pcmcia_device_id, device_no);
-    DEVID_FIELD(pcmcia_device_id, prod_id_hash);
-#else
-    DEFINE(SIZE_pcmcia_device_id, 0);
-#endif
-
-#ifdef CONFIG_VIO
-    DEVID(vio_device_id);
-    DEVID_FIELD(vio_device_id, type);
-    DEVID_FIELD(vio_device_id, compat);
-#else
-    DEFINE(SIZE_vio_device_id, 0);
-#endif
-
-#ifdef CONFIG_EISA
-    DEVID(eisa_device_id);
-    DEVID_FIELD(eisa_device_id, sig);
-#else
-    DEFINE(SIZE_eisa_device_id, 0);
-#endif
-
-#ifdef CONFIG_PARISC
-    DEVID(parisc_device_id);
-    DEVID_FIELD(parisc_device_id, hw_type);
-    DEVID_FIELD(parisc_device_id, hversion);
-    DEVID_FIELD(parisc_device_id, hversion_rev);
-    DEVID_FIELD(parisc_device_id, sversion);
-#else
-    DEFINE(SIZE_parisc_device_id, 0);
-#endif
-
-#ifdef CONFIG_MMC
-    DEVID(sdio_device_id);
-    DEVID_FIELD(sdio_device_id, class);
-    DEVID_FIELD(sdio_device_id, vendor);
-    DEVID_FIELD(sdio_device_id, device);
-#else
-    DEFINE(SIZE_sdio_device_id, 0);
-#endif
-
-#ifdef CONFIG_SSB
-    DEVID(ssb_device_id);
-    DEVID_FIELD(ssb_device_id, vendor);
-    DEVID_FIELD(ssb_device_id, coreid);
-    DEVID_FIELD(ssb_device_id, revision);
-#else
-    DEFINE(SIZE_ssb_device_id, 0);
-#endif
-
-#ifdef CONFIG_BCMA
-    DEVID(bcma_device_id);
-    DEVID_FIELD(bcma_device_id, manuf);
-    DEVID_FIELD(bcma_device_id, id);
-    DEVID_FIELD(bcma_device_id, rev);
-    DEVID_FIELD(bcma_device_id, class);
-#else
-    DEFINE(SIZE_bcma_device_id, 0);
-#endif
-
-    return 0;
-}
+/*
+ * Device table offsets - SIMPLIFIED for kernel 3.4.x
+ * This file generates the SIZE_ and OFF_ constants needed by file2alias.c
+ */
+#include <linux/kbuild.h>
+#include <linux/mod_devicetable.h>
+
+#define DEVID(devid) DEFINE(SIZE_##devid, sizeof(struct devid))
+#define DEVID_FIELD(devid, field) DEFINE(OFF_##devid##_##field, offsetof(struct devid, field))
+
+int
+main(void)
+{
+	DEVID(pci_device_id);
+	DEVID_FIELD(pci_device_id, vendor);
+	DEVID_FIELD(pci_device_id, device);
+	DEVID_FIELD(pci_device_id, subvendor);
+	DEVID_FIELD(pci_device_id, subdevice);
+	DEVID_FIELD(pci_device_id, class);
+	DEVID_FIELD(pci_device_id, class_mask);
+
+	DEVID(usb_device_id);
+	DEVID_FIELD(usb_device_id, match_flags);
+	DEVID_FIELD(usb_device_id, idVendor);
+	DEVID_FIELD(usb_device_id, idProduct);
+	DEVID_FIELD(usb_device_id, bcdDevice_lo);
+	DEVID_FIELD(usb_device_id, bcdDevice_hi);
+	DEVID_FIELD(usb_device_id, bDeviceClass);
+	DEVID_FIELD(usb_device_id, bDeviceSubClass);
+	DEVID_FIELD(usb_device_id, bDeviceProtocol);
+	DEVID_FIELD(usb_device_id, bInterfaceClass);
+	DEVID_FIELD(usb_device_id, bInterfaceSubClass);
+	DEVID_FIELD(usb_device_id, bInterfaceProtocol);
+	DEVID_FIELD(usb_device_id, bInterfaceNumber);
+
+	DEVID(hid_device_id);
+	DEVID_FIELD(hid_device_id, bus);
+	DEVID_FIELD(hid_device_id, group);
+	DEVID_FIELD(hid_device_id, vendor);
+	DEVID_FIELD(hid_device_id, product);
+
+	DEVID(input_device_id);
+	DEVID_FIELD(input_device_id, flags);
+	DEVID_FIELD(input_device_id, bustype);
+	DEVID_FIELD(input_device_id, vendor);
+	DEVID_FIELD(input_device_id, product);
+	DEVID_FIELD(input_device_id, version);
+	DEVID_FIELD(input_device_id, evbit);
+	DEVID_FIELD(input_device_id, keybit);
+	DEVID_FIELD(input_device_id, relbit);
+	DEVID_FIELD(input_device_id, absbit);
+	DEVID_FIELD(input_device_id, mscbit);
+	DEVID_FIELD(input_device_id, ledbit);
+	DEVID_FIELD(input_device_id, sndbit);
+	DEVID_FIELD(input_device_id, ffbit);
+	DEVID_FIELD(input_device_id, swbit);
+
+	DEVID(platform_device_id);
+	DEVID_FIELD(platform_device_id, name);
+
+	DEVID(i2c_device_id);
+	DEVID_FIELD(i2c_device_id, name);
+
+	DEVID(spi_device_id);
+	DEVID_FIELD(spi_device_id, name);
+
+	DEVID(dmi_system_id);
+	DEVID_FIELD(dmi_system_id, matches);
+
+	DEVID(mdio_device_id);
+	DEVID_FIELD(mdio_device_id, phy_id);
+	DEVID_FIELD(mdio_device_id, phy_id_mask);
+
+	DEVID(zorro_device_id);
+	DEVID_FIELD(zorro_device_id, id);
+
+	DEVID(isapnp_device_id);
+	DEVID_FIELD(isapnp_device_id, vendor);
+	DEVID_FIELD(isapnp_device_id, function);
+
+	DEVID(amba_id);
+	DEVID_FIELD(amba_id, id);
+	DEVID_FIELD(amba_id, mask);
+
+	DEVID(x86_cpu_id);
+	DEVID_FIELD(x86_cpu_id, feature);
+	DEVID_FIELD(x86_cpu_id, family);
+	DEVID_FIELD(x86_cpu_id, model);
+	DEVID_FIELD(x86_cpu_id, vendor);
+
+	DEVID(of_device_id);
+	DEVID_FIELD(of_device_id, name);
+	DEVID_FIELD(of_device_id, type);
+	DEVID_FIELD(of_device_id, compatible);
+
+	DEVID(virtio_device_id);
+	DEVID_FIELD(virtio_device_id, device);
+	DEVID_FIELD(virtio_device_id, vendor);
+
+	DEVID(hv_vmbus_device_id);
+	DEVID_FIELD(hv_vmbus_device_id, guid);
+
+	/* Empty definitions for optional devices to avoid link errors */
+	DEFINE(SIZE_ieee1394_device_id, 0);
+	DEFINE(SIZE_ccw_device_id, 0);
+	DEFINE(SIZE_ap_device_id, 0);
+	DEFINE(SIZE_css_device_id, 0);
+	DEFINE(SIZE_serio_device_id, 0);
+	DEFINE(SIZE_acpi_device_id, 0);
+	DEFINE(SIZE_pnp_device_id, 0);
+	DEFINE(SIZE_pnp_card_device_id, 0);
+	DEFINE(SIZE_pcmcia_device_id, 0);
+	DEFINE(SIZE_vio_device_id, 0);
+	DEFINE(SIZE_eisa_device_id, 0);
+	DEFINE(SIZE_parisc_device_id, 0);
+	DEFINE(SIZE_sdio_device_id, 0);
+	DEFINE(SIZE_ssb_device_id, 0);
+	DEFINE(SIZE_bcma_device_id, 0);
+
+	return 0;
+}
