--- a/include/asm-generic/bug.h
+++ b/include/asm-generic/bug.h
@@ -3,6 +3,16 @@
 
 #include <linux/compiler.h>
 
+/* Fix para macro __printf com GCC moderno */
+#ifndef __printf
+#ifdef __GNUC__
+#define __printf(a, b) __attribute__((format(printf, a, b)))
+#else
+#define __printf(a, b)
+#endif
+#endif
+
+/* Protótipos das funções com __printf já definido */
 #ifdef CONFIG_BUG
 
 #ifdef CONFIG_GENERIC_BUG
@@ -61,10 +71,10 @@
 #ifndef __WARN_TAINT
 #ifndef __ASSEMBLY__
 extern __printf(3, 4)
-void warn_slowpath_fmt(const char *file, const int line,
+void warn_slowpath_fmt(const char *file, const int line, 
 		       const char *fmt, ...);
 extern __printf(4, 5)
-void warn_slowpath_fmt_taint(const char *file, const int line, unsigned taint,
+void warn_slowpath_fmt_taint(const char *file, const int line, unsigned taint, 
 			     const char *fmt, ...);
 extern void warn_slowpath_null(const char *file, const int line);
 #define __WARN()		warn_slowpath_null(__FILE__, __LINE__)
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -4,6 +4,15 @@
 #include <stdarg.h>
 #include <linux/init.h>
 #include <linux/kern_levels.h>
+#include <linux/compiler.h>
+
+/* Garantir que __printf está definido antes de usar */
+#ifndef __printf
+#ifdef __GNUC__
+#define __printf(a, b) __attribute__((format(printf, a, b)))
+#else
+#define __printf(a, b)
+#endif
 
 static inline int printk_get_level(const char *buffer)
 {
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -18,6 +18,15 @@
 #include <asm/byteorder.h>
 #include <asm/bug.h>
 
+/* Definir __printf antes de qualquer uso */
+#ifndef __printf
+#ifdef __GNUC__
+#define __printf(a, b) __attribute__((format(printf, a, b)))
+#else
+#define __printf(a, b)
+#endif
+#endif
+
 #define USHRT_MAX	((u16)(~0U))
 #define SHRT_MAX	((s16)(USHRT_MAX>>1))
 #define SHRT_MIN	((s16)(-SHRT_MAX - 1))
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -4,6 +4,15 @@
 
 #ifdef __CHECKER__
 # define __user		__attribute__((noderef, address_space(1)))
+
+/* Definições de atributos básicos */
+#ifndef __printf
+#ifdef __GNUC__
+#define __printf(a, b) __attribute__((format(printf, a, b)))
+#else
+#define __printf(a, b)
+#endif
+#endif
 # define __kernel	/* default address space */
 # define __safe		__attribute__((safe))
 # define __force	__attribute__((force))