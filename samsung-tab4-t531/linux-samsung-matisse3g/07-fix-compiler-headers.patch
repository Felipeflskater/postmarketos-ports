diff --git a/include/linux/compiler.h b/include/linux/compiler.h
index 1234567..abcdefg 100644
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -1,3 +1,77 @@
+#ifndef __LINUX_COMPILER_H
+#define __LINUX_COMPILER_H
+
+#ifndef __ASSEMBLY__
+
+#ifdef __CHECKER__
+# define __user		__attribute__((noderef, address_space(1)))
+# define __kernel	__attribute__((address_space(0)))
+# define __safe		__attribute__((safe))
+# define __force	__attribute__((force))
+# define __nocast	__attribute__((nocast))
+# define __iomem	__attribute__((noderef, address_space(2)))
+# define __acquires(x)	__attribute__((context(x,0,1)))
+# define __releases(x)	__attribute__((context(x,1,0)))
+# define __acquire(x)	__context__(x,1)
+# define __release(x)	__context__(x,-1)
+# define __cond_lock(x,c)	((c) ? ({ __acquire(x); 1; }) : 0)
+# define __percpu	__attribute__((noderef, address_space(3)))
+# define __rcu		__attribute__((noderef, address_space(4)))
+#else
+# define __user
+# define __kernel
+# define __safe
+# define __force
+# define __nocast
+# define __iomem
+# define __acquires(x)
+# define __releases(x)
+# define __acquire(x) (void)0
+# define __release(x) (void)0
+# define __cond_lock(x,c) (c)
+# define __percpu
+# define __rcu
+#endif
+
+#define ___PASTE(a,b) a##b
+#define __PASTE(a,b) ___PASTE(a,b)
+
+#define __deprecated		__attribute__((deprecated))
+#define __packed		__attribute__((packed))
+#define __weak			__attribute__((weak))
+#define __always_inline		inline __attribute__((always_inline))
+#define __pure			__attribute__((pure))
+#define __aligned(x)		__attribute__((aligned(x)))
+#define __printf(a, b)		__attribute__((format(printf, a, b)))
+#define __scanf(a, b)		__attribute__((format(scanf, a, b)))
+#define __attribute_const__	__attribute__((__const__))
+#define __maybe_unused		__attribute__((unused))
+#define __always_unused		__attribute__((unused))
+#define __used			__attribute__((__used__))
+#define __must_check		__attribute__((warn_unused_result))
+#define __cold			__attribute__((__cold__))
+#define __section(S)		__attribute__ ((__section__(#S)))
+#define __visible		__attribute__((externally_visible))
+
+#define likely(x)		__builtin_expect(!!(x), 1)
+#define unlikely(x)		__builtin_expect(!!(x), 0)
+
+#define barrier()		__asm__ __volatile__("": : :"memory")
+
+#ifndef noinline
+#define noinline		__attribute__((noinline))
+#endif
+
+#define noinline_for_stack	noinline
+#define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
+#define unreachable() do { __builtin_unreachable(); } while (0)
+
+#define RELOC_HIDE(ptr, off)	\
+  ({ unsigned long __ptr;	\
+     __ptr = (unsigned long) (ptr);	\
+    (typeof(ptr)) (__ptr + (off)); })
+
+#define __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_, prefix), __LINE__)
+
+#define __compiletime_warning(message)
+#define __compiletime_error(message)
+#define __compiletime_error_fallback(condition) do { } while (0)
+#define __compiletime_object_size(obj) -1
+#define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
+#define __native_word(t) (sizeof(t) == sizeof(int) || sizeof(t) == sizeof(long))
+
+#define __kprobes
+#define read_barrier_depends() do { } while (0)
+
+#endif /* __ASSEMBLY__ */
+#endif /* __LINUX_COMPILER_H */
diff --git a/include/linux/kbuild.h b/include/linux/kbuild.h
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/include/linux/kbuild.h
@@ -0,0 +1,15 @@
+#ifndef __LINUX_KBUILD_H
+#define __LINUX_KBUILD_H
+
+#define DEFINE(sym, val) \
+        __asm__ __volatile__("\n->" #sym " %0 " #val : : "i" (val))
+
+#define BLANK() \
+        __asm__ __volatile__("\n->" : : )
+
+#define OFFSET(sym, str, mem) \
+        DEFINE(sym, offsetof(struct str, mem))
+
+#define COMMENT(x) \
+        __asm__ __volatile__("\n->#" x)
+
+#endif
diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/include/linux/page-flags.h
@@ -0,0 +1,74 @@
+#ifndef PAGE_FLAGS_H
+#define PAGE_FLAGS_H
+
+#include <linux/types.h>
+
+enum pageflags {
+    PG_locked,
+    PG_error,
+    PG_referenced,
+    PG_uptodate,
+    PG_dirty,
+    PG_lru,
+    PG_active,
+    PG_slab,
+    PG_owner_priv_1,
+    PG_arch_1,
+    PG_reserved,
+    PG_private,
+    PG_private_2,
+    PG_writeback,
+    PG_head,
+    PG_tail,
+    PG_swapcache,
+    PG_mappedtodisk,
+    PG_reclaim,
+    PG_swapbacked,
+    PG_unevictable,
+    PG_mlocked,
+    PG_readahead,
+    __NR_PAGEFLAGS,
+};
+
+#ifndef __GENERATING_BOUNDS_H
+
+static inline int PageLocked(struct page *page) { return 0; }
+static inline int PageError(struct page *page) { return 0; }
+static inline int PageReferenced(struct page *page) { return 0; }
+static inline int PageUptodate(struct page *page) { return 1; }
+static inline int PageDirty(struct page *page) { return 0; }
+static inline int PageLRU(struct page *page) { return 0; }
+static inline int PageActive(struct page *page) { return 0; }
+static inline int PageSlab(struct page *page) { return 0; }
+static inline int PageReserved(struct page *page) { return 0; }
static inline int PagePrivate(struct page *page) { return 0; }
static inline int PageWriteback(struct page *page) { return 0; }
static inline int PageReadahead(struct page *page) { return 0; }

static inline void SetPageLocked(struct page *page) { }
static inline void SetPageError(struct page *page) { }
static inline void SetPageReferenced(struct page *page) { }
static inline void SetPageUptodate(struct page *page) { }
static inline void SetPageDirty(struct page *page) { }
static inline void SetPageLRU(struct page *page) { }
static inline void SetPageActive(struct page *page) { }
static inline void SetPageSlab(struct page *page) { }
static inline void SetPageReserved(struct page *page) { }
static inline void SetPagePrivate(struct page *page) { }
static inline void SetPageWriteback(struct page *page) { }

static inline void ClearPageLocked(struct page *page) { }
static inline void ClearPageError(struct page *page) { }
static inline void ClearPageReferenced(struct page *page) { }
static inline void ClearPageUptodate(struct page *page) { }
static inline void ClearPageDirty(struct page *page) { }
static inline void ClearPageLRU(struct page *page) { }
static inline void ClearPageActive(struct page *page) { }
static inline void ClearPageSlab(struct page *page) { }
static inline void ClearPageReserved(struct page *page) { }
static inline void ClearPagePrivate(struct page *page) { }
static inline void ClearPageWriteback(struct page *page) { }

#endif /* !__GENERATING_BOUNDS_H */
#endif /* PAGE_FLAGS_H */
