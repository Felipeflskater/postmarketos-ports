--- a/arch/arm/include/asm/assembler.h
+++ b/arch/arm/include/asm/assembler.h
@@ -28,6 +28,98 @@
 
 #define IOMEM(x)	(x)
 
+#ifndef __ARMEB__
+#define pull lsr
+#define push lsl
+#else
+#define pull lsl
+#define push lsr
+#endif
+
+#if __LINUX_ARM_ARCH__ >= 5
+#define PLD(code...) code
+#else
+#define PLD(code...)
+#endif
+
+#ifdef CONFIG_CPU_CACHE_VIPT
+#define CALGN(code...) code
+#else
+#define CALGN(code...)
+#endif
+
+#if __LINUX_ARM_ARCH__ >= 6
+	.macro disable_irq_notrace
+	cpsid i
+	.endm
+	.macro enable_irq_notrace
+	cpsie i
+	.endm
+#else
+	.macro disable_irq_notrace
+	msr cpsr_c, #PSR_I_BIT | SVC_MODE
+	.endm
+	.macro enable_irq_notrace
+	msr cpsr_c, #SVC_MODE
+	.endm
+#endif
+
+	.macro disable_irq
+	disable_irq_notrace
+	.endm
+
+	.macro enable_irq
+	enable_irq_notrace
+	.endm
+
+#define USER(x...) \
+9999: x; \
+	.pushsection __ex_table,"a"; \
+	.align 3; \
+	.long 9999b,9001f; \
+	.popsection
+
+#ifdef CONFIG_SMP
+#define ALT_SMP(instr...) \
+9998: instr
+#define ALT_UP(instr...) \
+	.pushsection ".alt.smp.init", "a"; \
+	.long 9998b; \
+9997: instr; \
+	.if . - 9997b != 4; \
+		.error "ALT_UP() must be 4 bytes"; \
+	.endif; \
+	.popsection
+#define alt_smp(instr...) ALT_SMP(instr)
+#define alt_up(instr...) ALT_UP(instr)
+#else
+#define ALT_SMP(instr...)
+#define ALT_UP(instr...) instr
+#define alt_smp(instr...)
+#define alt_up(instr...) instr
+#endif
+
+	.macro smp_dmb mode
+#ifdef CONFIG_SMP
+	dmb \mode
+#else
+	nop
+#endif
+	.endm
+
+#ifdef CONFIG_THUMB2_KERNEL
+	.macro setmode, mode, reg
+	mov \reg, #\mode
+	msr cpsr_c, \reg
+	.endm
+#else
+	.macro setmode, mode, reg
+	msr cpsr_c, #\mode
+	.endm
+#endif
+
+#define BSYM(sym) sym + 1
+#define USERL(l, x...) USER(x)
+
 /*
  * Instruction barrier
  */
@@ -53,6 +145,19 @@
 #endif
 	.endm
 
+#ifdef CONFIG_THUMB2_KERNEL
+	.macro usraccoff, instr, reg, ptr, inc, off, cond, abort, t=TUSER()
+9999:
+	.if \inc == 1
+	\instr\cond\()b\()\t\().w \reg, [\ptr, #\off]
+	.elseif \inc == 4
+	\instr\cond\()\t\().w \reg, [\ptr, #\off]
+	.else
+	.error "Unsupported inc"
+	.endif
+	.pushsection __ex_table,"a"
+	.align 3
+	.long 9999b, \abort
+	.popsection
+	.endm
+	.macro usracc, instr, reg, ptr, inc, cond, rept, abort
+	usraccoff \instr, \reg, \ptr, \inc, 0, \cond, \abort
+	add\cond \ptr, #\rept * \inc
+	.endm
+#else
 	.macro	usracc, instr, reg, ptr, inc, cond, rept, abort, t=TUSER()
 	.rept	\rept
 9999:
@@ -68,6 +173,7 @@
 	.popsection
 	.endr
 	.endm
+#endif
 
 	.macro	strusr, reg, ptr, inc, cond=al, rept=1, abort=9001f
 	usracc	str, \reg, \ptr, \inc, \cond, \rept, \abort
@@ -77,4 +183,51 @@
 	usracc	ldr, \reg, \ptr, \inc, \cond, \rept, \abort
 	.endm
 
+#ifndef CONFIG_THUMB2_KERNEL
+	.macro store_user_sp_lr, base, off
+	stmdb \base, {sp, lr}^
+	.endm
+#else
+	.macro store_user_sp_lr, base, tmp, off
+	str sp, [\base, #\off]
+	str lr, [\base, #\off + 4]
+	.endm
+#endif
+
+	.macro arm, instr:vararg
+#ifndef CONFIG_THUMB2_KERNEL
+	\instr
+#endif
+	.endm
+
+	.macro thumb, instr:vararg
+#ifdef CONFIG_THUMB2_KERNEL
+	\instr
+#endif
+	.endm
+
+	.macro w, instr
+	\instr
+	.endm
+
+#if __LINUX_ARM_ARCH__ >= 7
+	.macro bitop, name, instr
+ENTRY(\name)
+	ands ip, r1, #3
+	mov r2, #1
+	and r3, r0, #31
+	add r1, r1, r0, lsr #3
+	mov r3, r2, lsl r3
+1:	ldrex r2, [r1]
+	\instr r2, r2, r3
+	strex r0, r2, [r1]
+	cmp r0, #0
+	bne 1b
+	bx lr
+ENDPROC(\name)
+	.endm
+#else
+	.macro bitop, name, instr
+	.endm
+#endif
+
 #endif /* __ASM_ASSEMBLER_H__ */
