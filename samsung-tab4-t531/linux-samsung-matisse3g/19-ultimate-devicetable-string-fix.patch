--- a/scripts/mod/devicetable-offsets.c
+++ b/scripts/mod/devicetable-offsets.c
@@ -1,120 +1,50 @@
-/*
- * Device table offsets - FIXED for kernel 3.4.x and GCC 14+
- * This file generates the SIZE_ and OFF_ constants needed by file2alias.c
- */
-#include <linux/kbuild.h>
-#include <linux/mod_devicetable.h>
-#include <linux/stddef.h>
-
-/* Define offsetof if not available */
-#ifndef offsetof
-#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
-#endif
-
-#define DEVID(devid) DEFINE(SIZE_##devid, sizeof(struct devid))
-#define DEVID_FIELD(devid, field) DEFINE(OFF_##devid##_##field, offsetof(struct devid, field))
-
-int
-main(void)
-{
-	DEVID(pci_device_id);
-	DEVID_FIELD(pci_device_id, vendor);
-	DEVID_FIELD(pci_device_id, device);
-	DEVID_FIELD(pci_device_id, subvendor);
-	DEVID_FIELD(pci_device_id, subdevice);
-	DEVID_FIELD(pci_device_id, class);
-	DEVID_FIELD(pci_device_id, class_mask);
-
-	DEVID(usb_device_id);
-	DEVID_FIELD(usb_device_id, match_flags);
-	DEVID_FIELD(usb_device_id, idVendor);
-	DEVID_FIELD(usb_device_id, idProduct);
-	DEVID_FIELD(usb_device_id, bcdDevice_lo);
-	DEVID_FIELD(usb_device_id, bcdDevice_hi);
-	DEVID_FIELD(usb_device_id, bDeviceClass);
-	DEVID_FIELD(usb_device_id, bDeviceSubClass);
-	DEVID_FIELD(usb_device_id, bDeviceProtocol);
-	DEVID_FIELD(usb_device_id, bInterfaceClass);
-	DEVID_FIELD(usb_device_id, bInterfaceSubClass);
-	DEVID_FIELD(usb_device_id, bInterfaceProtocol);
-	DEVID_FIELD(usb_device_id, bInterfaceNumber);
-
-	DEVID(hid_device_id);
-	DEVID_FIELD(hid_device_id, bus);
-	DEVID_FIELD(hid_device_id, group);
-	DEVID_FIELD(hid_device_id, vendor);
-	DEVID_FIELD(hid_device_id, product);
-
-	DEVID(input_device_id);
-	DEVID_FIELD(input_device_id, flags);
-	DEVID_FIELD(input_device_id, bustype);
-	DEVID_FIELD(input_device_id, vendor);
-	DEVID_FIELD(input_device_id, product);
-	DEVID_FIELD(input_device_id, version);
-	DEVID_FIELD(input_device_id, evbit);
-	DEVID_FIELD(input_device_id, keybit);
-	DEVID_FIELD(input_device_id, relbit);
-	DEVID_FIELD(input_device_id, absbit);
-	DEVID_FIELD(input_device_id, mscbit);
-	DEVID_FIELD(input_device_id, ledbit);
-	DEVID_FIELD(input_device_id, sndbit);
-	DEVID_FIELD(input_device_id, ffbit);
-	DEVID_FIELD(input_device_id, swbit);
-
-	DEVID(platform_device_id);
-	DEVID_FIELD(platform_device_id, name);
-
-	DEVID(i2c_device_id);
-	DEVID_FIELD(i2c_device_id, name);
-
-	DEVID(spi_device_id);
-	DEVID_FIELD(spi_device_id, name);
-
-	DEVID(dmi_system_id);
-	DEVID_FIELD(dmi_system_id, matches);
-
-	DEVID(mdio_device_id);
-	DEVID_FIELD(mdio_device_id, phy_id);
-	DEVID_FIELD(mdio_device_id, phy_id_mask);
-
-	DEVID(zorro_device_id);
-	DEVID_FIELD(zorro_device_id, id);
-
-	DEVID(isapnp_device_id);
-	DEVID_FIELD(isapnp_device_id, vendor);
-	DEVID_FIELD(isapnp_device_id, function);
-
-	DEVID(amba_id);
-	DEVID_FIELD(amba_id, id);
-	DEVID_FIELD(amba_id, mask);
-
-	DEVID(x86_cpu_id);
-	DEVID_FIELD(x86_cpu_id, feature);
-	DEVID_FIELD(x86_cpu_id, family);
-	DEVID_FIELD(x86_cpu_id, model);
-	DEVID_FIELD(x86_cpu_id, vendor);
-
-	DEVID(of_device_id);
-	DEVID_FIELD(of_device_id, name);
-	DEVID_FIELD(of_device_id, type);
-	DEVID_FIELD(of_device_id, compatible);
-
-	DEVID(virtio_device_id);
-	DEVID_FIELD(virtio_device_id, device);
-	DEVID_FIELD(virtio_device_id, vendor);
-
-	DEVID(hv_vmbus_device_id);
-	DEVID_FIELD(hv_vmbus_device_id, guid);
-
-	/* Empty definitions for optional devices to avoid link errors */
-	DEFINE(SIZE_ieee1394_device_id, 0);
-	DEFINE(SIZE_ccw_device_id, 0);
-	DEFINE(SIZE_ap_device_id, 0);
-	DEFINE(SIZE_css_device_id, 0);
-	DEFINE(SIZE_serio_device_id, 0);
-	DEFINE(SIZE_acpi_device_id, 0);
-	DEFINE(SIZE_pnp_device_id, 0);
-	DEFINE(SIZE_pnp_card_device_id, 0);
-	DEFINE(SIZE_pcmcia_device_id, 0);
-	DEFINE(SIZE_vio_device_id, 0);
-	DEFINE(SIZE_eisa_device_id, 0);
-	DEFINE(SIZE_parisc_device_id, 0);
-	DEFINE(SIZE_sdio_device_id, 0);
-	DEFINE(SIZE_ssb_device_id, 0);
-	DEFINE(SIZE_bcma_device_id, 0);
-
-	return 0;
-}
+/* 
+ * SIMPLIFIED devicetable-offsets.c for kernel 3.4.x
+ * This approach avoids offsetof problems by using manual calculations
+ */
+#include <linux/kbuild.h>
+#include <linux/mod_devicetable.h>
+
+/* Manual offset calculations to avoid offsetof issues */
+#define MANUAL_OFFSET(type, field) ((unsigned long)&((type *)8)->field - 8)
+
+#define DEVID(devid) DEFINE(SIZE_##devid, sizeof(struct devid))
+#define DEVID_FIELD(devid, field) DEFINE(OFF_##devid##_##field, MANUAL_OFFSET(struct devid, field))
+
+int main(void)
+{
+    /* Only essential device types for ARM kernel */
+    DEVID(pci_device_id);
+    DEVID_FIELD(pci_device_id, vendor);
+    
+    DEVID(usb_device_id);
+    DEVID_FIELD(usb_device_id, match_flags);
+    DEVID_FIELD(usb_device_id, idVendor);
+    DEVID_FIELD(usb_device_id, idProduct);
+    DEVID_FIELD(usb_device_id, bcdDevice_lo);
+    DEVID_FIELD(usb_device_id, bcdDevice_hi);
+    DEVID_FIELD(usb_device_id, bDeviceClass);
+    DEVID_FIELD(usb_device_id, bDeviceSubClass);
+    DEVID_FIELD(usb_device_id, bDeviceProtocol);
+    DEVID_FIELD(usb_device_id, bInterfaceClass);
+    DEVID_FIELD(usb_device_id, bInterfaceSubClass);
+    DEVID_FIELD(usb_device_id, bInterfaceProtocol);
+    DEVID_FIELD(usb_device_id, bInterfaceNumber);
+    
+    DEVID(platform_device_id);
+    DEVID_FIELD(platform_device_id, name);
+    
+    DEVID(of_device_id);
+    DEVID_FIELD(of_device_id, name);
+    DEVID_FIELD(of_device_id, type);
+    DEVID_FIELD(of_device_id, compatible);
+    
+    /* Minimal set for other devices */
+    DEVID(input_device_id);
+    DEVID_FIELD(input_device_id, flags);
+    
+    /* All other device types set to zero to avoid linker errors */
+    DEFINE(SIZE_ieee1394_device_id, 0); DEFINE(SIZE_ccw_device_id, 0); DEFINE(SIZE_ap_device_id, 0);
+    DEFINE(SIZE_css_device_id, 0); DEFINE(SIZE_serio_device_id, 0); DEFINE(SIZE_acpi_device_id, 0);
+    DEFINE(SIZE_pnp_device_id, 0); DEFINE(SIZE_pnp_card_device_id, 0); DEFINE(SIZE_pcmcia_device_id, 0);
+    DEFINE(SIZE_vio_device_id, 0); DEFINE(SIZE_eisa_device_id, 0); DEFINE(SIZE_parisc_device_id, 0);
+    DEFINE(SIZE_sdio_device_id, 0); DEFINE(SIZE_ssb_device_id, 0); DEFINE(SIZE_bcma_device_id, 0);
+    DEFINE(SIZE_hid_device_id, 0); DEFINE(SIZE_i2c_device_id, 0); DEFINE(SIZE_spi_device_id, 0);
+    DEFINE(SIZE_dmi_system_id, 0); DEFINE(SIZE_mdio_device_id, 0); DEFINE(SIZE_zorro_device_id, 0);
+    DEFINE(SIZE_isapnp_device_id, 0); DEFINE(SIZE_amba_id, 0); DEFINE(SIZE_x86_cpu_id, 0);
+    DEFINE(SIZE_virtio_device_id, 0); DEFINE(SIZE_hv_vmbus_device_id, 0);
+    
+    return 0;
+}
--- a/include/linux/string.h
+++ b/include/linux/string.h
@@ -4,7 +4,9 @@
 
 #include <linux/compiler.h>	/* for inline */
 #include <linux/types.h>	/* for size_t */
+#ifndef __KERNEL__
 #include <string.h>
+#endif
 
 extern char *strndup_user(const char __user *, long);
 extern void *memdup_user(const void __user *, size_t);
--- a/arch/arm/kernel/asm-offsets.c
+++ b/arch/arm/kernel/asm-offsets.c
@@ -8,8 +8,12 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+#ifndef __KERNEL__
+#define __KERNEL__ 1
+#endif
+
 #include <linux/stddef.h>
 #include <linux/sched.h>
 #include <linux/mm.h>
 #include <linux/dma-mapping.h>
 #include <asm/thread_info.h>