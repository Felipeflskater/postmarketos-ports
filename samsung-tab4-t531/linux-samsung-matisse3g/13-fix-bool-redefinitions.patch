--- a/include/linux/stddef.h
+++ b/include/linux/stddef.h
@@ -14,8 +14,12 @@ enum {
 	false	= 0,
 	true	= 1
 };
+
+#ifndef __cplusplus
+#ifndef _Bool
 #define false __kernel_false
 #define true  __kernel_true
+#endif
+#endif
 
 #undef offsetof
--- a/include/linux/types.h
+++ b/include/linux/types.h
@@ -23,9 +23,13 @@ typedef __kernel_gid32_t	gid_t;
 typedef __kernel_uid16_t        uid16_t;
 typedef __kernel_gid16_t        gid16_t;
 
+#ifndef __cplusplus
+#ifndef _Bool
 typedef _Bool			bool;
+#endif
+#endif
 
 typedef __kernel_loff_t		loff_t;
 
 /*
  * The following typedefs are also protected by individual ifdefs for
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -164,8 +164,12 @@ void ftrace_likely_update(struct ftrace_branch_data *f, int val, int expect);
 #include <linux/compiler-gcc.h>
 #endif
 
+#ifndef __ASSEMBLY__
 #define notrace __attribute__((no_instrument_function))
+#endif
 
+#ifndef __ASSEMBLY__
+#ifndef _Bool
 /* Intel compiler defines __GNUC__. So we will overwrite implementations
  * coming from above header files here
  */
@@ -175,6 +179,8 @@ void ftrace_likely_update(struct ftrace_branch_data *f, int val, int expect);
 # include <linux/compiler-intel.h>
 #endif
 
+#endif
+#endif
 /*
  * Generic compiler-dependent macros required for kernel
  * build go below this comment. Actual compiler/compiler version